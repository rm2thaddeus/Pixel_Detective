---
description: Debugging
globs: 
alwaysApply: false
---
Before starting to debug, take your time to explore the files related with the user request.

Once found, use appropriate MCP servers to gather relevant context and debug information:

## **MCP-Enhanced Debugging Workflow**

### **1. Collect Context & Evidence**
- **Error Analysis**: Capture error messages, logs, stack traces
- **File Discovery**: Use `grep_search` for exact matches, `codebase_search` for broader context
- **Frontend Issues**: 
  - Use **Browser Tools MCP** to capture console logs (`mcp_browser-tools_getConsoleLogs`, `mcp_browser-tools_getConsoleErrors`)
  - Capture network errors (`mcp_browser-tools_getNetworkErrors`) 
  - Take screenshots (`mcp_browser-tools_takeScreenshot`) for visual issues
- **Database Issues**: Use **Supabase MCP** to query data and check schema integrity
- **Library/API Issues**: Use **Context7 MCP** to gather relevant documentation

### **2. Investigate Root Causes**
- List ≥3 hypotheses based on collected evidence
- Confirm via targeted file reading (`cat -n`) & project structure (`tree`)
- **Frontend Root Causes**: Run comprehensive audits (`mcp_browser-tools_runAuditMode`)
- **Performance Issues**: Use `mcp_browser-tools_runPerformanceAudit`
- **Database Root Causes**: Execute diagnostic SQL queries via Supabase MCP

### **3. Reuse Patterns & Solutions**
- Search for prior fixes or utilities in codebase
- **Library Documentation**: Use Context7 MCP for up-to-date API examples and troubleshooting guides
- **Similar Issues**: Use GitHub MCP to search for related issues in project history

### **4. Analyze Impact & Dependencies** 
- Trace dependencies and side-effects
- **Frontend Impact**: Use Browser Control MCP to analyze affected pages/components
- **Database Impact**: Check foreign key constraints and data integrity via Supabase MCP
- **Cross-System Impact**: Consider how changes affect multiple MCP domains

### **5. Propose & Implement Fixes**
- Specify file paths, line numbers, code snippets with clear justification
- **Clean Debugging Environment**: Use `mcp_browser-tools_wipeLogs` before testing fixes
- **Database Fixes**: Use transactions in Supabase MCP for safe schema/data changes
- **Code Changes**: Use GitHub MCP for version-controlled implementation

### **6. Validate & Monitor**
- **Test Cases**: Outline comprehensive test scenarios
- **Frontend Validation**: 
  - Re-run audits (`mcp_browser-tools_runAccessibilityAudit`, `mcp_browser-tools_runSEOAudit`)
  - Capture post-fix screenshots for comparison
- **Database Validation**: Execute verification queries via Supabase MCP
- **Documentation**: Update Context7-sourced documentation if API usage patterns changed
- **Monitoring**: Set up logging and establish rollback procedures via GitHub MCP

## **Issue Type → MCP Server Mapping**

| **Issue Type** | **Primary MCP** | **Secondary MCP** | **Actions** |
|----------------|-----------------|-------------------|-------------|
| **Frontend Bugs** | Browser Tools | Browser Control | Logs, audits, screenshots, content analysis |
| **Database Issues** | Supabase | GitHub | Query diagnosis, schema fixes, version control |
| **API/Library Problems** | Context7 | GitHub | Documentation lookup, implementation fixes |
| **Performance Issues** | Browser Tools | Supabase | Performance audits, query optimization |
| **Integration Issues** | Multiple | GitHub | Cross-system analysis, coordinated fixes |

## **Emergency Debugging Protocol**

1. **Immediate Assessment**: Use Browser Tools MCP to capture current state
2. **Quick Diagnosis**: Context7 MCP for known issue patterns  
3. **Safe Recovery**: GitHub MCP for rollback capabilities
4. **Root Cause Analysis**: Follow full workflow above
5. **Prevention**: Update `@commentsoverwrite` documentation to prevent recurrence

---

*This enhanced debugging workflow leverages all available MCP servers for comprehensive issue resolution while maintaining systematic problem-solving approach.*


