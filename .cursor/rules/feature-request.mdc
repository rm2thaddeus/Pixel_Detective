---
description: Feature implementation rules
globs: 
alwaysApply: false
---
# Feature Implementation with MCP Integration

*Reference: Follow `@use-mcp-servers` for detailed MCP workflows and best practices*

## **MCP-Enhanced Feature Development Workflow**

### **1. Map Context & Discovery**
- **Project Structure**: `tree -L 4 --gitignore | cat` - identify modules/APIs
- **Existing Patterns**: Use `codebase_search` to find similar features and reusable components
- **Dependencies Analysis**: Use `grep_search` for exact symbol/import matches
- **Documentation Research**: Use **Context7 MCP** to gather API docs for new libraries/frameworks needed
- **Database Schema Review**: Use **Supabase MCP** to understand existing data structures if feature involves data

### **2. Specify Requirements & Architecture**
- Break feature into **testable criteria**, **use cases**, and **constraints**
- **Frontend Requirements**: Consider UI/UX implications, accessibility standards
- **Backend Requirements**: Define data models, API endpoints, business logic
- **Integration Points**: Identify touchpoints with existing systems
- **Performance Criteria**: Set measurable performance benchmarks
- **Documentation Standards**: Plan documentation updates per `@use-mcp-servers` guidelines

### **3. Leverage Reusability & Research**
- **Component Discovery**: Use `codebase_search` and `grep_search` to find reusable patterns
- **Library Integration**: Use **Context7 MCP** to:
  - Research best practices for new dependencies
  - Find code examples and implementation patterns
  - Understand API compatibility and version requirements
- **Database Patterns**: Use **Supabase MCP** to identify reusable query patterns and schema structures
- **Similar Features**: Use **GitHub MCP** to search project history for related implementations

### **4. Plan Changes & MCP Strategy**
- **File Inventory**: List all files to edit/create with specific paths
- **Cross-Cutting Concerns**: Identify impacts on authentication, logging, error handling, testing
- **MCP Server Selection**: Choose appropriate MCP servers per `@use-mcp-servers` task-based guide:
  - **Frontend Features**: Browser Tools + Browser Control MCP for testing/validation
  - **Backend Features**: Supabase MCP for database operations
  - **API Integration**: Context7 MCP for documentation + GitHub MCP for implementation
  - **Full-Stack Features**: Coordinate multiple MCP servers
- **Branch Strategy**: Plan feature branch creation via **GitHub MCP**

### **5. Implement Precisely & Systematically**
- **Step-by-Step Implementation**: Document with file paths, line numbers, code snippets
- **Database Changes**: Use **Supabase MCP** with transactions for schema modifications
- **Frontend Implementation**: 
  - Code changes via **GitHub MCP**
  - Real-time testing with **Browser Tools MCP** (console logs, performance audits)
  - Visual validation with screenshots
- **API Development**: Reference **Context7 MCP** docs during implementation
- **Version Control**: Use **GitHub MCP** for incremental commits following Conventional Commits style
- **Documentation**: Update inline documentation per `@commentsoverwrite` rules

### **6. Validate & Stabilize**
- **Test Scenarios**: Define comprehensive test cases covering:
  - **Functional Testing**: Core feature behavior
  - **Integration Testing**: Cross-system interactions
  - **Performance Testing**: Use **Browser Tools MCP** for frontend performance audits
  - **Accessibility Testing**: Run `mcp_browser-tools_runAccessibilityAudit`
  - **Database Testing**: Validate data integrity via **Supabase MCP**
- **Quality Assurance**:
  - **Frontend**: Run full audit suite (`mcp_browser-tools_runAuditMode`)
  - **Backend**: Execute validation queries and check constraints
  - **Security**: Review authentication/authorization impacts
- **Monitoring & Rollback**:
  - Set up logging and monitoring via **GitHub MCP** commits
  - Document rollback procedures
  - Use **Browser Tools MCP** for ongoing performance monitoring
  - Update `/docs/CHANGELOG.md` via **GitHub MCP**

## **Feature Type â†’ MCP Strategy Matrix**

| **Feature Type** | **Primary MCP** | **Secondary MCPs** | **Key Activities** |
|------------------|-----------------|-------------------|-------------------|
| **UI/UX Features** | Browser Tools | Browser Control, GitHub | Audits, screenshots, visual testing, commits |
| **Data Features** | Supabase | GitHub, Context7 | Schema changes, queries, documentation, version control |
| **API Integration** | Context7 | GitHub, Browser Tools | Documentation research, implementation, testing |
| **Full-Stack Features** | GitHub | All MCPs | Coordinated development across all layers |
| **Performance Features** | Browser Tools | Supabase, GitHub | Performance audits, query optimization, monitoring |

## **Feature Completion Checklist**

- [ ] **Code Quality**: All implementations follow project standards
- [ ] **Testing**: Comprehensive test coverage with MCP-assisted validation
- [ ] **Documentation**: Updated per `@use-mcp-servers` documentation standards
- [ ] **Performance**: Browser Tools MCP audits pass acceptance criteria
- [ ] **Accessibility**: Accessibility audit results meet standards
- [ ] **Database**: Schema changes properly migrated and validated
- [ ] **Version Control**: Clean commit history with conventional commit messages
- [ ] **Monitoring**: Logging and rollback procedures in place

---

*This enhanced workflow integrates all available MCP servers for efficient, well-documented, and thoroughly tested feature development.* 