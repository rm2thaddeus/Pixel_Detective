{"version":3,"file":"wgsl_reflect.node.js","sources":["src/reflect/info.ts","src/utils/float.ts","src/utils/texture_sample.ts","src/utils/texture_format_info.ts","src/wgsl_ast.ts","src/wgsl_scanner.ts","src/utils/cast.ts","src/reflect/reflect.ts","src/exec/exec_context.ts","src/exec/exec_interface.ts","src/exec/builtin_functions.ts","src/utils/matrix.ts","src/wgsl_exec.ts","src/ast/parse_context.ts","src/wgsl_parser.ts","src/exec/command.ts","src/exec/stack_frame.ts","src/exec/exec_stack.ts","src/wgsl_debug.ts","src/wgsl_reflect.ts"],"sourcesContent":["import { Attribute } from \"../wgsl_ast.js\";\r\n\r\nexport class TypeInfo {\r\n  name: string;\r\n  attributes: Attribute[] | null;\r\n  size: number;\r\n\r\n  constructor(name: string, attributes: Attribute[] | null) {\r\n    this.name = name;\r\n    this.attributes = attributes;\r\n    this.size = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isPointer(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\nexport class MemberInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n  attributes: Attribute[] | null;\r\n  offset: number;\r\n  size: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    attributes: Attribute[] | null\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n    this.offset = 0;\r\n    this.size = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return this.type.isArray;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return this.type.isStruct;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return this.type.isTemplate;\r\n  }\r\n\r\n  get align(): number {\r\n    return this.type.isStruct ? (this.type as StructInfo).align : 0;\r\n  }\r\n\r\n  get members(): MemberInfo[] | null {\r\n    return this.type.isStruct ? (this.type as StructInfo).members : null;\r\n  }\r\n\r\n  get format(): TypeInfo | null {\r\n    return this.type.isArray\r\n      ? (this.type as ArrayInfo).format\r\n      : this.type.isTemplate\r\n      ? (this.type as TemplateInfo).format\r\n      : null;\r\n  }\r\n\r\n  get count(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).count : 0;\r\n  }\r\n\r\n  get stride(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).stride : this.size;\r\n  }\r\n}\r\n\r\nexport class StructInfo extends TypeInfo {\r\n  members: MemberInfo[] = [];\r\n  align: number = 0;\r\n  startLine: number = -1;\r\n  endLine: number = -1;\r\n  inUse: boolean = false;\r\n\r\n  constructor(name: string, attributes: Attribute[] | null) {\r\n    super(name, attributes);\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class ArrayInfo extends TypeInfo {\r\n  format: TypeInfo;\r\n  count: number;\r\n  stride: number;\r\n\r\n  constructor(name: string, attributes: Attribute[] | null) {\r\n    super(name, attributes);\r\n    this.count = 0;\r\n    this.stride = 0;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return `array<${this.format.getTypeName()}, ${this.count}>`;\r\n  }\r\n}\r\n\r\nexport class PointerInfo extends TypeInfo {\r\n  format: TypeInfo;\r\n  constructor(name: string, format: TypeInfo, attributes: Attribute[] | null) {\r\n    super(name, attributes);\r\n    this.format = format;\r\n  }\r\n\r\n  get isPointer(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return `&${this.format.getTypeName()}`;\r\n  }\r\n}\r\n\r\nexport class TemplateInfo extends TypeInfo {\r\n  format: TypeInfo | null;\r\n  access: string;\r\n  constructor(\r\n    name: string,\r\n    format: TypeInfo | null,\r\n    attributes: Attribute[] | null,\r\n    access: string\r\n  ) {\r\n    super(name, attributes);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    let name = this.name;\r\n    if (this.format !== null) {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\" ||\r\n          name === \"mat2x2\" || name === \"mat2x3\" || name === \"mat2x4\" ||\r\n          name === \"mat3x2\" || name === \"mat3x3\" || name === \"mat3x4\" ||\r\n          name === \"mat4x2\" || name === \"mat4x3\" || name === \"mat4x4\") {\r\n        if (this.format.name === \"f32\") {\r\n          name += \"f\";\r\n          return name;\r\n        } else if (this.format.name === \"i32\") {\r\n          name += \"i\";\r\n          return name;\r\n        } else if (this.format.name === \"u32\") {\r\n          name += \"u\";\r\n          return name;\r\n        } else if (this.format.name === \"bool\") {\r\n          name += \"b\";\r\n          return name;\r\n        } else if (this.format.name === \"f16\") {\r\n          name += \"h\";\r\n          return name;\r\n        }\r\n      }\r\n      name += `<${this.format.name}>`;\r\n    } else {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\") {\r\n        return name;\r\n      }\r\n      //console.error(\"Template format is null.\");\r\n    }\r\n    return name;\r\n  }\r\n}\r\n\r\nexport enum ResourceType {\r\n  Uniform,\r\n  Storage,\r\n  Texture,\r\n  Sampler,\r\n  StorageTexture,\r\n}\r\n\r\nexport class VariableInfo {\r\n  attributes: Attribute[] | null;\r\n  name: string;\r\n  type: TypeInfo;\r\n  group: number;\r\n  binding: number;\r\n  resourceType: ResourceType;\r\n  access: string;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    group: number,\r\n    binding: number,\r\n    attributes: Attribute[] | null,\r\n    resourceType: ResourceType,\r\n    access: string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.group = group;\r\n    this.binding = binding;\r\n    this.attributes = attributes;\r\n    this.resourceType = resourceType;\r\n    this.access = access;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return this.type.isArray;\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return this.type.isStruct;\r\n  }\r\n\r\n  get isTemplate(): boolean {\r\n    return this.type.isTemplate;\r\n  }\r\n\r\n  get size(): number {\r\n    return this.type.size;\r\n  }\r\n\r\n  get align(): number {\r\n    return this.type.isStruct ? (this.type as StructInfo).align : 0;\r\n  }\r\n\r\n  get members(): MemberInfo[] | null {\r\n    return this.type.isStruct ? (this.type as StructInfo).members : null;\r\n  }\r\n\r\n  get format(): TypeInfo | null {\r\n    return this.type.isArray\r\n      ? (this.type as ArrayInfo).format\r\n      : this.type.isTemplate\r\n      ? (this.type as TemplateInfo).format\r\n      : null;\r\n  }\r\n\r\n  get count(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).count : 0;\r\n  }\r\n\r\n  get stride(): number {\r\n    return this.type.isArray ? (this.type as ArrayInfo).stride : this.size;\r\n  }\r\n}\r\n\r\nexport class AliasInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n\r\n  constructor(name: string, type: TypeInfo) {\r\n    this.name = name;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\nexport class InputInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  locationType: string;\r\n  location: number | string;\r\n  interpolation: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    locationType: string,\r\n    location: number | string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.locationType = locationType;\r\n    this.location = location;\r\n    this.interpolation = null;\r\n  }\r\n}\r\n\r\nexport class OutputInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  locationType: string;\r\n  location: number | string;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    locationType: string,\r\n    location: number | string\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.locationType = locationType;\r\n    this.location = location;\r\n  }\r\n}\r\n\r\nexport class OverrideInfo {\r\n  name: string;\r\n  type: TypeInfo | null;\r\n  attributes: Attribute[] | null;\r\n  id: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo | null,\r\n    attributes: Attribute[] | null,\r\n    id: number\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n    this.id = id;\r\n  }\r\n}\r\n\r\nexport class ArgumentInfo {\r\n  name: string;\r\n  type: TypeInfo;\r\n  attributes: Attribute[] | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: TypeInfo,\r\n    attributes: Attribute[] | null\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n}\r\n\r\nexport class FunctionInfo {\r\n  name: string;\r\n  stage: string | null = null;\r\n  inputs: InputInfo[] = [];\r\n  outputs: OutputInfo[] = [];\r\n  arguments: ArgumentInfo[] = [];\r\n  returnType: TypeInfo | null = null;\r\n  resources: VariableInfo[] = [];\r\n  overrides: OverrideInfo[] = [];\r\n  attributes: Attribute[] | null;\r\n  startLine: number = -1;\r\n  endLine: number = -1;\r\n  inUse: boolean = false;\r\n  calls: Set<FunctionInfo> = new Set();\r\n\r\n  constructor(name: string, stage: string | null = null, attributes: Attribute[] | null) {\r\n    this.name = name;\r\n    this.stage = stage;\r\n    this.attributes = attributes;\r\n  }\r\n}\r\n\r\nexport class EntryFunctions {\r\n  vertex: FunctionInfo[] = [];\r\n  fragment: FunctionInfo[] = [];\r\n  compute: FunctionInfo[] = [];\r\n}\r\n","// From https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\r\nexport function float16ToFloat32(float16: number): number {\r\n    var s = (float16 & 0x8000) >> 15;\r\n    var e = (float16 & 0x7C00) >> 10;\r\n    var f = float16 & 0x03FF;\r\n\r\n    if (e == 0) {\r\n      return (s ? -1:1) * Math.pow(2, -14) * (f / Math.pow(2, 10));\r\n    } else if (e == 0x1F) {\r\n      return f ? NaN : ((s ? -1 : 1) * Infinity);\r\n    }\r\n\r\n    return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + (f / Math.pow(2, 10)));\r\n}\r\n\r\nconst float32View = new Float32Array(1);\r\nconst int32View = new Int32Array(float32View.buffer);\r\nconst float16View = new Uint16Array(1);\r\n\r\nexport function float32ToFloat16(float32: number): number {\r\n  float32View[0] = float32;\r\n\r\n  const f32 = int32View[0];\r\n  const sign = (f32 >> 31) & 1;\r\n  let exponent = (f32 >> 23) & 0xff;\r\n  let fraction = f32 & 0x7fffff;\r\n\r\n  if (exponent === 0xff) { // Infinity or NaN\r\n    float16View[0] = (sign << 15) | 0x7c00 | (fraction !== 0 ? 0x0200 : 0);\r\n    return float16View[0];\r\n  }\r\n\r\n  if (exponent === 0) { // Zero or subnormal\r\n    if (fraction === 0) { // Zero\r\n      float16View[0] = sign << 15;\r\n      return float16View[0];\r\n    }\r\n    // Subnormal\r\n    fraction |= 0x800000;\r\n    let shift = 113;\r\n    while ((fraction & 0x800000) === 0) {\r\n      fraction <<= 1;\r\n      shift--;\r\n    }\r\n    exponent = 127 - shift;\r\n    fraction &= 0x7fffff;\r\n    if (exponent > 0) {\r\n      fraction = (fraction >> (126 - exponent)) + ((fraction >> (127 - exponent)) & 1);\r\n      float16View[0] = (sign << 15) | (exponent << 10) | (fraction >> 13);\r\n      return float16View[0];\r\n    } else {\r\n      float16View[0] = sign << 15;\r\n      return float16View[0];\r\n    }\r\n  }\r\n\r\n  // Normalized\r\n  exponent = exponent - 127 + 15;\r\n  if (exponent >= 31) { // Overflow\r\n    float16View[0] = (sign << 15) | 0x7c00;\r\n    return float16View[0];\r\n  }\r\n  if (exponent <= 0) { // Underflow\r\n    if (exponent < -10) {\r\n      float16View[0] = sign << 15;\r\n      return float16View[0];\r\n    }\r\n    fraction = (fraction | 0x800000) >> (1 - exponent);\r\n    float16View[0] = (sign << 15) | (fraction >> 13);\r\n    return float16View[0];\r\n  }\r\n\r\n  fraction = fraction >> 13;\r\n  float16View[0] = (sign << 15) | (exponent << 10) | fraction;\r\n  return float16View[0];\r\n}\r\n\r\nconst uint32 = new Uint32Array(1);\r\nconst uint32ToFloat32 = new Float32Array(uint32.buffer, 0, 1);\r\n\r\nexport function float11ToFloat32(f11: number): number {\r\n  const u32 = (((((f11) >> 6) & 0x1F) + (127 - 15)) << 23) | (((f11) & 0x3F) << 17);\r\n  uint32[0] = u32;\r\n  return uint32ToFloat32[0];\r\n}\r\n\r\nexport function float10ToFloat32(f10: number): number {\r\n  const u32 = (((((f10) >> 5) & 0x1F) + (127 - 15)) << 23) | (((f10) & 0x1F) << 18);\r\n  uint32[0] = u32;\r\n  return uint32ToFloat32[0];\r\n}\r\n","import { float16ToFloat32, float32ToFloat16, float10ToFloat32, float11ToFloat32 } from \"./float.js\";\r\n\r\nexport function setTexturePixel(imageData: Uint8Array, x: number, y: number, z: number, mipLevel: number,\r\n        height: number, bytesPerRow: number, texelByteSize: number, format: string, value: number[]): void {\r\n    bytesPerRow = bytesPerRow >> mipLevel;\r\n    height = height >> mipLevel;\r\n\r\n    const offset = (z * bytesPerRow * height) + y * bytesPerRow + x * texelByteSize;\r\n\r\n    switch (format) {\r\n        case \"r8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 1, value);\r\n            return;\r\n        }\r\n        case \"r8snorm\": {\r\n            setPixelValue(imageData, offset, \"8snorm\", 1, value);\r\n            return;\r\n        }\r\n        case \"r8uint\": {\r\n            setPixelValue(imageData, offset, \"8uint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r8sint\": {\r\n            setPixelValue(imageData, offset, \"8sint\", 1, value);\r\n            return;\r\n        }\r\n\r\n        case \"rg8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg8snorm\": {\r\n            setPixelValue(imageData, offset, \"8snorm\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg8uint\": {\r\n            setPixelValue(imageData, offset, \"8uint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg8sint\": {\r\n            setPixelValue(imageData, offset, \"8sint\", 2, value);\r\n            return;\r\n        }\r\n\r\n        case \"rgba8unorm-srgb\":\r\n        case \"rgba8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba8snorm\": {\r\n            setPixelValue(imageData, offset, \"8snorm\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba8uint\": {\r\n            setPixelValue(imageData, offset, \"8uint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba8sint\": {\r\n            setPixelValue(imageData, offset, \"8sint\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"bgra8unorm-srgb\":\r\n        case \"bgra8unorm\": {\r\n            setPixelValue(imageData, offset, \"8unorm\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"r16uint\": {\r\n            setPixelValue(imageData, offset, \"16uint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r16sint\": {\r\n            setPixelValue(imageData, offset, \"16sint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r16float\": {\r\n            setPixelValue(imageData, offset, \"16float\", 1, value);\r\n            return;\r\n        }\r\n\r\n        case \"rg16uint\": {\r\n            setPixelValue(imageData, offset, \"16uint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg16sint\": {\r\n            setPixelValue(imageData, offset, \"16sint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg16float\": {\r\n            setPixelValue(imageData, offset, \"16float\", 2, value);\r\n            return;\r\n        }\r\n\r\n        case \"rgba16uint\": {\r\n            setPixelValue(imageData, offset, \"16uint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba16sint\": {\r\n            setPixelValue(imageData, offset, \"16sint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba16float\": {\r\n            setPixelValue(imageData, offset, \"16float\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"r32uint\": {\r\n            setPixelValue(imageData, offset, \"32uint\", 1, value);\r\n            return;\r\n        }\r\n        case \"r32sint\": {\r\n            setPixelValue(imageData, offset, \"32sint\", 1, value);\r\n            return;\r\n        }\r\n        case \"depth16unorm\": // depth formats get conerted to r32float\r\n        case \"depth24plus\":\r\n        case \"depth24plus-stencil8\":\r\n        case \"depth32float\":\r\n        case \"depth32float-stencil8\":\r\n        case \"r32float\": {\r\n            setPixelValue(imageData, offset, \"32float\", 1, value);\r\n            return;\r\n        }\r\n        case \"rg32uint\": {\r\n            setPixelValue(imageData, offset, \"32uint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg32sint\": {\r\n            setPixelValue(imageData, offset, \"32sint\", 2, value);\r\n            return;\r\n        }\r\n        case \"rg32float\": {\r\n            setPixelValue(imageData, offset, \"32float\", 2, value);\r\n            return;\r\n        }\r\n        case \"rgba32uint\": {\r\n            setPixelValue(imageData, offset, \"32uint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba32sint\": {\r\n            setPixelValue(imageData, offset, \"32sint\", 4, value);\r\n            return;\r\n        }\r\n        case \"rgba32float\": {\r\n            setPixelValue(imageData, offset, \"32float\", 4, value);\r\n            return;\r\n        }\r\n\r\n        case \"rg11b10ufloat\": {\r\n            console.error(\"TODO: rg11b10ufloat not supported for writing\");\r\n            /*const uintValue = new Uint32Array(imageData.buffer, offset, 1)[0];\r\n            const ri = uintValue & 0x7FF;\r\n            const gi = (uintValue & 0x3FF800) >> 11;\r\n            const bi = (uintValue & 0xFFC00000) >> 22;\r\n            const rf = float11ToFloat32(ri);\r\n            const gf = float11ToFloat32(gi);\r\n            const bf = float10ToFloat32(bi);\r\n            return [rf, gf, bf, 1.0];*/\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTexturePixel(imageData: Uint8Array, x: number, y: number, z: number, mipLevel: number,\r\n        height: number, bytesPerRow: number, texelByteSize: number, format: string): number[] | null {\r\n    bytesPerRow = bytesPerRow >> mipLevel;\r\n    height = height >> mipLevel;\r\n\r\n    const offset = (z * bytesPerRow * height) + y * bytesPerRow + x * texelByteSize;\r\n\r\n    switch (format) {\r\n        case \"r8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r8snorm\": {\r\n            const value = pixelValue(imageData, offset, \"8snorm\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r8uint\": {\r\n            const value = pixelValue(imageData, offset, \"8uint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r8sint\": {\r\n            const value = pixelValue(imageData, offset, \"8sint\", 1);\r\n            return [value[0]];\r\n        }\r\n\r\n        case \"rg8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg8snorm\": {\r\n            const value = pixelValue(imageData, offset, \"8snorm\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg8uint\": {\r\n            const value = pixelValue(imageData, offset, \"8uint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg8sint\": {\r\n            const value = pixelValue(imageData, offset, \"8sint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n\r\n        case \"rgba8unorm-srgb\":\r\n        case \"rgba8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba8snorm\": {\r\n            const value = pixelValue(imageData, offset, \"8snorm\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba8uint\": {\r\n            const value = pixelValue(imageData, offset, \"8uint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba8sint\": {\r\n            const value = pixelValue(imageData, offset, \"8sint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n\r\n        case \"bgra8unorm-srgb\":\r\n        case \"bgra8unorm\": {\r\n            const value = pixelValue(imageData, offset, \"8unorm\", 4);\r\n            return [value[2], value[1], value[0], value[3]];\r\n        }\r\n\r\n        case \"r16uint\": {\r\n            const value = pixelValue(imageData, offset, \"16uint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r16sint\": {\r\n            const value = pixelValue(imageData, offset, \"16sint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r16float\": {\r\n            const value = pixelValue(imageData, offset, \"16float\", 1);\r\n            return [value[0]];\r\n        }\r\n\r\n        case \"rg16uint\": {\r\n            const value = pixelValue(imageData, offset, \"16uint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg16sint\": {\r\n            const value = pixelValue(imageData, offset, \"16sint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg16float\": {\r\n            const value = pixelValue(imageData, offset, \"16float\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n\r\n        case \"rgba16uint\": {\r\n            const value = pixelValue(imageData, offset, \"16uint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba16sint\": {\r\n            const value = pixelValue(imageData, offset, \"16sint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba16float\": {\r\n            const value = pixelValue(imageData, offset, \"16float\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n\r\n        case \"r32uint\": {\r\n            const value = pixelValue(imageData, offset, \"32uint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"r32sint\": {\r\n            const value = pixelValue(imageData, offset, \"32sint\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"depth16unorm\": // depth formats get conerted to r32float\r\n        case \"depth24plus\":\r\n        case \"depth24plus-stencil8\":\r\n        case \"depth32float\":\r\n        case \"depth32float-stencil8\":\r\n        case \"r32float\": {\r\n            const value = pixelValue(imageData, offset, \"32float\", 1);\r\n            return [value[0]];\r\n        }\r\n        case \"rg32uint\": {\r\n            const value = pixelValue(imageData, offset, \"32uint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg32sint\": {\r\n            const value = pixelValue(imageData, offset, \"32sint\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rg32float\": {\r\n            const value = pixelValue(imageData, offset, \"32float\", 2);\r\n            return [value[0], value[1]];\r\n        }\r\n        case \"rgba32uint\": {\r\n            const value = pixelValue(imageData, offset, \"32uint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba32sint\": {\r\n            const value = pixelValue(imageData, offset, \"32sint\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        case \"rgba32float\": {\r\n            const value = pixelValue(imageData, offset, \"32float\", 4);\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n\r\n        case \"rg11b10ufloat\": {\r\n            const uintValue = new Uint32Array(imageData.buffer, offset, 1)[0];\r\n            const ri = uintValue & 0x7FF;\r\n            const gi = (uintValue & 0x3FF800) >> 11;\r\n            const bi = (uintValue & 0xFFC00000) >> 22;\r\n            const rf = float11ToFloat32(ri);\r\n            const gf = float11ToFloat32(gi);\r\n            const bf = float10ToFloat32(bi);\r\n            return [rf, gf, bf, 1.0];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction pixelValue(imageData: Uint8Array, offset: number, format: string, numChannels: number) {\r\n    const value = [0, 0, 0, 0];\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      switch (format) {\r\n        case \"8unorm\":\r\n          value[i] = imageData[offset] / 255;\r\n          offset++;\r\n          break;\r\n        case \"8snorm\":\r\n          value[i] = (imageData[offset] / 255) * 2 - 1;\r\n          offset++;\r\n          break;\r\n        case \"8uint\":\r\n          value[i] = imageData[offset];\r\n          offset++;\r\n          break;\r\n        case \"8sint\":\r\n          value[i] = imageData[offset] - 127;\r\n          offset++;\r\n          break;\r\n        case \"16uint\":\r\n          value[i] = imageData[offset] | (imageData[offset + 1] << 8);\r\n          offset += 2;\r\n          break;\r\n        case \"16sint\":\r\n          value[i] = (imageData[offset] | (imageData[offset + 1] << 8)) - 32768;\r\n          offset += 2;\r\n          break;\r\n        case \"16float\":\r\n          value[i] = float16ToFloat32(imageData[offset] | (imageData[offset + 1] << 8));\r\n          offset += 2;\r\n          break;\r\n        case \"32uint\":\r\n          value[i] = imageData[offset] | (imageData[offset + 1] << 8) | (imageData[offset + 2] << 16) | (imageData[offset + 3] << 24);\r\n          offset += 4;\r\n          break;\r\n        case \"32sint\":\r\n          value[i] = (imageData[offset] | (imageData[offset + 1] << 8) | (imageData[offset + 2] << 16) | (imageData[offset + 3] << 24)) | 0;\r\n          offset += 4;\r\n          break;\r\n        case \"32float\":\r\n          value[i] = new Float32Array(imageData.buffer, offset, 1)[0];\r\n          offset += 4;\r\n          break;\r\n      }\r\n    }\r\n    return value;\r\n}\r\n\r\nfunction setPixelValue(imageData: Uint8Array, offset: number, format: string, numChannels: number, value: number[]) {\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      switch (format) {\r\n        case \"8unorm\":\r\n          imageData[offset] = value[i] * 255;\r\n          offset++;\r\n          break;\r\n        case \"8snorm\":\r\n          imageData[offset] = ((value[i] + 1.0) * 0.5) * 255;\r\n          offset++;\r\n          break;\r\n        case \"8uint\":\r\n          imageData[offset] = value[i];\r\n          offset++;\r\n          break;\r\n        case \"8sint\":\r\n          imageData[offset] = value[i] + 127;\r\n          offset++;\r\n          break;\r\n        case \"16uint\":\r\n          new Uint16Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 2;\r\n          break;\r\n        case \"16sint\":\r\n          new Int16Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 2;\r\n          break;\r\n        case \"16float\": {\r\n          const f16 = float32ToFloat16(value[i]);\r\n          new Uint16Array(imageData.buffer, offset, 1)[0] = f16;\r\n          offset += 2;\r\n          break;\r\n        }\r\n        case \"32uint\":\r\n          new Uint32Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 4;\r\n          break;\r\n        case \"32sint\":\r\n          new Int32Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 4;\r\n          break;\r\n        case \"32float\":\r\n          new Float32Array(imageData.buffer, offset, 1)[0] = value[i];\r\n          offset += 4;\r\n          break;\r\n      }\r\n    }\r\n    return value;\r\n}\r\n","\r\nexport const TextureFormatInfo = {\r\n    \"r8unorm\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r8snorm\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r8uint\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r8sint\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"rg8unorm\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg8snorm\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg8uint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg8sint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n\r\n    \"rgba8unorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8unorm-srgb\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8snorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba8sint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"bgra8unorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"bgra8unorm-srgb\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    \"r16uint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r16sint\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r16float\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n\r\n    \"rg16uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg16sint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg16float\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n\r\n    \"rgba16uint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba16sint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba16float\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    \"r32uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r32sint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n    \"r32float\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 1 },\r\n\r\n    \"rg32uint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg32sint\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n    \"rg32float\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 2 },\r\n\r\n    \"rgba32uint\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba32sint\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgba32float\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgb10a2uint\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rgb10a2unorm\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n    \"rg11b10ufloat\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    // Depth Stencil Formats\r\n    \"stencil8\": { \"bytesPerBlock\": 1, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": false, \"hasStencil\": true, \"channels\": 1 }, // bytesPerBlock is actually 1-4\r\n    \"depth16unorm\": { \"bytesPerBlock\": 2, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": false, \"channels\": 1 },\r\n    \"depth24plus\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": false, \"depthOnlyFormat\": \"depth32float\", \"channels\": 1 },\r\n    \"depth24plus-stencil8\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": true, \"depthOnlyFormat\": \"depth32float\", \"channels\": 1 }, // bytesPerBlock is actually 4-8\r\n    \"depth32float\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": false, \"channels\": 1 },\r\n    \"depth32float-stencil8\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"isDepthStencil\": true, \"hasDepth\": true, \"hasStencil\": true, \"stencilOnlyFormat\": \"depth32float\", \"channels\": 1 }, // bytesPerBlock is actually 5-8\r\n\r\n    // Packed Formats\r\n    \"rgb9e5ufloat\": { \"bytesPerBlock\": 4, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": false, \"channels\": 4 },\r\n\r\n    // Compressed Formats\r\n    \"bc1-rgba-unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc1-rgba-unorm-srgb\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc2-rgba-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc2-rgba-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc3-rgba-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc3-rgba-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n\r\n    \"bc4-r-unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 1 },\r\n    \"bc4-r-snorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 1 },\r\n\r\n    \"bc5-rg-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 2 },\r\n    \"bc5-rg-snorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 2 },\r\n\r\n    \"bc6h-rgb-ufloat\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc6h-rgb-float\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc7-rgba-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"bc7-rgba-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \r\n    \"etc2-rgb8unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgb8unorm-srgb\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgb8a1unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgb8a1unorm-srgb\": { \"bytesPerBlock\": 8, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgba8unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"etc2-rgba8unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \r\n    \"eac-r11unorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 1 },\r\n    \"eac-r11snorm\": { \"bytesPerBlock\": 8, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 1 },\r\n\r\n    \"eac-rg11unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 2 },\r\n    \"eac-rg11snorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 1, \"blockHeight\": 1, \"isCompressed\": true, \"channels\": 2 },\r\n\r\n    \"astc-4x4-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-4x4-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 4, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x4-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x4-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 4, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-5x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 5, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x6-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-6x6-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 6, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x6-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x6-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x8-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-8x8-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 8, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x5-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x5-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 5, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x6-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x6-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 6, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x8-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x8-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 8, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x10-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-10x10-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 10, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x10-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x10-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 10, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x12-unorm\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 12, \"isCompressed\": true, \"channels\": 4 },\r\n    \"astc-12x12-unorm-srgb\": { \"bytesPerBlock\": 16, \"blockWidth\": 12, \"blockHeight\": 12, \"isCompressed\": true, \"channels\": 4 },\r\n};\r\n","import { WgslExec } from \"./wgsl_exec.js\";\r\nimport { TypeInfo, PointerInfo, TemplateInfo, ArrayInfo, StructInfo } from \"./reflect/info.js\";\r\nimport { ExecContext } from \"./exec/exec_context.js\";\r\nimport { ExecInterface } from \"./exec/exec_interface.js\";\r\nimport { setTexturePixel, getTexturePixel } from \"./utils/texture_sample.js\";\r\nimport { TextureFormatInfo } from \"./utils/texture_format_info.js\";\r\n\r\n/**\r\n * @class Node\r\n * @category AST\r\n * Base class for AST nodes parsed from a WGSL shader.\r\n */\r\nexport class Node {\r\n  static _id = 0;\r\n\r\n  id: number;\r\n  line: number;\r\n\r\n  constructor() {\r\n    this.id = Node._id++;\r\n    this.line = 0;\r\n  }\r\n\r\n  get isAstNode(): boolean {\r\n    return true;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n  }\r\n\r\n  searchBlock(block: Node[] | null, callback: (node: Node) => void): void {\r\n    if (block) {\r\n      callback(_BlockStart.instance);\r\n      for (const node of block) {\r\n        if (node instanceof Array) {\r\n          this.searchBlock(node as Node[], callback);\r\n        } else {\r\n          node.search(callback);\r\n        }\r\n      }\r\n      callback(_BlockEnd.instance);\r\n    }\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    throw new Error(\"Cannot evaluate node\");\r\n  }\r\n\r\n  constEvaluateString(context: WgslExec): string {\r\n    return this.constEvaluate(context).toString();\r\n  } \r\n}\r\n\r\n// For internal use only\r\nexport class _BlockStart extends Node {\r\n  static instance = new _BlockStart();\r\n}\r\n\r\n // For internal use only\r\nexport class _BlockEnd extends Node {\r\n  static instance = new _BlockEnd();\r\n}\r\n\r\nconst BuiltinFunctionNames = new Set([\r\n  \"all\",\r\n  \"all\",\r\n  \"any\",\r\n  \"select\",\r\n  \"arrayLength\",\r\n  \"abs\",\r\n  \"acos\",\r\n  \"acosh\",\r\n  \"asin\",\r\n  \"asinh\",\r\n  \"atan\",\r\n  \"atanh\",\r\n  \"atan2\",\r\n  \"ceil\",\r\n  \"clamp\",\r\n  \"cos\",\r\n  \"cosh\",\r\n  \"countLeadingZeros\",\r\n  \"countOneBits\",\r\n  \"countTrailingZeros\",\r\n  \"cross\",\r\n  \"degrees\",\r\n  \"determinant\",\r\n  \"distance\",\r\n  \"dot\",\r\n  \"dot4U8Packed\",\r\n  \"dot4I8Packed\",\r\n  \"exp\",\r\n  \"exp2\",\r\n  \"extractBits\",\r\n  \"faceForward\",\r\n  \"firstLeadingBit\",\r\n  \"firstTrailingBit\",\r\n  \"floor\",\r\n  \"fma\",\r\n  \"fract\",\r\n  \"frexp\",\r\n  \"insertBits\",\r\n  \"inverseSqrt\",\r\n  \"ldexp\",\r\n  \"length\",\r\n  \"log\",\r\n  \"log2\",\r\n  \"max\",\r\n  \"min\",\r\n  \"mix\",\r\n  \"modf\",\r\n  \"normalize\",\r\n  \"pow\",\r\n  \"quantizeToF16\",\r\n  \"radians\",\r\n  \"reflect\",\r\n  \"refract\",\r\n  \"reverseBits\",\r\n  \"round\",\r\n  \"saturate\",\r\n  \"sign\",\r\n  \"sin\",\r\n  \"sinh\",\r\n  \"smoothStep\",\r\n  \"sqrt\",\r\n  \"step\",\r\n  \"tan\",\r\n  \"tanh\",\r\n  \"transpose\",\r\n  \"trunc\",\r\n  \"dpdx\",\r\n  \"dpdxCoarse\",\r\n  \"dpdxFine\",\r\n  \"dpdy\",\r\n  \"dpdyCoarse\",\r\n  \"dpdyFine\",\r\n  \"fwidth\",\r\n  \"fwidthCoarse\",\r\n  \"fwidthFine\",\r\n  \"textureDimensions\",\r\n  \"textureGather\",\r\n  \"textureGatherCompare\",\r\n  \"textureLoad\",\r\n  \"textureNumLayers\",\r\n  \"textureNumLevels\",\r\n  \"textureNumSamples\",\r\n  \"textureSample\",\r\n  \"textureSampleBias\",\r\n  \"textureSampleCompare\",\r\n  \"textureSampleCompareLevel\",\r\n  \"textureSampleGrad\",\r\n  \"textureSampleLevel\",\r\n  \"textureSampleBaseClampToEdge\",\r\n  \"textureStore\",\r\n  \"atomicLoad\",\r\n  \"atomicStore\",\r\n  \"atomicAdd\",\r\n  \"atomicSub\",\r\n  \"atomicMax\",\r\n  \"atomicMin\",\r\n  \"atomicAnd\",\r\n  \"atomicOr\",\r\n  \"atomicXor\",\r\n  \"atomicExchange\",\r\n  \"atomicCompareExchangeWeak\",\r\n  \"pack4x8snorm\",\r\n  \"pack4x8unorm\",\r\n  \"pack4xI8\",\r\n  \"pack4xU8\",\r\n  \"pack4x8Clamp\",\r\n  \"pack4xU8Clamp\",\r\n  \"pack2x16snorm\",\r\n  \"pack2x16unorm\",\r\n  \"pack2x16float\",\r\n  \"unpack4x8snorm\",\r\n  \"unpack4x8unorm\",\r\n  \"unpack4xI8\",\r\n  \"unpack4xU8\",\r\n  \"unpack2x16snorm\",\r\n  \"unpack2x16unorm\",\r\n  \"unpack2x16float\",\r\n  \"storageBarrier\",\r\n  \"textureBarrier\",\r\n  \"workgroupBarrier\",\r\n  \"workgroupUniformLoad\",\r\n  \"subgroupAdd\",\r\n  \"subgroupExclusiveAdd\",\r\n  \"subgroupInclusiveAdd\",\r\n  \"subgroupAll\",\r\n  \"subgroupAnd\",\r\n  \"subgroupAny\",\r\n  \"subgroupBallot\",\r\n  \"subgroupBroadcast\",\r\n  \"subgroupBroadcastFirst\",\r\n  \"subgroupElect\",\r\n  \"subgroupMax\",\r\n  \"subgroupMin\",\r\n  \"subgroupMul\",\r\n  \"subgroupExclusiveMul\",\r\n  \"subgroupInclusiveMul\",\r\n  \"subgroupOr\",\r\n  \"subgroupShuffle\",\r\n  \"subgroupShuffleDown\",\r\n  \"subgroupShuffleUp\",\r\n  \"subgroupShuffleXor\",\r\n  \"subgroupXor\",\r\n  \"quadBroadcast\",\r\n  \"quadSwapDiagonal\",\r\n  \"quadSwapX\",\r\n  \"quadSwapY\",\r\n]);\r\n\r\n/**\r\n * @class Statement\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Statement extends Node {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class Function\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Function extends Statement {\r\n  name: string;\r\n  args: Argument[];\r\n  returnType: Type | null;\r\n  body: Statement[];\r\n  attributes: Attribute[] | null;\r\n  startLine: number;\r\n  endLine: number;\r\n  calls: Set<Function> = new Set();\r\n\r\n  constructor(\r\n    name: string,\r\n    args: Argument[],\r\n    returnType: Type | null,\r\n    body: Statement[],\r\n    startLine: number,\r\n    endLine: number\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n    this.returnType = returnType;\r\n    this.body = body;\r\n    this.startLine = startLine;\r\n    this.endLine = endLine;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"function\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    if (this.attributes) {\r\n      for (const attr of this.attributes) {\r\n        callback(attr);\r\n      }\r\n    }\r\n    callback(this);\r\n    for (const arg of this.args) {\r\n      callback(arg);\r\n    }\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class StaticAssert\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class StaticAssert extends Statement {\r\n  expression: Expression;\r\n\r\n  constructor(expression: Expression) {\r\n    super();\r\n    this.expression = expression;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"staticAssert\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.expression.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class While\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class While extends Statement {\r\n  condition: Expression;\r\n  body: Statement[];\r\n\r\n  constructor(condition: Expression, body: Statement[]) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"while\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Continuing\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Continuing extends Statement {\r\n  body: Statement[];\r\n  loopId: number;\r\n\r\n  constructor(body: Statement[], loopId: number) {\r\n    super();\r\n    this.body = body;\r\n    this.loopId = loopId;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"continuing\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class For\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class For extends Statement {\r\n  init: Statement | null;\r\n  condition: Expression | null;\r\n  increment: Statement | null;\r\n  body: Statement[];\r\n\r\n  constructor(\r\n    init: Statement | null,\r\n    condition: Expression | null,\r\n    increment: Statement | null,\r\n    body: Statement[]\r\n  ) {\r\n    super();\r\n    this.init = init;\r\n    this.condition = condition;\r\n    this.increment = increment;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"for\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.init?.search(callback);\r\n    this.condition?.search(callback);\r\n    this.increment?.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Var\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Var extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression | null;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"var\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Override\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Override extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  value: Expression | null;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(name: string, type: Type | null, value: Expression | null) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"override\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Let\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Let extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression | null;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"let\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Const\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Const extends Statement {\r\n  name: string;\r\n  type: Type | null;\r\n  storage: string | null;\r\n  access: string | null;\r\n  value: Expression;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    storage: string | null,\r\n    access: string | null,\r\n    value: Expression\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.storage = storage;\r\n    this.access = access;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"const\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return this.value.constEvaluate(context, type);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\nexport enum IncrementOperator {\r\n  increment = \"++\",\r\n  decrement = \"--\",\r\n}\r\n\r\nexport namespace IncrementOperator {\r\n  export function parse(val: string): IncrementOperator {\r\n    const key = val as keyof typeof IncrementOperator;\r\n    if (key == \"parse\") throw new Error(\"Invalid value for IncrementOperator\");\r\n    return IncrementOperator[key];\r\n  }\r\n}\r\n\r\n/**\r\n * @class Increment\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Increment extends Statement {\r\n  operator: IncrementOperator;\r\n  variable: Expression;\r\n\r\n  constructor(operator: IncrementOperator, variable: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.variable = variable;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"increment\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.variable.search(callback);\r\n  }\r\n}\r\n\r\nexport enum AssignOperator {\r\n  assign = \"=\",\r\n  addAssign = \"+=\",\r\n  subtractAssin = \"-=\",\r\n  multiplyAssign = \"*=\",\r\n  divideAssign = \"/=\",\r\n  moduloAssign = \"%=\",\r\n  andAssign = \"&=\",\r\n  orAssign = \"|=\",\r\n  xorAssign = \"^=\",\r\n  shiftLeftAssign = \"<<=\",\r\n  shiftRightAssign = \">>=\",\r\n}\r\n\r\nexport namespace AssignOperator {\r\n  export function parse(val: string): AssignOperator {\r\n    const key = val as keyof typeof AssignOperator;\r\n    if (key == \"parse\") {\r\n      throw new Error(\"Invalid value for AssignOperator\");\r\n    }\r\n    //return AssignOperator[key];\r\n    return key as AssignOperator;\r\n  }\r\n}\r\n\r\n/**\r\n * @class Assign\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Assign extends Statement {\r\n  operator: AssignOperator;\r\n  variable: Expression;\r\n  value: Expression;\r\n\r\n  constructor(\r\n    operator: AssignOperator,\r\n    variable: Expression,\r\n    value: Expression\r\n  ) {\r\n    super();\r\n    this.operator = operator;\r\n    this.variable = variable;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"assign\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.variable.search(callback);\r\n    this.value.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Call\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Call extends Statement {\r\n  name: string;\r\n  args: Expression[];\r\n\r\n  constructor(name: string, args: Expression[]) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"call\";\r\n  }\r\n\r\n  isBuiltin(): boolean {\r\n    return BuiltinFunctionNames.has(this.name);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    for (const node of this.args) {\r\n      node.search(callback);\r\n    }\r\n    callback(this);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Loop\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Loop extends Statement {\r\n  body: Statement[];\r\n  continuing: Continuing | null;\r\n\r\n  constructor(body: Statement[], continuing: Continuing | null) {\r\n    super();\r\n    this.body = body;\r\n    this.continuing = continuing;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"loop\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Switch\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Switch extends Statement {\r\n  condition: Expression;\r\n  cases: SwitchCase[];\r\n\r\n  constructor(condition: Expression, cases: SwitchCase[]) {\r\n    super();\r\n    this.condition = condition;\r\n    this.cases = cases;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"switch\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    for (const node of this.cases) {\r\n      node.search(callback);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @class If\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class If extends Statement {\r\n  condition: Expression;\r\n  body: Statement[];\r\n  elseif: ElseIf[] | null;\r\n  else: Statement[] | null;\r\n\r\n  constructor(\r\n    condition: Expression,\r\n    body: Statement[],\r\n    elseif: ElseIf[] | null,\r\n    _else: Statement[] | null\r\n  ) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.elseif = elseif;\r\n    this.else = _else;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"if\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n    this.searchBlock(this.elseif, callback);\r\n    this.searchBlock(this.else, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Return\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Return extends Statement {\r\n  value: Expression;\r\n\r\n  constructor(value: Expression) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"return\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value?.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Enable\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Enable extends Statement {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"enable\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Requires\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Requires extends Statement {\r\n  extensions: string[];\r\n\r\n  constructor(extensions: string[]) {\r\n    super();\r\n    this.extensions = extensions;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"requires\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Diagnostic\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Diagnostic extends Statement {\r\n  severity: string;\r\n  rule: string;\r\n\r\n  constructor(severity: string, rule: string) {\r\n    super();\r\n    this.severity = severity;\r\n    this.rule = rule;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"diagnostic\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Alias\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Alias extends Statement {\r\n  name: string;\r\n  type: Type;\r\n\r\n  constructor(name: string, type: Type) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"alias\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Discard\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Discard extends Statement {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"discard\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Break\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Break extends Statement {\r\n  condition: Expression | null = null;\r\n  loopId: number = -1;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"break\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Continue\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Continue extends Statement {\r\n  loopId: number = -1;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"continue\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Type\r\n * @extends Statement\r\n * @category AST\r\n */\r\nexport class Type extends Statement {\r\n  name: string;\r\n  attributes: Attribute[] | null = null;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"type\";\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return false;\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return false;\r\n  }\r\n\r\n  static x32 = new Type(\"x32\");\r\n  static f32 = new Type(\"f32\");\r\n  static i32 = new Type(\"i32\");\r\n  static u32 = new Type(\"u32\");\r\n  static f16 = new Type(\"f16\");\r\n  static bool = new Type(\"bool\");\r\n  static void = new Type(\"void\");\r\n\r\n  static _priority = new Map<string, number>([[\"f32\", 0], [\"f16\", 1], [\"u32\", 2], [\"i32\", 3], [\"x32\", 3]]);\r\n\r\n  static maxFormatType(x: Type[]): Type {\r\n    let t = x[0];\r\n    if (t.name === \"f32\") {\r\n      return t;\r\n    }\r\n    for (let i = 1; i < x.length; ++i) {\r\n      const tv = Type._priority.get(t.name);\r\n      const xv = Type._priority.get(x[i].name);\r\n      if (xv < tv) {\r\n        t = x[i];\r\n      }\r\n    }\r\n\r\n    if (t.name === \"x32\") {\r\n      return Type.i32;\r\n    }\r\n\r\n    return t;\r\n  }\r\n\r\n  getTypeName(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n/**\r\n * @class ForwardType\r\n * @extends Type\r\n * @category AST\r\n * Internal type used as a placeholder for a type being used before it has been defined.\r\n */\r\nexport class ForwardType extends Type {\r\n  constructor(name: string) {\r\n    super(name);\r\n  }\r\n}\r\n\r\n/**\r\n * @class StructType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class Struct extends Type {\r\n  members: Member[];\r\n  startLine: number;\r\n  endLine: number;\r\n\r\n  constructor(name: string, members: Member[], startLine: number, endLine: number) {\r\n    super(name);\r\n    this.members = members;\r\n    this.startLine = startLine;\r\n    this.endLine = endLine;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"struct\";\r\n  }\r\n\r\n  get isStruct(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /// Return the index of the member with the given name, or -1 if not found.\r\n  getMemberIndex(name: string): number {\r\n    for (let i = 0; i < this.members.length; i++) {\r\n      if (this.members[i].name == name) return i;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    for (const member of this.members) {\r\n      callback(member);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @class TemplateType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class TemplateType extends Type {\r\n  format: Type | null;\r\n  access: string | null;\r\n\r\n  constructor(name: string, format: Type | null, access: string | null) {\r\n    super(name);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"template\";\r\n  }\r\n\r\n  getTypeName(): string {\r\n    let name = this.name;\r\n    if (this.format !== null) {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\" ||\r\n          name === \"mat2x2\" || name === \"mat2x3\" || name === \"mat2x4\" ||\r\n          name === \"mat3x2\" || name === \"mat3x3\" || name === \"mat3x4\" ||\r\n          name === \"mat4x2\" || name === \"mat4x3\" || name === \"mat4x4\") {\r\n        if (this.format.name === \"f32\") {\r\n          name += \"f\";\r\n          return name;\r\n        } else if (this.format.name === \"i32\") {\r\n          name += \"i\";\r\n          return name;\r\n        } else if (this.format.name === \"u32\") {\r\n          name += \"u\";\r\n          return name;\r\n        } else if (this.format.name === \"bool\") {\r\n          name += \"b\";\r\n          return name;\r\n        } else if (this.format.name === \"f16\") {\r\n          name += \"h\";\r\n          return name;\r\n        }\r\n      }\r\n      name += `<${this.format.name}>`;\r\n    } else {\r\n      if (name === \"vec2\" || name === \"vec3\" || name === \"vec4\") {\r\n        return name;\r\n      }\r\n      //console.error(\"Template format is null.\");\r\n    }\r\n    return name;\r\n  }\r\n\r\n  static vec2f = new TemplateType(\"vec2\", Type.f32, null);\r\n  static vec3f = new TemplateType(\"vec3\", Type.f32, null);\r\n  static vec4f = new TemplateType(\"vec4\", Type.f32, null);\r\n  static vec2i = new TemplateType(\"vec2\", Type.i32, null);\r\n  static vec3i = new TemplateType(\"vec3\", Type.i32, null);\r\n  static vec4i = new TemplateType(\"vec4\", Type.i32, null);\r\n  static vec2u = new TemplateType(\"vec2\", Type.u32, null);\r\n  static vec3u = new TemplateType(\"vec3\", Type.u32, null);\r\n  static vec4u = new TemplateType(\"vec4\", Type.u32, null);\r\n  static vec2h = new TemplateType(\"vec2\", Type.f16, null);\r\n  static vec3h = new TemplateType(\"vec3\", Type.f16, null);\r\n  static vec4h = new TemplateType(\"vec4\", Type.f16, null);\r\n  static vec2b = new TemplateType(\"vec2\", Type.bool, null);\r\n  static vec3b = new TemplateType(\"vec3\", Type.bool, null);\r\n  static vec4b = new TemplateType(\"vec4\", Type.bool, null);\r\n\r\n  static mat2x2f = new TemplateType(\"mat2x2\", Type.f32, null);\r\n  static mat2x3f = new TemplateType(\"mat2x3\", Type.f32, null);\r\n  static mat2x4f = new TemplateType(\"mat2x4\", Type.f32, null);\r\n  static mat3x2f = new TemplateType(\"mat3x2\", Type.f32, null);\r\n  static mat3x3f = new TemplateType(\"mat3x3\", Type.f32, null);\r\n  static mat3x4f = new TemplateType(\"mat3x4\", Type.f32, null);\r\n  static mat4x2f = new TemplateType(\"mat4x2\", Type.f32, null);\r\n  static mat4x3f = new TemplateType(\"mat4x3\", Type.f32, null);\r\n  static mat4x4f = new TemplateType(\"mat4x4\", Type.f32, null);\r\n\r\n  static mat2x2h = new TemplateType(\"mat2x2\", Type.f16, null);\r\n  static mat2x3h = new TemplateType(\"mat2x3\", Type.f16, null);\r\n  static mat2x4h = new TemplateType(\"mat2x4\", Type.f16, null);\r\n  static mat3x2h = new TemplateType(\"mat3x2\", Type.f16, null);\r\n  static mat3x3h = new TemplateType(\"mat3x3\", Type.f16, null);\r\n  static mat3x4h = new TemplateType(\"mat3x4\", Type.f16, null);\r\n  static mat4x2h = new TemplateType(\"mat4x2\", Type.f16, null);\r\n  static mat4x3h = new TemplateType(\"mat4x3\", Type.f16, null);\r\n  static mat4x4h = new TemplateType(\"mat4x4\", Type.f16, null);\r\n\r\n  static mat2x2i = new TemplateType(\"mat2x2\", Type.i32, null);\r\n  static mat2x3i = new TemplateType(\"mat2x3\", Type.i32, null);\r\n  static mat2x4i = new TemplateType(\"mat2x4\", Type.i32, null);\r\n  static mat3x2i = new TemplateType(\"mat3x2\", Type.i32, null);\r\n  static mat3x3i = new TemplateType(\"mat3x3\", Type.i32, null);\r\n  static mat3x4i = new TemplateType(\"mat3x4\", Type.i32, null);\r\n  static mat4x2i = new TemplateType(\"mat4x2\", Type.i32, null);\r\n  static mat4x3i = new TemplateType(\"mat4x3\", Type.i32, null);\r\n  static mat4x4i = new TemplateType(\"mat4x4\", Type.i32, null);\r\n\r\n  static mat2x2u = new TemplateType(\"mat2x2\", Type.u32, null);\r\n  static mat2x3u = new TemplateType(\"mat2x3\", Type.u32, null);\r\n  static mat2x4u = new TemplateType(\"mat2x4\", Type.u32, null);\r\n  static mat3x2u = new TemplateType(\"mat3x2\", Type.u32, null);\r\n  static mat3x3u = new TemplateType(\"mat3x3\", Type.u32, null);\r\n  static mat3x4u = new TemplateType(\"mat3x4\", Type.u32, null);\r\n  static mat4x2u = new TemplateType(\"mat4x2\", Type.u32, null);\r\n  static mat4x3u = new TemplateType(\"mat4x3\", Type.u32, null);\r\n  static mat4x4u = new TemplateType(\"mat4x4\", Type.u32, null);\r\n}\r\n\r\n/**\r\n * @class PointerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class PointerType extends Type {\r\n  storage: string;\r\n  type: Type | null;\r\n  access: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    storage: string,\r\n    type: Type | null,\r\n    access: string | null\r\n  ) {\r\n    super(name);\r\n    this.storage = storage;\r\n    this.type = type;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"pointer\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class ArrayType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class ArrayType extends Type {\r\n  attributes: Attribute[] | null;\r\n  format: Type | null;\r\n  count: number;\r\n\r\n  constructor(\r\n    name: string,\r\n    attributes: Attribute[] | null,\r\n    format: Type | null,\r\n    count: number\r\n  ) {\r\n    super(name);\r\n    this.attributes = attributes;\r\n    this.format = format;\r\n    this.count = count;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"array\";\r\n  }\r\n\r\n  get isArray(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @class SamplerType\r\n * @extends Type\r\n * @category AST\r\n */\r\nexport class SamplerType extends Type {\r\n  format: Type | string | null;\r\n  access: string | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    format: Type | string | null,\r\n    access: string | null\r\n  ) {\r\n    super(name);\r\n    this.format = format;\r\n    this.access = access;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"sampler\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Expression\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Expression extends Node {\r\n  postfix: Expression | null = null;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class StringExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class StringExpr extends Expression {\r\n  value: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"stringExpr\";\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value;\r\n  }\r\n\r\n  constEvaluateString(): string {\r\n    return this.value;\r\n  }\r\n}\r\n\r\n/**\r\n * @class CreateExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class CreateExpr extends Expression {\r\n  type: Type | null;\r\n  args: Expression[] | null;\r\n\r\n  constructor(type: Type | null, args: Expression[] | null) {\r\n    super();\r\n    this.type = type;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"createExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    if (this.args) {\r\n      for (const node of this.args) {\r\n        node.search(callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    if (type) {\r\n      type[0] = this.type;\r\n    }\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n}\r\n\r\n/**\r\n * @class CallExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class CallExpr extends Expression {\r\n  name: string;\r\n  args: Expression[] | null;\r\n  cachedReturnValue: any = null;\r\n\r\n  constructor(name: string, args: Expression[] | null) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"callExpr\";\r\n  }\r\n\r\n  setCachedReturnValue(value: any): void {\r\n    this.cachedReturnValue = value;\r\n  }\r\n\r\n  get isBuiltin(): boolean {\r\n    return BuiltinFunctionNames.has(this.name);\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    for (const node of this.args) {\r\n      node.search(callback);\r\n    }\r\n    callback(this);\r\n  }\r\n}\r\n\r\n/**\r\n * @class VariableExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class VariableExpr extends Expression {\r\n  name: string;\r\n\r\n  constructor(name: string) {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"varExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void) {\r\n    callback(this);\r\n    if (this.postfix) {\r\n      this.postfix.search(callback);\r\n    }\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n}\r\n\r\n/**\r\n * @class ConstExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class ConstExpr extends Expression {\r\n  name: string;\r\n  initializer: Expression;\r\n\r\n  constructor(name: string, initializer: Expression) {\r\n    super();\r\n    this.name = name;\r\n    this.initializer = initializer;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"constExpr\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    if (this.initializer) {\r\n      const data = context.evalExpression(this.initializer, context.context);\r\n      if (data !== null && this.postfix) {\r\n        return data.getSubData(context, this.postfix, context.context);\r\n      }\r\n      return data;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.initializer.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class LiteralExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class LiteralExpr extends Expression {\r\n  value: Data\r\n  type: Type;\r\n\r\n  constructor(value: Data, type: Type) {\r\n    super();\r\n    this.value = value;\r\n    this.type = type;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"literalExpr\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    if (type !== undefined) {\r\n      type[0] = this.type;\r\n    }\r\n    return this.value;\r\n  }\r\n\r\n  get isScalar(): boolean {\r\n    return this.value instanceof ScalarData;\r\n  }\r\n\r\n  get isVector(): boolean {\r\n    return this.value instanceof VectorData || this.value instanceof MatrixData;\r\n  }\r\n\r\n  get scalarValue(): number {\r\n    if (this.value instanceof ScalarData) {\r\n      return this.value.value;\r\n    }\r\n    console.error(\"Value is not scalar.\");\r\n    return 0.0;\r\n  }\r\n\r\n  get vectorValue(): Float32Array | Int32Array | Uint32Array {\r\n    if (this.value instanceof VectorData) {\r\n      return this.value.data;\r\n    }\r\n    if (this.value instanceof MatrixData) {\r\n      return this.value.data;\r\n    }\r\n    console.error(\"Value is not a vector or matrix.\");\r\n    return new Float32Array(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @class BitcastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class BitcastExpr extends Expression {\r\n  type: Type | null;\r\n  value: Expression;\r\n\r\n  constructor(type: Type | null, value: Expression) {\r\n    super();\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"bitcastExpr\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.value.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class TypecastExpr\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class TypecastExpr extends Expression {\r\n  type: Type | null;\r\n  args: Expression[] | null;\r\n\r\n  constructor(type: Type | null, args: Expression[] | null) {\r\n    super();\r\n    this.type = type;\r\n    this.args = args;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"typecastExpr\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.args, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class ArrayIndex\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class ArrayIndex extends Expression {\r\n  index: Expression;\r\n  constructor(index: Expression) {\r\n    super();\r\n    this.index = index;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.index.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Operator\r\n * @extends Expression\r\n * @category AST\r\n */\r\nexport class Operator extends Expression {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * @class UnaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, !, ~\r\n */\r\nexport class UnaryOperator extends Operator {\r\n  operator: string;\r\n  right: Expression;\r\n\r\n  constructor(operator: string, right: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.right = right;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"unaryOp\";\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.right.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class BinaryOperator\r\n * @extends Operator\r\n * @category AST\r\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\r\n */\r\nexport class BinaryOperator extends Operator {\r\n  operator: string;\r\n  left: Expression;\r\n  right: Expression;\r\n\r\n  constructor(operator: string, left: Expression, right: Expression) {\r\n    super();\r\n    this.operator = operator;\r\n    this.left = left;\r\n    this.right = right;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"binaryOp\";\r\n  }\r\n\r\n  _getPromotedType(t1: Type, t2: Type): Type {\r\n    if (t1.name === t2.name) {\r\n      return t1;\r\n    }\r\n    if (t1.name === \"f32\" || t2.name === \"f32\") {\r\n      return Type.f32;\r\n    }\r\n    if (t1.name === \"u32\" || t2.name === \"u32\") {\r\n      return Type.u32;\r\n    }\r\n    return Type.i32;\r\n  }\r\n\r\n  constEvaluate(context: WgslExec, type?: Type[]): Data | null {\r\n    return context.evalExpression(this, context.context);\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.left.search(callback);\r\n    this.right.search(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class SwitchCase\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class SwitchCase extends Node {\r\n  body: Statement[];\r\n\r\n  constructor(body: Statement[]) {\r\n    super();\r\n    this.body = body;\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    callback(this);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\nexport class DefaultSelector extends Expression {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"default\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Case\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nexport class Case extends SwitchCase {\r\n  selectors: Expression[];\r\n\r\n  constructor(selectors: Expression[], body: Statement[]) {\r\n    super(body);\r\n    this.selectors = selectors;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"case\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Default\r\n * @extends SwitchCase\r\n * @category AST\r\n */\r\nexport class Default extends SwitchCase {\r\n  constructor(body: Statement[]) {\r\n    super(body);\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"default\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Argument\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Argument extends Node {\r\n  name: string;\r\n  type: Type;\r\n  attributes: Attribute[] | null;\r\n\r\n  constructor(name: string, type: Type, attributes: Attribute[] | null) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"argument\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class ElseIf\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class ElseIf extends Node {\r\n  condition: Expression;\r\n  body: Statement[];\r\n\r\n  constructor(condition: Expression, body: Statement[]) {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"elseif\";\r\n  }\r\n\r\n  search(callback: (node: Node) => void): void {\r\n    this.condition.search(callback);\r\n    this.searchBlock(this.body, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @class Member\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Member extends Node {\r\n  name: string;\r\n  type: Type | null;\r\n  attributes: Attribute[] | null;\r\n\r\n  constructor(\r\n    name: string,\r\n    type: Type | null,\r\n    attributes: Attribute[] | null\r\n  ) {\r\n    super();\r\n    this.name = name;\r\n    this.type = type;\r\n    this.attributes = attributes;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"member\";\r\n  }\r\n}\r\n\r\n/**\r\n * @class Attribute\r\n * @extends Node\r\n * @category AST\r\n */\r\nexport class Attribute extends Node {\r\n  name: string;\r\n  value: string | string[] | null;\r\n\r\n  constructor(name: string, value: string | string[] | null) {\r\n    super();\r\n    this.name = name;\r\n    this.value = value;\r\n  }\r\n\r\n  get astNodeType(): string {\r\n    return \"attribute\";\r\n  }\r\n}\r\n\r\n\r\n\r\nexport class Data {\r\n  static _id = 0;\r\n\r\n  typeInfo: TypeInfo;\r\n  parent: Data | null = null;\r\n  id: number;\r\n\r\n  constructor(typeInfo: TypeInfo, parent: Data | null) {\r\n      this.typeInfo = typeInfo;\r\n      this.parent = parent;\r\n      this.id = Data._id++;\r\n  }\r\n\r\n  clone(): Data {\r\n    throw `Clone: Not implemented for ${this.constructor.name}`;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n      console.error(`SetDataValue: Not implemented for ${this.constructor.name}`);\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n      console.error(`GetDataValue: Not implemented for ${this.constructor.name}`);\r\n      return null;\r\n  }\r\n\r\n  toString(): string {\r\n      return `<${this.typeInfo.getTypeName()}>`;\r\n  }\r\n}\r\n\r\nexport class VoidData extends Data {\r\n  constructor() {\r\n      super(new TypeInfo(\"void\", null), null);\r\n  }\r\n\r\n  static void = new VoidData();\r\n\r\n  toString(): string {\r\n      return \"void\";\r\n  }\r\n}\r\n\r\nexport class PointerData extends Data {\r\n  reference: Data;\r\n\r\n  constructor(reference: Data) {\r\n    super(new PointerInfo(\"pointer\", reference.typeInfo, null), null);\r\n    this.reference = reference;\r\n  }\r\n\r\n  clone(): Data {\r\n    return this;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    this.reference.setDataValue(exec, value, postfix, context);\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix) {\r\n      return this.reference.getSubData(exec, postfix, context);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return `&${this.reference.toString()}`;\r\n  }\r\n}\r\n\r\nexport class ScalarData extends Data {\r\n  data: Int32Array | Uint32Array | Float32Array;\r\n\r\n  constructor(value: number | Int32Array | Uint32Array | Float32Array, typeInfo: TypeInfo, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    if (value instanceof Int32Array || value instanceof Uint32Array || value instanceof Float32Array) {\r\n        this.data = value;\r\n    } else {\r\n      if (this.typeInfo.name === \"x32\") {\r\n        if (value - Math.floor(value) !== 0) {\r\n          this.data = new Float32Array([value]);\r\n        } else if (value >= 0) {\r\n            this.data = new Uint32Array([value]);\r\n        } else {\r\n            this.data = new Int32Array([value]);\r\n        } \r\n      } else if (this.typeInfo.name === \"i32\" || this.typeInfo.name === \"bool\") {\r\n          this.data = new Int32Array([value]);\r\n      } else if (this.typeInfo.name === \"u32\") {\r\n          this.data = new Uint32Array([value]);\r\n      } else if (this.typeInfo.name === \"f32\" || this.typeInfo.name === \"f16\") {\r\n          this.data = new Float32Array([value]);\r\n      } else {\r\n          console.error(`ScalarData2: Invalid type`, typeInfo);\r\n      }\r\n    }\r\n  }\r\n\r\n  clone(): Data {\r\n    if (this.data instanceof Float32Array) {\r\n        return new ScalarData(new Float32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Int32Array) {\r\n        return new ScalarData(new Int32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Uint32Array) {\r\n        return new ScalarData(new Uint32Array(this.data), this.typeInfo, null);\r\n    }\r\n    throw `ScalarData: Invalid data type`;\r\n  }\r\n\r\n  get value(): number {\r\n    return this.data[0];\r\n  }\r\n\r\n  set value(v: number) {\r\n    this.data[0] = v;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (postfix) {\r\n      console.error(`SetDataValue: Scalar data does not support postfix`, postfix);\r\n      return;\r\n    }\r\n\r\n    if (!(value instanceof ScalarData)) {\r\n      console.error(`SetDataValue: Invalid value`, value);\r\n      return;\r\n    }\r\n\r\n    let v = value.data[0];\r\n\r\n    if (this.typeInfo.name === \"i32\" || this.typeInfo.name === \"u32\") {\r\n      v = Math.floor(v);\r\n    } else if (this.typeInfo.name === \"bool\") {\r\n      v = v ? 1 : 0;\r\n    }\r\n\r\n    this.data[0] = v;\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix) {\r\n      console.error(`getSubData: Scalar data does not support postfix`, postfix);\r\n      return null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toString(): string {\r\n    return `${this.value}`;\r\n  }\r\n}\r\n\r\nfunction _getVectorData(exec: ExecInterface, values: number[], formatName: string): VectorData | null {\r\n  const size = values.length;\r\n  if (size === 2) {\r\n      if (formatName === \"f32\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec2f\")!);\r\n      } else if (formatName === \"i32\" || formatName === \"bool\") {\r\n          return new VectorData(new Int32Array(values), exec.getTypeInfo(\"vec2i\")!);\r\n      } else if (formatName === \"u32\") {\r\n          return new VectorData(new Uint32Array(values), exec.getTypeInfo(\"vec2u\")!);\r\n      } else if (formatName === \"f16\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec2h\")!);\r\n      } else {\r\n          console.error(`getSubData: Unknown format ${formatName}`);\r\n      }\r\n      return null;\r\n  }\r\n\r\n  if (size === 3) {\r\n      if (formatName === \"f32\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec3f\")!);\r\n      } else if (formatName === \"i32\" || formatName === \"bool\") {\r\n          return new VectorData(new Int32Array(values), exec.getTypeInfo(\"vec3i\")!);\r\n      } else if (formatName === \"u32\") {\r\n          return new VectorData(new Uint32Array(values), exec.getTypeInfo(\"vec3u\")!);\r\n      } else if (formatName === \"f16\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec3h\")!);\r\n      } else {\r\n          console.error(`getSubData: Unknown format ${formatName}`);\r\n      }\r\n      return null;\r\n  }\r\n\r\n  if (size === 4) {\r\n      if (formatName === \"f32\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec4f\")!);\r\n      } else if (formatName === \"i32\" || formatName === \"bool\") {\r\n          return new VectorData(new Int32Array(values), exec.getTypeInfo(\"vec4i\")!);\r\n      } else if (formatName === \"u32\") {\r\n          return new VectorData(new Uint32Array(values), exec.getTypeInfo(\"vec4u\")!);\r\n      } else if (formatName === \"f16\") {\r\n          return new VectorData(new Float32Array(values), exec.getTypeInfo(\"vec4h\")!);\r\n      }\r\n      console.error(`getSubData: Unknown format ${formatName}`);\r\n      return null;\r\n  }\r\n\r\n  console.error(`getSubData: Invalid vector size ${values.length}`);\r\n  return null;\r\n}\r\n\r\nexport class VectorData extends Data {\r\n  data: Int32Array | Uint32Array | Float32Array;\r\n\r\n  constructor(value: number[] | Float32Array | Uint32Array | Int32Array, typeInfo: TypeInfo, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    if (value instanceof Float32Array || value instanceof Uint32Array || value instanceof Int32Array) {\r\n      this.data = value;\r\n    } else {\r\n      const typename = this.typeInfo.name;\r\n      if (typename === \"vec2f\" || typename === \"vec3f\" || typename === \"vec4f\") {\r\n        this.data = new Float32Array(value);\r\n      } else if (typename === \"vec2i\" || typename === \"vec3i\" || typename === \"vec4i\") {\r\n        this.data = new Int32Array(value);\r\n      } else if (typename === \"vec2u\" || typename === \"vec3u\" || typename === \"vec4u\") {\r\n        this.data = new Uint32Array(value);\r\n      } else if (typename === \"vec2h\" || typename === \"vec3h\" || typename === \"vec4h\") {\r\n        this.data = new Float32Array(value);\r\n      } else if (typename === \"vec2b\" || typename === \"vec3b\" || typename === \"vec4b\") {\r\n        this.data = new Int32Array(value);\r\n      } else if (typename === \"vec2\" || typename === \"vec3\" || typename === \"vec4\") {\r\n        this.data = new Float32Array(value);\r\n      } else {\r\n        console.error(`VectorData: Invalid type ${typename}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  clone(): Data {\r\n    if (this.data instanceof Float32Array) {\r\n      return new VectorData(new Float32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Int32Array) {\r\n      return new VectorData(new Int32Array(this.data), this.typeInfo, null);\r\n    } else if (this.data instanceof Uint32Array) {\r\n      return new VectorData(new Uint32Array(this.data), this.typeInfo, null);\r\n    }\r\n    throw `VectorData: Invalid data type`;\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (postfix instanceof StringExpr) {\r\n      console.error(\"TODO: Set vector postfix\");\r\n      return;\r\n    }\r\n\r\n    if (!(value instanceof VectorData)) {\r\n      console.error(`SetDataValue: Invalid value`, value);\r\n      return\r\n    }\r\n\r\n    this.data = value.data;\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix === null) {\r\n      return this;\r\n    }\r\n\r\n    let format = exec.getTypeInfo(\"f32\");\r\n    if (this.typeInfo instanceof TemplateInfo) {\r\n        format = this.typeInfo.format || format;\r\n    } else {\r\n        const typeName = this.typeInfo.name;\r\n        if (typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\") {\r\n          format = exec.getTypeInfo(\"f32\");\r\n        } else if (typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\") {\r\n          format = exec.getTypeInfo(\"i32\");\r\n        } else if (typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\") {\r\n          format = exec.getTypeInfo(\"bool\");\r\n        } else if (typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\") {\r\n          format = exec.getTypeInfo(\"u32\");\r\n        } else if ( typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\") {\r\n          format = exec.getTypeInfo(\"f16\");\r\n        } else {\r\n          console.error(`GetSubData: Unknown type ${typeName}`);\r\n        }\r\n    }\r\n\r\n    let self: VectorData | null = this;\r\n    while (postfix !== null && self !== null) {\r\n      if (postfix instanceof ArrayIndex) {\r\n        const idx = postfix.index;\r\n        let i = -1;\r\n        if (idx instanceof LiteralExpr) {\r\n          if (idx.value instanceof ScalarData) {\r\n            i = idx.value.value;\r\n          } else {\r\n            console.error(`GetSubData: Invalid array index ${idx.value}`);\r\n            return null;\r\n          }\r\n        } else {\r\n          const d = exec.evalExpression(idx, context);\r\n          if (d instanceof ScalarData) {\r\n            i = d.value;\r\n          } else {\r\n            console.error(`GetSubData: Unknown index type`, idx);\r\n            return null;\r\n          }\r\n        }\r\n        if (i < 0 || i >= self.data.length) {\r\n          console.error(`GetSubData: Index out of range`, i);\r\n          return null;\r\n        }\r\n\r\n        if (self.data instanceof Float32Array) {\r\n          const d = new Float32Array(self.data.buffer, self.data.byteOffset + i * 4, 1);\r\n          return new ScalarData(d, format!);\r\n        } else if (self.data instanceof Int32Array) {\r\n          const d = new Int32Array(self.data.buffer, self.data.byteOffset + i * 4, 1);\r\n          return new ScalarData(d, format!);\r\n        } else if (self.data instanceof Uint32Array) {\r\n          const d = new Uint32Array(self.data.buffer, self.data.byteOffset + i * 4, 1);\r\n          return new ScalarData(d, format!);\r\n        }\r\n\r\n        throw `GetSubData: Invalid data type`;\r\n      } else if (postfix instanceof StringExpr) {\r\n        const member = postfix.value.toLowerCase();\r\n        if (member.length === 1) {\r\n          let i = 0;\r\n          if (member === \"x\" || member === \"r\") {\r\n            i = 0;\r\n          } else if (member === \"y\" || member === \"g\") {\r\n            i = 1;\r\n          } else if (member === \"z\" || member === \"b\") {\r\n            i = 2;\r\n          } else if (member === \"w\" || member === \"a\") {\r\n            i = 3;\r\n          } else {\r\n            console.error(`GetSubData: Unknown member ${member}`);\r\n            return null;\r\n          }\r\n\r\n          if (this.data instanceof Float32Array) {\r\n            let d = new Float32Array(this.data.buffer, this.data.byteOffset + i * 4, 1);\r\n            return new ScalarData(d, format!, this);\r\n          } else if (this.data instanceof Int32Array) {\r\n            let d = new Int32Array(this.data.buffer, this.data.byteOffset + i * 4, 1);\r\n            return new ScalarData(d, format!, this);\r\n          } else if (this.data instanceof Uint32Array) {\r\n            let d = new Uint32Array(this.data.buffer, this.data.byteOffset + i * 4, 1);\r\n            return new ScalarData(d, format!, this);\r\n          }\r\n        }\r\n\r\n        const values: number[] = [];\r\n        for (const m of member) {\r\n          if (m === \"x\" || m === \"r\") {\r\n            values.push(this.data[0]);\r\n          } else if (m === \"y\" || m === \"g\") {\r\n            values.push(this.data[1]);\r\n          } else if (m === \"z\" || m === \"b\") {\r\n            values.push(this.data[2]);\r\n          } else if (m === \"w\" || m === \"a\") {\r\n            values.push(this.data[3]);\r\n          } else {\r\n            console.error(`GetDataValue: Unknown member ${m}`);\r\n          }\r\n        }\r\n\r\n        self = _getVectorData(exec, values, format.name);\r\n      } else {\r\n        console.error(`GetSubData: Unknown postfix`, postfix);\r\n        return null;\r\n      }\r\n\r\n      postfix = postfix.postfix;\r\n    }\r\n\r\n    return self;\r\n  }\r\n\r\n  toString(): string {\r\n    let s = `${this.data[0]}`;\r\n    for (let i = 1; i < this.data.length; ++i) {\r\n      s += `, ${this.data[i]}`;\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\nexport class MatrixData extends Data {\r\n  data: Float32Array;\r\n\r\n  constructor(value: number[] | Float32Array, typeInfo: TypeInfo, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    if (value instanceof Float32Array) {\r\n      this.data = value;\r\n    } else {\r\n      this.data = new Float32Array(value);\r\n    }\r\n  }\r\n\r\n  clone(): Data {\r\n    return new MatrixData(new Float32Array(this.data), this.typeInfo, null);\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (postfix instanceof StringExpr) {\r\n      console.error(\"TODO: Set matrix postfix\");\r\n      return;\r\n    }\r\n\r\n    if (!(value instanceof MatrixData)) {\r\n      console.error(`SetDataValue: Invalid value`, value);\r\n      return\r\n    }\r\n\r\n    this.data = value.data;\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix === null) {\r\n      return this;\r\n    }\r\n\r\n    const typeName = this.typeInfo.name;\r\n    let format = exec.getTypeInfo(\"f32\");\r\n    if (this.typeInfo instanceof TemplateInfo) {\r\n      format = this.typeInfo.format;\r\n    } else {\r\n      if (typeName.endsWith(\"f\")) {\r\n        format = exec.getTypeInfo(\"f32\");\r\n      } else if (typeName.endsWith(\"i\")) {\r\n        format = exec.getTypeInfo(\"i32\");\r\n      } else if (typeName.endsWith(\"u\")) {\r\n        format = exec.getTypeInfo(\"u32\");\r\n      } else if ( typeName.endsWith(\"h\")) {\r\n        format = exec.getTypeInfo(\"f16\");\r\n      } else {\r\n        console.error(`GetDataValue: Unknown type ${typeName}`);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (postfix instanceof ArrayIndex) {\r\n      const idx = postfix.index;\r\n      let i = -1;\r\n      if (idx instanceof LiteralExpr) {\r\n        if (idx.value instanceof ScalarData) {\r\n          i = idx.value.value;\r\n        } else {\r\n          console.error(`GetDataValue: Invalid array index ${idx.value}`);\r\n          return null;\r\n        }\r\n      } else {\r\n        const d = exec.evalExpression(idx, context);\r\n        if (d instanceof ScalarData) {\r\n          i = d.value;\r\n        } else {\r\n          console.error(`GetDataValue: Unknown index type`, idx);\r\n          return null;\r\n        }\r\n      }\r\n      if (i < 0 || i >= this.data.length) {\r\n        console.error(`GetDataValue: Index out of range`, i);\r\n        return null;\r\n      }\r\n\r\n      const formatSuffix = typeName.endsWith(\"h\") ? \"h\" : \"f\";\r\n\r\n      let vectorData: VectorData;\r\n      if (typeName === \"mat2x2\" || typeName === \"mat2x2f\" || typeName === \"mat2x2h\" ||\r\n          typeName === \"mat3x2\" || typeName === \"mat3x2f\" || typeName === \"mat3x2h\" ||\r\n          typeName === \"mat4x2\" || typeName === \"mat4x2f\" || typeName === \"mat4x2h\") {\r\n        vectorData = new VectorData(new Float32Array(this.data.buffer, this.data.byteOffset + i * 2 * 4, 2), exec.getTypeInfo(`vec2${formatSuffix}`)!);\r\n      } else if (typeName === \"mat2x3\" || typeName === \"mat2x3f\" || typeName === \"mat2x3h\" ||\r\n                typeName === \"mat3x3\" || typeName === \"mat3x3f\" || typeName === \"mat3x3h\" ||\r\n                typeName === \"mat4x3\" || typeName === \"mat4x3f\" || typeName === \"mat4x3h\") {\r\n        vectorData = new VectorData(new Float32Array(this.data.buffer, this.data.byteOffset + i * 3 * 4, 3), exec.getTypeInfo(`vec3${formatSuffix}`)!);\r\n      } else if (typeName === \"mat2x4\" || typeName === \"mat2x4f\" || typeName === \"mat2x4h\" ||\r\n                typeName === \"mat3x4\" || typeName === \"mat3x4f\" || typeName === \"mat3x4h\" ||\r\n                typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n        vectorData = new VectorData(new Float32Array(this.data.buffer, this.data.byteOffset + i * 4 * 4, 4), exec.getTypeInfo(`vec4${formatSuffix}`)!);\r\n      } else {\r\n        console.error(`GetDataValue: Unknown type ${typeName}`);\r\n        return null;\r\n      }\r\n\r\n      if (postfix.postfix) {\r\n        return vectorData.getSubData(exec, postfix.postfix, context);\r\n      }\r\n\r\n      return vectorData;\r\n    } else {\r\n      console.error(`GetDataValue: Invalid postfix`, postfix);\r\n      return null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toString(): string {\r\n    let s = `${this.data[0]}`;\r\n    for (let i = 1; i < this.data.length; ++i) {\r\n      s += `, ${this.data[i]}`;\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\n// Used to store array and struct data\r\nexport class TypedData extends Data {\r\n  buffer: ArrayBuffer;\r\n  offset: number;\r\n\r\n  constructor(data: ArrayBuffer | Float32Array | Uint32Array | Int32Array | Uint8Array | Int8Array,\r\n      typeInfo: TypeInfo, offset: number = 0, parent: Data | null = null) {\r\n    super(typeInfo, parent);\r\n    this.buffer = data instanceof ArrayBuffer ? data : data.buffer;\r\n    this.offset = offset;\r\n  }\r\n\r\n  clone(): Data {\r\n    const cloned = new Uint8Array(new Uint8Array(this.buffer, this.offset, this.typeInfo.size));\r\n    return new TypedData(cloned.buffer, this.typeInfo, 0, null);\r\n  }\r\n\r\n  setDataValue(exec: ExecInterface, value: Data, postfix: Expression | null, context: ExecContext): void {\r\n    if (value === null) {\r\n      console.log(`setDataValue: NULL data.`);\r\n      return;\r\n    }\r\n\r\n    let offset = this.offset;\r\n    let typeInfo = this.typeInfo;\r\n    while (postfix) {\r\n      if (postfix instanceof ArrayIndex) {\r\n        if (typeInfo instanceof ArrayInfo) {\r\n          const idx = postfix.index;\r\n          if (idx instanceof LiteralExpr) {\r\n            if (idx.value instanceof ScalarData) {\r\n              offset += idx.value.value * typeInfo.stride;\r\n            } else {\r\n              console.error(`SetDataValue: Invalid index type ${idx.value}`);\r\n              return;\r\n            }\r\n          } else {\r\n            const i = exec.evalExpression(idx, context);\r\n            if (i instanceof ScalarData) {\r\n              offset += i.value * typeInfo.stride;\r\n            } else {\r\n              console.error(`SetDataValue: Unknown index type`, idx);\r\n              return;\r\n            }\r\n          }\r\n          typeInfo = typeInfo.format;\r\n        } else {\r\n          console.error(`SetDataValue: Type ${typeInfo.getTypeName()} is not an array`);\r\n        }\r\n      } else if (postfix instanceof StringExpr) {\r\n        const member = postfix.value;\r\n        if (typeInfo instanceof StructInfo) {\r\n          let found = false;\r\n          for (const m of typeInfo.members) {\r\n            if (m.name === member) {\r\n              offset += m.offset;\r\n              typeInfo = m.type;\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            console.error(`SetDataValue: Member ${member} not found`);\r\n            return;\r\n          }\r\n        } else if (typeInfo instanceof TypeInfo) {\r\n          const typeName = typeInfo.getTypeName();\r\n          let element = 0;\r\n          if (member === \"x\" || member === \"r\") {\r\n            element = 0;\r\n          } else if (member === \"y\" || member === \"g\") {\r\n            element = 1;\r\n          } else if (member === \"z\" || member === \"b\") {\r\n            element = 2;\r\n          } else if (member === \"w\" || member === \"a\") {\r\n            element = 3;\r\n          } else {\r\n            console.error(`SetDataValue: Unknown member ${member}`);\r\n            return;\r\n          }\r\n          if (!(value instanceof ScalarData)) {\r\n            console.error(`SetDataValue: Invalid value`, value);\r\n            return;\r\n          }\r\n          const v = value.value;\r\n          if (typeName === \"vec2f\") {\r\n            new Float32Array(this.buffer, offset, 2)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec3f\") {\r\n            new Float32Array(this.buffer, offset, 3)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec4f\") {\r\n            new Float32Array(this.buffer, offset, 4)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec2i\") {\r\n            new Int32Array(this.buffer, offset, 2)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec3i\") {\r\n            new Int32Array(this.buffer, offset, 3)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec4i\") {\r\n            new Int32Array(this.buffer, offset, 4)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec2u\") {\r\n            new Uint32Array(this.buffer, offset, 2)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec3u\") {\r\n            new Uint32Array(this.buffer, offset, 3)[element] = v;\r\n            return;\r\n          } else if (typeName === \"vec4u\") {\r\n            new Uint32Array(this.buffer, offset, 4)[element] = v;\r\n            return;\r\n          }\r\n          console.error(`SetDataValue: Type ${typeName} is not a struct`);\r\n          return;\r\n        }\r\n      } else {\r\n        console.error(`SetDataValue: Unknown postfix type`, postfix);\r\n        return;\r\n      }\r\n      postfix = postfix.postfix;\r\n    }\r\n\r\n    this.setData(exec, value, typeInfo, offset, context);\r\n  }\r\n\r\n  setData(exec: ExecInterface, value: Data, typeInfo: TypeInfo, offset: number, context: ExecContext): void {\r\n    const typeName = typeInfo.getTypeName();\r\n\r\n    if (typeName === \"f32\" || typeName === \"f16\") {\r\n      if (value instanceof ScalarData) {\r\n        new Float32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"i32\" || typeName === \"atomic<i32>\" || typeName === \"x32\") {\r\n      if (value instanceof ScalarData) {\r\n        new Int32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"u32\" || typeName === \"atomic<u32>\") {\r\n      if (value instanceof ScalarData) {\r\n        new Uint32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"bool\") {\r\n      if (value instanceof ScalarData) {\r\n        new Int32Array(this.buffer, offset, 1)[0] = value.value;\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2f\" || typeName === \"vec2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3f\" || typeName === \"vec3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4f\" || typeName === \"vec4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2i\") {\r\n      const x = new Int32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3i\") {\r\n      const x = new Int32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4i\") {\r\n      const x = new Int32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2u\") {\r\n      const x = new Uint32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3u\") {\r\n      const x = new Uint32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4u\") {\r\n      const x = new Uint32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec2b\") {\r\n      const x = new Uint32Array(this.buffer, offset, 2);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec3b\") {\r\n      const x = new Uint32Array(this.buffer, offset, 3);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n      }\r\n      return;\r\n    } else if (typeName === \"vec4b\") {\r\n      const x = new Uint32Array(this.buffer, offset, 4);\r\n      if (value instanceof VectorData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat2x2f\" || typeName === \"mat2x2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 4);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat2x3f\" || typeName === \"mat2x3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 6);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat2x4f\" || typeName === \"mat2x4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 8);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat3x2f\" || typeName === \"mat3x2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 6);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat3x3f\" || typeName === \"mat3x3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 9);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat3x4f\" || typeName === \"mat3x4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 12);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n        x[9] = value.data[9];\r\n        x[10] = value.data[10];\r\n        x[11] = value.data[11];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n        x[9] = value[9];\r\n        x[10] = value[10];\r\n        x[11] = value[11];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat4x2f\" || typeName === \"mat4x2h\") {\r\n      const x = new Float32Array(this.buffer, offset, 8);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat4x3f\" || typeName === \"mat4x3h\") {\r\n      const x = new Float32Array(this.buffer, offset, 12);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n        x[9] = value.data[9];\r\n        x[10] = value.data[10];\r\n        x[11] = value.data[11];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n        x[9] = value[9];\r\n        x[10] = value[10];\r\n        x[11] = value[11];\r\n      }\r\n      return;\r\n    } else if (typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n      const x = new Float32Array(this.buffer, offset, 16);\r\n      if (value instanceof MatrixData) {\r\n        x[0] = value.data[0];\r\n        x[1] = value.data[1];\r\n        x[2] = value.data[2];\r\n        x[3] = value.data[3];\r\n        x[4] = value.data[4];\r\n        x[5] = value.data[5];\r\n        x[6] = value.data[6];\r\n        x[7] = value.data[7];\r\n        x[8] = value.data[8];\r\n        x[9] = value.data[9];\r\n        x[10] = value.data[10];\r\n        x[11] = value.data[11];\r\n        x[12] = value.data[12];\r\n        x[13] = value.data[13];\r\n        x[14] = value.data[14];\r\n        x[15] = value.data[15];\r\n      } else {\r\n        x[0] = value[0];\r\n        x[1] = value[1];\r\n        x[2] = value[2];\r\n        x[3] = value[3];\r\n        x[4] = value[4];\r\n        x[5] = value[5];\r\n        x[6] = value[6];\r\n        x[7] = value[7];\r\n        x[8] = value[8];\r\n        x[9] = value[9];\r\n        x[10] = value[10];\r\n        x[11] = value[11];\r\n        x[12] = value[12];\r\n        x[13] = value[13];\r\n        x[14] = value[14];\r\n        x[15] = value[15];\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (value instanceof TypedData) {\r\n      if (typeInfo === value.typeInfo) {\r\n        const x = new Uint8Array(this.buffer, offset, value.buffer.byteLength);\r\n        x.set(new Uint8Array(value.buffer));\r\n        return;\r\n      } else {\r\n        console.error(`SetDataValue: Type mismatch`, typeName, value.typeInfo.getTypeName());\r\n        return;\r\n      }\r\n    }\r\n\r\n    console.error(`SetData: Unknown type ${typeName}`);\r\n  }\r\n\r\n  getSubData(exec: ExecInterface, postfix: Expression | null, context: ExecContext): Data | null {\r\n    if (postfix === null) {\r\n      return this;\r\n    }\r\n\r\n    let offset = this.offset;\r\n    let typeInfo = this.typeInfo;\r\n    while (postfix) {\r\n      if (postfix instanceof ArrayIndex) {\r\n        const idx = postfix.index;\r\n        const _i = idx instanceof Expression ? exec.evalExpression(idx, context) : idx;\r\n        let i = 0;\r\n        if (_i instanceof ScalarData) {\r\n          i = _i.value;\r\n        } else if (typeof _i === \"number\") {\r\n          i = _i;\r\n        } else {\r\n          console.error(`GetDataValue: Invalid index type`, idx);\r\n        }\r\n        if (typeInfo instanceof ArrayInfo) {\r\n          offset += i * typeInfo.stride;\r\n          typeInfo = typeInfo.format;\r\n        } else {\r\n          const typeName = typeInfo.getTypeName();\r\n          if (typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n            offset += i * 16;\r\n            typeInfo = exec.getTypeInfo(\"vec4f\")!;\r\n          } else {\r\n            console.error(`getDataValue: Type ${typeInfo.getTypeName()} is not an array`);\r\n          }\r\n        }\r\n      } else if (postfix instanceof StringExpr) {\r\n        const member = postfix.value;\r\n        if (typeInfo instanceof StructInfo) {\r\n          let found = false;\r\n          for (const m of typeInfo.members) {\r\n            if (m.name === member) {\r\n              offset += m.offset;\r\n              typeInfo = m.type;\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            console.error(`GetDataValue: Member ${member} not found`);\r\n            return null;\r\n          }\r\n        } else if (typeInfo instanceof TypeInfo) {\r\n          const typeName = typeInfo.getTypeName();\r\n          if (typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n              typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n              typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\" ||\r\n              typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\" ||\r\n              typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n              typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\") {\r\n\r\n            if (member.length > 0 && member.length < 5) {\r\n              let formatName = \"f32\";\r\n              let formatSuffix = \"f\";\r\n              const value: number[] = [];\r\n              for (let i = 0; i < member.length; ++i) {\r\n                const m = member[i].toLowerCase();\r\n                let element = 0;\r\n                if (m === \"x\" || m === \"r\") {\r\n                  element = 0;\r\n                } else if (m === \"y\" || m === \"g\") {\r\n                  element = 1;\r\n                } else if (m === \"z\" || m === \"b\") {\r\n                  element = 2;\r\n                } else if (m === \"w\" || m === \"a\") {\r\n                  element = 3;\r\n                } else {\r\n                  console.error(`Unknown member ${member}`);\r\n                  return null;\r\n                }\r\n\r\n                if (member.length === 1) {\r\n                  if (typeName.endsWith(\"f\")) {\r\n                    if (this.buffer.byteLength < (offset + element * 4 + 4)) {\r\n                      console.log(\"Insufficient buffer data\");\r\n                      return null;\r\n                    }\r\n                    return new ScalarData(new Float32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"f32\")!, this);\r\n                  } else if (typeName.endsWith(\"h\")) {\r\n                    return new ScalarData(new Float32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"f16\")!, this);\r\n                  } else if (typeName.endsWith(\"i\")) {\r\n                    return new ScalarData(new Int32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"i32\")!, this);\r\n                  } else if (typeName.endsWith(\"b\")) {\r\n                    return new ScalarData(new Int32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"bool\")!, this);\r\n                  } else if (typeName.endsWith(\"u\")) {\r\n                    return new ScalarData(new Uint32Array(this.buffer, offset + element * 4, 1), exec.getTypeInfo(\"i32\")!, this);\r\n                  }\r\n                }\r\n\r\n                if (typeName === \"vec2f\") {\r\n                  value.push(new Float32Array(this.buffer, offset, 2)[element]);\r\n                } else if (typeName === \"vec3f\") {\r\n                  if ((offset + 12) >= this.buffer.byteLength) {\r\n                    console.log(\"Insufficient buffer data\");\r\n                    return null;\r\n                  }\r\n                  const fa = new Float32Array(this.buffer, offset, 3);\r\n                  value.push(fa[element]);\r\n                } else if (typeName === \"vec4f\") {\r\n                  value.push(new Float32Array(this.buffer, offset, 4)[element]);\r\n                } else if (typeName === \"vec2i\") {\r\n                  formatName = \"i32\";\r\n                  formatSuffix = \"i\";\r\n                  value.push(new Int32Array(this.buffer, offset, 2)[element]);\r\n                } else if (typeName === \"vec3i\") {\r\n                  formatName = \"i32\";\r\n                  formatSuffix = \"i\";\r\n                  value.push(new Int32Array(this.buffer, offset, 3)[element]);\r\n                } else if (typeName === \"vec4i\") {\r\n                  formatName = \"i32\";\r\n                  formatSuffix = \"i\";\r\n                  value.push(new Int32Array(this.buffer, offset, 4)[element]);\r\n                } else if (typeName === \"vec2u\") {\r\n                  formatName = \"u32\";\r\n                  formatSuffix = \"u\";\r\n                  const ua = new Uint32Array(this.buffer, offset, 2);\r\n                  value.push(ua[element]);\r\n                } else if (typeName === \"vec3u\") {\r\n                  formatName = \"u32\";\r\n                  formatSuffix = \"u\";\r\n                  value.push(new Uint32Array(this.buffer, offset, 3)[element]);\r\n                } else if (typeName === \"vec4u\") {\r\n                  formatName = \"u32\";\r\n                  formatSuffix = \"u\";\r\n                  value.push(new Uint32Array(this.buffer, offset, 4)[element]);\r\n                }\r\n              }\r\n\r\n              if (value.length === 2) {\r\n                typeInfo = exec.getTypeInfo(`vec2${formatSuffix}`)!;\r\n              } else if (value.length === 3) {\r\n                typeInfo = exec.getTypeInfo(`vec3${formatSuffix}`)!;\r\n              } else if (value.length === 4) {\r\n                typeInfo = exec.getTypeInfo(`vec4${formatSuffix}`)!;\r\n              } else {\r\n                console.error(`GetDataValue: Invalid vector length ${value.length}`);\r\n              }\r\n\r\n              return new VectorData(value, typeInfo, null);\r\n            } else {\r\n              console.error(`GetDataValue: Unknown member ${member}`);\r\n              return null;\r\n            }\r\n          }\r\n\r\n          console.error(`GetDataValue: Type ${typeName} is not a struct`);\r\n          return null;\r\n        }\r\n      } else {\r\n        console.error(`GetDataValue: Unknown postfix type`, postfix);\r\n        return null;\r\n      }\r\n\r\n      postfix = postfix.postfix;\r\n    }\r\n\r\n    const typeName = typeInfo.getTypeName();\r\n\r\n    if (typeName === \"f32\") {\r\n      return new ScalarData(new Float32Array(this.buffer, offset, 1), typeInfo, this);\r\n    } else if (typeName === \"i32\") {\r\n      return new ScalarData(new Int32Array(this.buffer, offset, 1), typeInfo, this);\r\n    } else if (typeName === \"u32\") {\r\n      return new ScalarData(new Uint32Array(this.buffer, offset, 1), typeInfo, this);\r\n    } else if (typeName === \"vec2f\") {\r\n      return new VectorData(new Float32Array(this.buffer, offset, 2), typeInfo, this);\r\n    } else if (typeName === \"vec3f\") {\r\n      return new VectorData(new Float32Array(this.buffer, offset, 3), typeInfo, this);\r\n    } else if (typeName === \"vec4f\") {\r\n      return new VectorData(new Float32Array(this.buffer, offset, 4), typeInfo, this);\r\n    } else if (typeName === \"vec2i\") {\r\n      return new VectorData(new Int32Array(this.buffer, offset, 2), typeInfo, this);\r\n    } else if (typeName === \"vec3i\") {\r\n      return new VectorData(new Int32Array(this.buffer, offset, 3), typeInfo, this);\r\n    } else if (typeName === \"vec4i\") {\r\n      return new VectorData(new Int32Array(this.buffer, offset, 4), typeInfo, this);\r\n    } else if (typeName === \"vec2u\") {\r\n      return new VectorData(new Uint32Array(this.buffer, offset, 2), typeInfo, this);\r\n    } else if (typeName === \"vec3u\") {\r\n      return new VectorData(new Uint32Array(this.buffer, offset, 3), typeInfo, this);\r\n    } else if (typeName === \"vec4u\") {\r\n      return new VectorData(new Uint32Array(this.buffer, offset, 4), typeInfo, this);\r\n    }\r\n\r\n    if (typeInfo instanceof TemplateInfo && typeInfo.name === \"atomic\") {\r\n      if (typeInfo.format?.name === \"u32\") {\r\n        return new ScalarData(new Uint32Array(this.buffer, offset, 1)[0], typeInfo.format, this);\r\n      } else if (typeInfo.format?.name === \"i32\") {\r\n        return new ScalarData(new Int32Array(this.buffer, offset, 1)[0], typeInfo.format, this);\r\n      } else {\r\n        console.error(`GetDataValue: Invalid atomic format ${typeInfo.format?.name}`);\r\n        return null;\r\n      }\r\n    }\r\n\r\n    return new TypedData(this.buffer, typeInfo, offset, this);\r\n  }\r\n\r\n  toString(): string {\r\n    let s = \"\";\r\n    if (this.typeInfo instanceof ArrayInfo) {\r\n      if (this.typeInfo.format.name === \"f32\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}`;\r\n        for (let i = 1; i < fa.length; ++i) {\r\n          s += `, ${fa[i]}`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"i32\") {\r\n        const fa = new Int32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}`;\r\n        for (let i = 1; i < fa.length; ++i) {\r\n          s += `, ${fa[i]}`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"u32\") {\r\n        const fa = new Uint32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}`;\r\n        for (let i = 1; i < fa.length; ++i) {\r\n          s += `, ${fa[i]}`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"vec2f\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}, ${fa[1]}]`;\r\n        for (let i = 1; i < fa.length / 2; ++i) {\r\n          s += `, [${fa[i * 2]}, ${fa[i * 2 + 1]}]`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"vec3f\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}, ${fa[1]}, ${fa[2]}]`;\r\n        for (let i = 4; i < fa.length; i += 4) {\r\n          s += `, [${fa[i]}, ${fa[i + 1]}, ${fa[i + 2]}]`;\r\n        }\r\n      } else if (this.typeInfo.format.name === \"vec4f\") {\r\n        const fa = new Float32Array(this.buffer, this.offset);\r\n        s = `[${fa[0]}, ${fa[1]}, ${fa[2]}, ${fa[3]}]`;\r\n        for (let i = 4; i < fa.length; i += 4) {\r\n          s += `, [${fa[i]}, ${fa[i + 1]}, ${fa[i + 2]}, ${fa[i + 3]}]`;\r\n        }\r\n      } else {\r\n        s = `[...]`;\r\n      }\r\n    } else if (this.typeInfo instanceof StructInfo) {\r\n      s += `{...}`;\r\n    } else {\r\n      s = `[...]`;\r\n    }\r\n    return s;\r\n  }\r\n}\r\n\r\nexport class TextureData extends Data {\r\n  data: Array<ArrayBuffer>;\r\n  descriptor: Object;\r\n  view: Object | null;\r\n\r\n  constructor(data: Array<ArrayBuffer | Float32Array | Uint32Array | Int32Array | Uint8Array | Int8Array>,\r\n      typeInfo: TypeInfo, descriptor: Object, view: Object | null) {\r\n      super(typeInfo, null);\r\n      this.data = data;\r\n      this.descriptor = descriptor;\r\n      this.view = view;\r\n  }\r\n\r\n  clone(): Data {\r\n    return new TextureData(this.data, this.typeInfo, this.descriptor, this.view);\r\n  }\r\n\r\n  get width(): number {\r\n    const size = this.descriptor[\"size\"];\r\n    if (size instanceof Array && size.length > 0) {\r\n      return size[0] ?? 0;\r\n    } else if (size instanceof Object) {\r\n      return size[\"width\"] ?? 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get height(): number {\r\n    const size = this.descriptor[\"size\"];\r\n    if (size instanceof Array && size.length > 1) {\r\n      return size[1] ?? 0;\r\n    } else if (size instanceof Object) {\r\n      return size[\"height\"] ?? 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get depthOrArrayLayers(): number {\r\n    const size = this.descriptor[\"size\"];\r\n    if (size instanceof Array && size.length > 2) {\r\n      return size[2] ?? 0;\r\n    } else if (size instanceof Object) {\r\n      return size[\"depthOrArrayLayers\"] ?? 0;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get format(): string {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"format\"] ?? \"rgba8unorm\";\r\n    }\r\n    return \"rgba8unorm\";\r\n  }\r\n\r\n  get sampleCount(): number {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"sampleCount\"] ?? 1;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  get mipLevelCount(): number {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"mipLevelCount\"] ?? 1;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  get dimension(): string {\r\n    if (this.descriptor) {\r\n      return this.descriptor[\"dimension\"] ?? \"2d\";\r\n    }\r\n    return \"2d\";\r\n  }\r\n\r\n  getMipLevelSize(level: number): number[] {\r\n    if (level >= this.mipLevelCount) {\r\n      return [0, 0, 0];\r\n    }\r\n\r\n    const size = [this.width, this.height, this.depthOrArrayLayers];\r\n    for (let i = 0; i < size.length; ++i) {\r\n      size[i] = Math.max(1, size[i] >> level);\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  get texelByteSize(): number {\r\n    const format = this.format;\r\n    const formatInfo = TextureFormatInfo[format];\r\n    if (!formatInfo) {\r\n      return 0;\r\n    }\r\n    if (formatInfo.isDepthStencil) {\r\n      return 4; // depth textures have r32float imageData\r\n    }\r\n    return formatInfo.bytesPerBlock;\r\n  }\r\n\r\n  get bytesPerRow(): number {\r\n    const width = this.width;\r\n    const texelByteSize = this.texelByteSize;\r\n    //return (width * texelByteSize + 255) & ~0xff; // bytesPerRow is aligned to a multiple of 256 bytes\r\n    return width * texelByteSize;\r\n  }\r\n\r\n  get isDepthStencil(): boolean {\r\n    const format = this.format;\r\n    const formatInfo = TextureFormatInfo[format];\r\n    if (!formatInfo) {\r\n      return false;\r\n    }\r\n    return formatInfo.isDepthStencil;\r\n  }\r\n\r\n  getGpuSize(): number {\r\n    const format = this.format;\r\n    const formatInfo = TextureFormatInfo[format];\r\n    const width = this.width;\r\n    if (!format || width <= 0 || !formatInfo) {\r\n      return -1;\r\n    }\r\n\r\n    const height = this.height;\r\n    const depthOrArrayLayers = this.depthOrArrayLayers;\r\n    const dimension = this.dimension;\r\n    const blockWidth = width / formatInfo.blockWidth;\r\n    const blockHeight = dimension === \"1d\" ? 1 : height / formatInfo.blockHeight;\r\n    const bytesPerBlock = formatInfo.bytesPerBlock;\r\n\r\n    return blockWidth * blockHeight * bytesPerBlock * depthOrArrayLayers;\r\n  }\r\n\r\n  getPixel(x: number, y: number, z: number = 0, mipLevel: number = 0): number[] | null {\r\n    const texelByteSize = this.texelByteSize;\r\n    const bytesPerRow = this.bytesPerRow;\r\n    const height = this.height;\r\n    const buffer = this.data[mipLevel];\r\n    const imageData = new Uint8Array(buffer);\r\n    return getTexturePixel(imageData, x, y, z, mipLevel, height, bytesPerRow, texelByteSize, this.format);\r\n  }\r\n\r\n  setPixel(x: number, y: number, z: number, mipLevel: number, value: number[]): void {\r\n    const texelByteSize = this.texelByteSize;\r\n    const bytesPerRow = this.bytesPerRow;\r\n    const height = this.height;\r\n    const buffer = this.data[mipLevel];\r\n    const imageData = new Uint8Array(buffer);\r\n    setTexturePixel(imageData, x, y, z, mipLevel, height, bytesPerRow, texelByteSize, this.format, value);\r\n  }\r\n}\r\n","export enum TokenClass {\r\n  token,\r\n  keyword,\r\n  reserved,\r\n}\r\n\r\nexport class TokenType {\r\n  name: string;\r\n  type: TokenClass;\r\n  rule: RegExp | string;\r\n\r\n  constructor(name: string, type: TokenClass, rule: RegExp | string) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.rule = rule;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n/// Catalog of defined token types, keywords, and reserved words.\r\nexport class TokenTypes {\r\n  static readonly none = new TokenType(\"\", TokenClass.reserved, \"\");\r\n  static readonly eof = new TokenType(\"EOF\", TokenClass.token, \"\");\r\n\r\n  static readonly reserved = {\r\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\r\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\r\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\r\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\r\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\r\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\r\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\r\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\r\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\r\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\r\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\r\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\r\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\r\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\r\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\r\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\r\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\r\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\r\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\r\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\r\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\r\n  };\r\n\r\n  static readonly keywords = {\r\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\r\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\r\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\r\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\r\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\r\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\r\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\r\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\r\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\r\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\r\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\r\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\r\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\r\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\r\n    sampler_comparison: new TokenType(\r\n      \"sampler_comparison\",\r\n      TokenClass.keyword,\r\n      \"sampler_comparison\"\r\n    ),\r\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\r\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\r\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\r\n    texture_2d_array: new TokenType(\r\n      \"texture_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_2d_array\"\r\n    ),\r\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\r\n    texture_cube: new TokenType(\r\n      \"texture_cube\",\r\n      TokenClass.keyword,\r\n      \"texture_cube\"\r\n    ),\r\n    texture_cube_array: new TokenType(\r\n      \"texture_cube_array\",\r\n      TokenClass.keyword,\r\n      \"texture_cube_array\"\r\n    ),\r\n    texture_multisampled_2d: new TokenType(\r\n      \"texture_multisampled_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_multisampled_2d\"\r\n    ),\r\n    texture_storage_1d: new TokenType(\r\n      \"texture_storage_1d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_1d\"\r\n    ),\r\n    texture_storage_2d: new TokenType(\r\n      \"texture_storage_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_2d\"\r\n    ),\r\n    texture_storage_2d_array: new TokenType(\r\n      \"texture_storage_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_2d_array\"\r\n    ),\r\n    texture_storage_3d: new TokenType(\r\n      \"texture_storage_3d\",\r\n      TokenClass.keyword,\r\n      \"texture_storage_3d\"\r\n    ),\r\n    texture_depth_2d: new TokenType(\r\n      \"texture_depth_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_2d\"\r\n    ),\r\n    texture_depth_2d_array: new TokenType(\r\n      \"texture_depth_2d_array\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_2d_array\"\r\n    ),\r\n    texture_depth_cube: new TokenType(\r\n      \"texture_depth_cube\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_cube\"\r\n    ),\r\n    texture_depth_cube_array: new TokenType(\r\n      \"texture_depth_cube_array\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_cube_array\"\r\n    ),\r\n    texture_depth_multisampled_2d: new TokenType(\r\n      \"texture_depth_multisampled_2d\",\r\n      TokenClass.keyword,\r\n      \"texture_depth_multisampled_2d\"\r\n    ),\r\n    texture_external: new TokenType(\r\n      \"texture_external\",\r\n      TokenClass.keyword,\r\n      \"texture_external\"\r\n    ),\r\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\r\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\r\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\r\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\r\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\r\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\r\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\r\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\r\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\r\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\r\n    diagnostic: new TokenType(\"diagnostic\", TokenClass.keyword, \"diagnostic\"),\r\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\r\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\r\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\r\n    fallthrough: new TokenType(\r\n      \"fallthrough\",\r\n      TokenClass.keyword,\r\n      \"fallthrough\"\r\n    ),\r\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\r\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\r\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\r\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\r\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\r\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\r\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\r\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\r\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\r\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\r\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\r\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\r\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\r\n    requires: new TokenType(\"requires\", TokenClass.keyword, \"requires\"),\r\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\r\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\r\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\r\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\r\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\r\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\r\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\r\n    override: new TokenType(\"override\", TokenClass.keyword, \"override\"),\r\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\r\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\r\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\r\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\r\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\r\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\r\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\r\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\r\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\r\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\r\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\r\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\r\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\r\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\r\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\r\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\r\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\r\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\r\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\r\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\r\n    rgba8unorm_srgb: new TokenType(\r\n      \"rgba8unorm_srgb\",\r\n      TokenClass.keyword,\r\n      \"rgba8unorm_srgb\"\r\n    ),\r\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\r\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\r\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\r\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\r\n    bgra8unorm_srgb: new TokenType(\r\n      \"bgra8unorm_srgb\",\r\n      TokenClass.keyword,\r\n      \"bgra8unorm_srgb\"\r\n    ),\r\n    rgb10a2unorm: new TokenType(\r\n      \"rgb10a2unorm\",\r\n      TokenClass.keyword,\r\n      \"rgb10a2unorm\"\r\n    ),\r\n    rg11b10float: new TokenType(\r\n      \"rg11b10float\",\r\n      TokenClass.keyword,\r\n      \"rg11b10float\"\r\n    ),\r\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\r\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\r\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\r\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\r\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\r\n    rgba16float: new TokenType(\r\n      \"rgba16float\",\r\n      TokenClass.keyword,\r\n      \"rgba16float\"\r\n    ),\r\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\r\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\r\n    rgba32float: new TokenType(\r\n      \"rgba32float\",\r\n      TokenClass.keyword,\r\n      \"rgba32float\"\r\n    ),\r\n    static_assert: new TokenType(\r\n      \"static_assert\",\r\n      TokenClass.keyword,\r\n      \"static_assert\"\r\n    ),\r\n\r\n    // WGSL grammar has a few keywords that have different token names than the strings they\r\n    // represent. Aliasing them here.\r\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\r\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\r\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\r\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\r\n  };\r\n\r\n  static readonly tokens = {\r\n    decimal_float_literal: new TokenType(\r\n      \"decimal_float_literal\",\r\n      TokenClass.token,\r\n      /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/\r\n    ),\r\n    hex_float_literal: new TokenType(\r\n      \"hex_float_literal\",\r\n      TokenClass.token,\r\n      /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+[fh]?))/\r\n    ),\r\n    int_literal: new TokenType(\r\n      \"int_literal\",\r\n      TokenClass.token,\r\n      /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/\r\n    ),\r\n    uint_literal: new TokenType(\r\n      \"uint_literal\",\r\n      TokenClass.token,\r\n      /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/\r\n    ),\r\n    name: new TokenType(\"name\", TokenClass.token,  /([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/u),\r\n    //name: new TokenType(\"name\", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),\r\n    ident: new TokenType(\"ident\", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),\r\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\r\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\r\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\r\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\r\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\r\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\r\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\r\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\r\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\r\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\r\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\r\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\r\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\r\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\r\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\r\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\r\n    greater_than_equal: new TokenType(\r\n      \"greater_than_equal\",\r\n      TokenClass.token,\r\n      \">=\"\r\n    ),\r\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\r\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\r\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\r\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\r\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\r\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\r\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\r\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\r\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\r\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\r\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\r\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\r\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\r\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\r\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\r\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\r\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\r\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\r\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\r\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\r\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\r\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\r\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\r\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\r\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\r\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\r\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\r\n    shift_right_equal: new TokenType(\r\n      \"shift_right_equal\",\r\n      TokenClass.token,\r\n      \">>=\"\r\n    ),\r\n    shift_left_equal: new TokenType(\r\n      \"shift_left_equal\",\r\n      TokenClass.token,\r\n      \"<<=\"\r\n    ),\r\n  };\r\n\r\n  static readonly simpleTokens = {\r\n    \"@\": this.tokens.attr,\r\n    \"{\": this.tokens.brace_left,\r\n    \"}\": this.tokens.brace_right,\r\n    \":\": this.tokens.colon,\r\n    \",\": this.tokens.comma,\r\n    \"(\": this.tokens.paren_left,\r\n    \")\": this.tokens.paren_right,\r\n    \";\": this.tokens.semicolon,\r\n  };\r\n\r\n  static readonly literalTokens = {\r\n    \"&\": this.tokens.and,\r\n    \"&&\": this.tokens.and_and,\r\n    \"->\": this.tokens.arrow ,\r\n    \"/\": this.tokens.forward_slash,\r\n    \"!\": this.tokens.bang,\r\n    \"[\": this.tokens.bracket_left,\r\n    \"]\": this.tokens.bracket_right,\r\n    \"=\": this.tokens.equal,\r\n    \"==\": this.tokens.equal_equal,\r\n    \"!=\": this.tokens.not_equal,\r\n    \">\": this.tokens.greater_than,\r\n    \">=\": this.tokens.greater_than_equal,\r\n    \">>\": this.tokens.shift_right,\r\n    \"<\": this.tokens.less_than,\r\n    \"<=\": this.tokens.less_than_equal,\r\n    \"<<\": this.tokens.shift_left,\r\n    \"%\": this.tokens.modulo,\r\n    \"-\": this.tokens.minus,\r\n    \"--\": this.tokens.minus_minus,\r\n    \".\": this.tokens.period,\r\n    \"+\": this.tokens.plus,\r\n    \"++\": this.tokens.plus_plus,\r\n    \"|\": this.tokens.or,\r\n    \"||\": this.tokens.or_or,\r\n    \"*\": this.tokens.star,\r\n    \"~\": this.tokens.tilde,\r\n    \"_\": this.tokens.underscore,\r\n    \"^\": this.tokens.xor,\r\n    \"+=\": this.tokens.plus_equal,\r\n    \"-=\": this.tokens.minus_equal,\r\n    \"*=\": this.tokens.times_equal,\r\n    \"/=\": this.tokens.division_equal,\r\n    \"%=\": this.tokens.modulo_equal,\r\n    \"&=\": this.tokens.and_equal,\r\n    \"|=\": this.tokens.or_equal,\r\n    \"^=\": this.tokens.xor_equal,\r\n    \">>=\": this.tokens.shift_right_equal,\r\n    \"<<=\": this.tokens.shift_left_equal,\r\n  };\r\n\r\n  static readonly regexTokens = {\r\n    decimal_float_literal: this.tokens.decimal_float_literal,\r\n    hex_float_literal: this.tokens.hex_float_literal,\r\n    int_literal: this.tokens.int_literal,\r\n    uint_literal: this.tokens.uint_literal,\r\n    ident: this.tokens.ident,\r\n  };\r\n\r\n  static readonly storage_class = [\r\n    this.keywords.function,\r\n    this.keywords.private,\r\n    this.keywords.workgroup,\r\n    this.keywords.uniform,\r\n    this.keywords.storage,\r\n  ];\r\n\r\n  static readonly access_mode = [\r\n    this.keywords.read,\r\n    this.keywords.write,\r\n    this.keywords.read_write,\r\n  ];\r\n\r\n  static readonly sampler_type = [\r\n    this.keywords.sampler,\r\n    this.keywords.sampler_comparison,\r\n  ];\r\n\r\n  static readonly sampled_texture_type = [\r\n    this.keywords.texture_1d,\r\n    this.keywords.texture_2d,\r\n    this.keywords.texture_2d_array,\r\n    this.keywords.texture_3d,\r\n    this.keywords.texture_cube,\r\n    this.keywords.texture_cube_array,\r\n  ];\r\n\r\n  static readonly multisampled_texture_type = [\r\n    this.keywords.texture_multisampled_2d,\r\n  ];\r\n\r\n  static readonly storage_texture_type = [\r\n    this.keywords.texture_storage_1d,\r\n    this.keywords.texture_storage_2d,\r\n    this.keywords.texture_storage_2d_array,\r\n    this.keywords.texture_storage_3d,\r\n  ];\r\n\r\n  static readonly depth_texture_type = [\r\n    this.keywords.texture_depth_2d,\r\n    this.keywords.texture_depth_2d_array,\r\n    this.keywords.texture_depth_cube,\r\n    this.keywords.texture_depth_cube_array,\r\n    this.keywords.texture_depth_multisampled_2d,\r\n  ];\r\n\r\n  static readonly texture_external_type = [this.keywords.texture_external];\r\n\r\n  static readonly any_texture_type = [\r\n    ...this.sampled_texture_type,\r\n    ...this.multisampled_texture_type,\r\n    ...this.storage_texture_type,\r\n    ...this.depth_texture_type,\r\n    ...this.texture_external_type,\r\n  ];\r\n\r\n  static readonly texel_format = [\r\n    this.keywords.r8unorm,\r\n    this.keywords.r8snorm,\r\n    this.keywords.r8uint,\r\n    this.keywords.r8sint,\r\n    this.keywords.r16uint,\r\n    this.keywords.r16sint,\r\n    this.keywords.r16float,\r\n    this.keywords.rg8unorm,\r\n    this.keywords.rg8snorm,\r\n    this.keywords.rg8uint,\r\n    this.keywords.rg8sint,\r\n    this.keywords.r32uint,\r\n    this.keywords.r32sint,\r\n    this.keywords.r32float,\r\n    this.keywords.rg16uint,\r\n    this.keywords.rg16sint,\r\n    this.keywords.rg16float,\r\n    this.keywords.rgba8unorm,\r\n    this.keywords.rgba8unorm_srgb,\r\n    this.keywords.rgba8snorm,\r\n    this.keywords.rgba8uint,\r\n    this.keywords.rgba8sint,\r\n    this.keywords.bgra8unorm,\r\n    this.keywords.bgra8unorm_srgb,\r\n    this.keywords.rgb10a2unorm,\r\n    this.keywords.rg11b10float,\r\n    this.keywords.rg32uint,\r\n    this.keywords.rg32sint,\r\n    this.keywords.rg32float,\r\n    this.keywords.rgba16uint,\r\n    this.keywords.rgba16sint,\r\n    this.keywords.rgba16float,\r\n    this.keywords.rgba32uint,\r\n    this.keywords.rgba32sint,\r\n    this.keywords.rgba32float,\r\n  ];\r\n\r\n  static readonly const_literal = [\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.decimal_float_literal,\r\n    this.tokens.hex_float_literal,\r\n    this.keywords.true,\r\n    this.keywords.false,\r\n  ];\r\n\r\n  static readonly literal_or_ident = [\r\n    this.tokens.ident,\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.decimal_float_literal,\r\n    this.tokens.hex_float_literal,\r\n    this.tokens.name\r\n  ];\r\n\r\n  static readonly element_count_expression = [\r\n    this.tokens.int_literal,\r\n    this.tokens.uint_literal,\r\n    this.tokens.ident,\r\n  ];\r\n\r\n  static readonly template_types = [\r\n    this.keywords.vec2,\r\n    this.keywords.vec3,\r\n    this.keywords.vec4,\r\n    this.keywords.mat2x2,\r\n    this.keywords.mat2x3,\r\n    this.keywords.mat2x4,\r\n    this.keywords.mat3x2,\r\n    this.keywords.mat3x3,\r\n    this.keywords.mat3x4,\r\n    this.keywords.mat4x2,\r\n    this.keywords.mat4x3,\r\n    this.keywords.mat4x4,\r\n    this.keywords.atomic,\r\n    this.keywords.bitcast,\r\n    ...this.any_texture_type,\r\n  ];\r\n\r\n  // The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\r\n  // The attribute grammar should be ident | block.\r\n  static readonly attribute_name = [this.tokens.ident, this.keywords.block, this.keywords.diagnostic];\r\n\r\n  static readonly assignment_operators = [\r\n    this.tokens.equal,\r\n    this.tokens.plus_equal,\r\n    this.tokens.minus_equal,\r\n    this.tokens.times_equal,\r\n    this.tokens.division_equal,\r\n    this.tokens.modulo_equal,\r\n    this.tokens.and_equal,\r\n    this.tokens.or_equal,\r\n    this.tokens.xor_equal,\r\n    this.tokens.shift_right_equal,\r\n    this.tokens.shift_left_equal,\r\n  ];\r\n\r\n  static readonly increment_operators = [\r\n    this.tokens.plus_plus,\r\n    this.tokens.minus_minus,\r\n  ];\r\n}\r\n\r\n/// A token parsed by the WgslScanner.\r\nexport class Token {\r\n  readonly type: TokenType; // The type of the token.\r\n  readonly lexeme: string; // The string of the token, as parsed from the source text.\r\n  readonly line: number; // The line number of the token in the source text.\r\n  readonly start: number; // The start position of the token in the source text.\r\n  readonly end: number; // The end position of the token in the source text.\r\n\r\n  constructor(type: TokenType, lexeme: string, line: number, start: number, end: number) {\r\n    this.type = type;\r\n    this.lexeme = lexeme;\r\n    this.line = line;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.lexeme;\r\n  }\r\n\r\n  isTemplateType(): boolean {\r\n    return TokenTypes.template_types.indexOf(this.type) != -1;\r\n  }\r\n\r\n  isArrayType(): boolean {\r\n    return this.type == TokenTypes.keywords.array;\r\n  }\r\n\r\n  isArrayOrTemplateType(): boolean {\r\n    return this.isArrayType() || this.isTemplateType();\r\n  }\r\n}\r\n\r\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\r\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\r\nexport class WgslScanner {\r\n  private _source: string;\r\n  private _tokens: Token[] = [];\r\n  private _start = 0;\r\n  private _current = 0;\r\n  private _line = 1;\r\n\r\n  constructor(source?: string) {\r\n    this._source = source ?? \"\";\r\n  }\r\n\r\n  /// Scan all tokens from the source.\r\n  scanTokens(): Token[] {\r\n    while (!this._isAtEnd()) {\r\n      this._start = this._current;\r\n      if (!this.scanToken()) {\r\n        throw `Invalid syntax at line ${this._line}`;\r\n      }\r\n    }\r\n\r\n    this._tokens.push(new Token(TokenTypes.eof, \"\", this._line, this._current, this._current));\r\n\r\n    return this._tokens;\r\n  }\r\n\r\n  /// Scan a single token from the source.\r\n  scanToken(): boolean {\r\n    // Find the longest consecutive set of characters that match a rule.\r\n    let lexeme = this._advance();\r\n\r\n    // Skip line-feed, adding to the line counter.\r\n    if (lexeme == \"\\n\") {\r\n      this._line++;\r\n      return true;\r\n    }\r\n\r\n    // Skip whitespace\r\n    if (this._isWhitespace(lexeme)) {\r\n      return true;\r\n    }\r\n\r\n    if (lexeme == \"/\") {\r\n      // If it's a // comment, skip everything until the next line-feed.\r\n      if (this._peekAhead() == \"/\") {\r\n        while (lexeme != \"\\n\") {\r\n          if (this._isAtEnd()) {\r\n            return true;\r\n          }\r\n          lexeme = this._advance();\r\n        }\r\n        // skip the linefeed\r\n        this._line++;\r\n        return true;\r\n      } else if (this._peekAhead() == \"*\") {\r\n        // If it's a / * block comment, skip everything until the matching * /,\r\n        // allowing for nested block comments.\r\n        this._advance();\r\n        let commentLevel = 1;\r\n        while (commentLevel > 0) {\r\n          if (this._isAtEnd()) {\r\n            return true;\r\n          }\r\n          lexeme = this._advance();\r\n          if (lexeme == \"\\n\") {\r\n            this._line++;\r\n          } else if (lexeme == \"*\") {\r\n            if (this._peekAhead() == \"/\") {\r\n              this._advance();\r\n              commentLevel--;\r\n              if (commentLevel == 0) {\r\n                return true;\r\n              }\r\n            }\r\n          } else if (lexeme == \"/\") {\r\n            if (this._peekAhead() == \"*\") {\r\n              this._advance();\r\n              commentLevel++;\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Shortcut single character tokens\r\n    const simpleToken = TokenTypes.simpleTokens[lexeme];\r\n    if (simpleToken) {\r\n      this._addToken(simpleToken);\r\n      return true;\r\n    }\r\n\r\n    // Shortcut keywords and identifiers\r\n    let matchType = TokenTypes.none;\r\n    const isAlpha = this._isAlpha(lexeme);\r\n    const isUnderscore = lexeme === \"_\";\r\n\r\n    if (this._isAlphaNumeric(lexeme)) {\r\n      let nextChar = this._peekAhead();\r\n      while (this._isAlphaNumeric(nextChar)) {\r\n        lexeme += this._advance();\r\n        nextChar = this._peekAhead();\r\n      }\r\n    }\r\n\r\n    if (isAlpha) {\r\n      const matchedType = TokenTypes.keywords[lexeme];\r\n      if (matchedType) {\r\n        this._addToken(matchedType);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (isAlpha || isUnderscore) {\r\n      this._addToken(TokenTypes.tokens.ident);\r\n      return true;\r\n    }\r\n\r\n    // Scan for the next valid token type\r\n    for (;;) {\r\n      let matchedType = this._findType(lexeme);\r\n\r\n      // An exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\r\n      // shift_right.\r\n      // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\r\n      // and one to close the array).\r\n      // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),\r\n      // it's a greather_than and an equal, not a greater_than_equal.\r\n      // Another ambiguity is '-'. In the case of a-2, it's a minus; in the case of a*-2, it's a -2;\r\n      // in the case of foo()->int, it's a ->; in the case of foo-- or --foo, it's a -- decrement.\r\n\r\n      // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases\r\n      // are predicated on it the > either closing a template, or being part of an operator.\r\n      // The solution here is to check if there was a less_than up to some number of tokens\r\n      // previously, and the token prior to that is a keyword that requires a '<', then it will be\r\n      // split into two operators; otherwise it's a single operator.\r\n      const nextLexeme = this._peekAhead();\r\n      if (lexeme == \"-\" && this._tokens.length > 0) {\r\n        if (nextLexeme == \"=\") {\r\n          this._current++;\r\n          lexeme += nextLexeme;\r\n          this._addToken(TokenTypes.tokens.minus_equal);\r\n          return true;\r\n        }\r\n        if (nextLexeme == \"-\") {\r\n          this._current++;\r\n          lexeme += nextLexeme;\r\n          this._addToken(TokenTypes.tokens.minus_minus);\r\n          return true;\r\n        }\r\n        const ti = this._tokens.length - 1;\r\n        const isIdentOrLiteral = TokenTypes.literal_or_ident.indexOf(this._tokens[ti].type) != -1;\r\n        if ((isIdentOrLiteral || this._tokens[ti].type == TokenTypes.tokens.paren_right) && nextLexeme != \">\") {\r\n          this._addToken(matchedType);\r\n          return true;\r\n        }\r\n      }\r\n      if (lexeme == \">\" && (nextLexeme == \">\" || nextLexeme == \"=\")) {\r\n        let foundLessThan = false;\r\n        let ti = this._tokens.length - 1;\r\n        for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {\r\n          if (TokenTypes.assignment_operators.indexOf(this._tokens[ti].type) !== -1) {\r\n            break;\r\n          }\r\n          if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\r\n            if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {\r\n              foundLessThan = true;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        // If there was a less_than in the recent token history, then this is probably a\r\n        // greater_than.\r\n        if (foundLessThan) {\r\n          this._addToken(matchedType);\r\n          return true;\r\n        }\r\n      }\r\n\r\n      // The current lexeme may not match any rule, but some token types may be invalid for\r\n      // part of the string but valid after a few more characters.\r\n      // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\r\n      // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\r\n      // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\r\n      // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\r\n      // hex_float_literal. So that means if we hit an non-matching string, we should look\r\n      // ahead up to two characters to see if the string starts matching a valid rule again.\r\n      if (matchedType === TokenTypes.none) {\r\n        let lookAheadLexeme = lexeme;\r\n        let lookAhead = 0;\r\n        const maxLookAhead = 2;\r\n        for (let li = 0; li < maxLookAhead; ++li) {\r\n          lookAheadLexeme += this._peekAhead(li);\r\n          matchedType = this._findType(lookAheadLexeme);\r\n          if (matchedType !== TokenTypes.none) {\r\n            lookAhead = li;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (matchedType === TokenTypes.none) {\r\n          if (matchType === TokenTypes.none) {\r\n            return false;\r\n          }\r\n          this._current--;\r\n          this._addToken(matchType);\r\n          return true;\r\n        }\r\n\r\n        lexeme = lookAheadLexeme;\r\n        this._current += lookAhead + 1;\r\n      }\r\n\r\n      matchType = matchedType;\r\n\r\n      if (this._isAtEnd()) {\r\n        break;\r\n      }\r\n\r\n      lexeme += this._advance();\r\n    }\r\n\r\n    // We got to the end of the input stream. Then the token we've ready so far is it.\r\n    if (matchType === TokenTypes.none) {\r\n      return false;\r\n    }\r\n\r\n    this._addToken(matchType);\r\n    return true;\r\n  }\r\n\r\n  _findType(lexeme: string): TokenType {\r\n    for (const name in TokenTypes.regexTokens) {\r\n      const type = TokenTypes.regexTokens[name];\r\n      if (this._match(lexeme, type.rule)) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    const type = TokenTypes.literalTokens[lexeme];\r\n    if (type) {\r\n      return type;\r\n    }\r\n\r\n    return TokenTypes.none;\r\n  }\r\n\r\n  _match(lexeme: string, rule: RegExp): boolean {\r\n    const match = rule.exec(lexeme);\r\n    return match && match.index == 0 && match[0] == lexeme;\r\n  }\r\n\r\n  _isAtEnd(): boolean {\r\n    return this._current >= this._source.length;\r\n  }\r\n\r\n  _isAlpha(c: string): boolean {\r\n    // To support UTF-8 characters, allow anything other than whitespace, numbers, or operators\r\n    return !this._isNumeric(c) && !this._isWhitespace(c) && c !== \"_\" && c !== \".\" && c !== \"(\" && c !== \")\" &&\r\n      c !== \"[\" && c !== \"]\" && c !== \"{\" && c !== \"}\" && c !== \",\" && c !== \";\" && c !== \":\" && c !== \"=\" &&\r\n      c !== \"!\" && c !== \"<\" && c !== \">\" && c !== \"+\" && c !== \"-\" && c !== \"*\" && c !== \"/\" && c !== \"%\" &&\r\n      c !== \"&\" && c !== \"|\" && c !== \"^\" && c !== \"~\" && c !== \"@\" && c !== \"#\" && c !== \"?\" && c !== \"'\" &&\r\n      c !== \"`\" && c !== \"\\\"\" && c !== \"\\\\\" && c !== \"\\n\" && c !== \"\\r\" && c !== \"\\t\" && c !== \"\\0\";\r\n  }\r\n\r\n  _isNumeric(c: string): boolean {\r\n    return c >= \"0\" && c <= \"9\";\r\n  }\r\n\r\n  _isAlphaNumeric(c: string): boolean {\r\n    return this._isAlpha(c) || this._isNumeric(c) || c === \"_\";\r\n  }\r\n\r\n  _isWhitespace(c: string): boolean {\r\n    return c == \" \" || c == \"\\t\" || c == \"\\r\";\r\n  }\r\n\r\n  _advance(amount: number = 0): string {\r\n    let c = this._source[this._current];\r\n    amount = amount || 0;\r\n    amount++;\r\n    this._current += amount;\r\n    return c;\r\n  }\r\n\r\n  _peekAhead(offset: number = 0): string {\r\n    offset = offset || 0;\r\n    if (this._current + offset >= this._source.length) {\r\n      return \"\\0\";\r\n    }\r\n    return this._source[this._current + offset];\r\n  }\r\n\r\n  _addToken(type: TokenType) {\r\n    const text = this._source.substring(this._start, this._current);\r\n    this._tokens.push(new Token(type, text, this._line, this._start, this._current));\r\n  }\r\n}\r\n","export function isArray(value: any): boolean {\r\n    return Array.isArray(value) || value?.buffer instanceof ArrayBuffer;\r\n}\r\n\r\nexport function isNumber(value: any): boolean {\r\n    return typeof value === \"number\";\r\n}\r\n\r\nconst _f32 = new Float32Array(1);\r\nconst _f32_i32 = new Uint32Array(_f32.buffer);\r\nconst _f32_u32 = new Uint32Array(_f32.buffer);\r\nconst _i32 = new Int32Array(1);\r\nconst _i32_f32 = new Float32Array(_i32.buffer);\r\nconst _i32_u32 = new Uint32Array(_i32.buffer);\r\nconst _u32 = new Uint32Array(1);\r\nconst _u32_f32 = new Float32Array(_u32.buffer);\r\nconst _u32_i32 = new Int32Array(_u32.buffer);\r\n\r\nexport function castScalar(v: number, from: string, to: string): number {\r\n    if (from === to) {\r\n        return v;\r\n    }\r\n\r\n    if (from === \"f32\") {\r\n        if (to === \"i32\" || to === \"x32\") {\r\n            _f32[0] = v;\r\n            return _f32_i32[0];\r\n        } else if (to === \"u32\") {\r\n            _f32[0] = v;\r\n            return _f32_u32[0];\r\n        }\r\n    } else if (from === \"i32\" || from === \"x32\") {\r\n        if (to === \"f32\") {\r\n            _i32[0] = v;\r\n            return _i32_f32[0];\r\n        } else if (to === \"u32\") {\r\n            _i32[0] = v;\r\n            return _i32_u32[0];\r\n        }\r\n    } else if (from === \"u32\") {\r\n        if (to === \"f32\") {\r\n            _u32[0] = v;\r\n            return _u32_f32[0];\r\n        } else if (to === \"i32\" || to === \"x32\") {\r\n            _u32[0] = v;\r\n            return _u32_i32[0];\r\n        }\r\n    }\r\n\r\n    console.error(`Unsupported cast from ${from} to ${to}`);\r\n    return v;\r\n}\r\n\r\nexport function castVector(v: number[], from: string, to: string): number[] {\r\n    if (from === to) {\r\n        return v;\r\n    }\r\n\r\n    const cast = new Array<number>(v.length);\r\n    for (let i = 0; i < v.length; i++) {\r\n        cast[i] = castScalar(v[i], from, to);\r\n    }\r\n\r\n    return cast;\r\n}\r\n","/**\r\n * @author Brendan Duncan / https://github.com/brendan-duncan\r\n */\r\nimport { TokenTypes } from \"../wgsl_scanner.js\";\r\nimport { Type, Struct, Alias, Override, Var, Node, Function, VariableExpr, CreateExpr,\r\n    Let, CallExpr, Call, Argument, Member, Attribute, ArrayType, SamplerType, TemplateType, \r\n    PointerType } from \"../wgsl_ast.js\";\r\nimport { _BlockStart, _BlockEnd } from \"../wgsl_ast.js\";\r\nimport { FunctionInfo, VariableInfo, AliasInfo, OverrideInfo, PointerInfo,\r\n  StructInfo, TypeInfo, MemberInfo, ArrayInfo, TemplateInfo, OutputInfo,\r\n  InputInfo, ArgumentInfo, ResourceType, EntryFunctions } from \"./info.js\";\r\nimport { isArray } from \"../utils/cast.js\";\r\n \r\nclass _FunctionResources {\r\n  node: Function;\r\n  resources: VariableInfo[] | null = null;\r\n  inUse: boolean = false;\r\n  info: FunctionInfo | null = null;\r\n  constructor(node: Function) {\r\n    this.node = node;\r\n  }\r\n}\r\n\r\nclass _TypeSize {\r\n  align: number;\r\n  size: number;\r\n\r\n  constructor(align: number, size: number) {\r\n    this.align = align;\r\n    this.size = size;\r\n  }\r\n}\r\n\r\nexport class Reflect {\r\n  /// All top-level uniform vars in the shader.\r\n  uniforms: VariableInfo[] = [];\r\n  /// All top-level storage vars in the shader.\r\n  storage: VariableInfo[] = [];\r\n  /// All top-level texture vars in the shader;\r\n  textures: VariableInfo[] = [];\r\n  // All top-level sampler vars in the shader.\r\n  samplers: VariableInfo[] = [];\r\n  /// All top-level type aliases in the shader.\r\n  aliases: AliasInfo[] = [];\r\n  /// All top-level overrides in the shader.\r\n  overrides: OverrideInfo[] = [];\r\n  /// All top-level structs in the shader.\r\n  structs: StructInfo[] = [];\r\n  /// All entry functions in the shader: vertex, fragment, and/or compute.\r\n  entry: EntryFunctions = new EntryFunctions();\r\n  /// All functions in the shader, including entry functions.\r\n  functions: FunctionInfo[] = [];\r\n\r\n  _types: Map<Type, TypeInfo> = new Map();\r\n  _functions: Map<string, _FunctionResources> = new Map();\r\n\r\n  _isStorageTexture(type: TypeInfo): boolean {\r\n    return (\r\n      type.name == \"texture_storage_1d\" ||\r\n      type.name == \"texture_storage_2d\" ||\r\n      type.name == \"texture_storage_2d_array\" ||\r\n      type.name == \"texture_storage_3d\"\r\n    );\r\n  }\r\n\r\n  updateAST(ast: Node[]): void {\r\n    for (const node of ast) {\r\n      if (node instanceof Function) {\r\n        this._functions.set(node.name, new _FunctionResources(node as Function));\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof Struct) {\r\n        const info = this.getTypeInfo(node as Struct, null);\r\n        if (info instanceof StructInfo) {\r\n          this.structs.push(info as StructInfo);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof Alias) {\r\n        this.aliases.push(this._getAliasInfo(node as Alias));\r\n        continue;\r\n      }\r\n\r\n      if (node instanceof Override) {\r\n        const v = node as Override;\r\n        const id = this._getAttributeNum(v.attributes, \"id\", 0);\r\n        const type = v.type != null ? this.getTypeInfo(v.type, v.attributes) : null;\r\n        this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));\r\n        continue;\r\n      }\r\n\r\n      if (this._isUniformVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Uniform, v.access);\r\n        if (!varInfo.access) {\r\n          varInfo.access = \"read\";\r\n        }\r\n        this.uniforms.push(varInfo);\r\n        continue;\r\n      }\r\n\r\n      if (this._isStorageVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const isStorageTexture = this._isStorageTexture(type);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage, v.access);\r\n        if (!varInfo.access) {\r\n          varInfo.access = \"read\";\r\n        }\r\n        this.storage.push(varInfo);\r\n        continue;\r\n      }\r\n\r\n      if (this._isTextureVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const isStorageTexture = this._isStorageTexture(type);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, \r\n            isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture, v.access);\r\n        if (!varInfo.access) {\r\n          varInfo.access = \"read\";\r\n        }\r\n        if (isStorageTexture) {\r\n          this.storage.push(varInfo);\r\n        } else {\r\n          this.textures.push(varInfo);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (this._isSamplerVar(node)) {\r\n        const v = node as Var;\r\n        const g = this._getAttributeNum(v.attributes, \"group\", 0);\r\n        const b = this._getAttributeNum(v.attributes, \"binding\", 0);\r\n        const type = this.getTypeInfo(v.type!, v.attributes);\r\n        const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Sampler, v.access);\r\n        this.samplers.push(varInfo);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    for (const node of ast) {\r\n      if (node instanceof Function) {\r\n        const vertexStage = this._getAttribute(node, \"vertex\");\r\n        const fragmentStage = this._getAttribute(node, \"fragment\");\r\n        const computeStage = this._getAttribute(node, \"compute\");\r\n        const stage = vertexStage || fragmentStage || computeStage;\r\n\r\n        const fn = new FunctionInfo(node.name, stage?.name, node.attributes);\r\n        fn.attributes = node.attributes;\r\n        fn.startLine = node.startLine;\r\n        fn.endLine = node.endLine;\r\n        this.functions.push(fn);\r\n        this._functions.get(node.name)!.info = fn;\r\n\r\n        if (stage) {\r\n          this._functions.get(node.name)!.inUse = true;\r\n          fn.inUse = true;\r\n          fn.resources = this._findResources(node, !!stage);\r\n          fn.inputs = this._getInputs(node.args);\r\n          fn.outputs = this._getOutputs(node.returnType);\r\n          this.entry[stage.name].push(fn);\r\n        }\r\n\r\n        fn.arguments = node.args.map(\r\n          (arg) => new ArgumentInfo(arg.name, this.getTypeInfo(arg.type, arg.attributes), arg.attributes)\r\n        );\r\n\r\n        fn.returnType = node.returnType ? this.getTypeInfo(node.returnType, node.attributes) : null;\r\n\r\n        continue;\r\n      }\r\n    }\r\n\r\n    for (const fn of this._functions.values()) {\r\n      if (fn.info) {\r\n        fn.info.inUse = fn.inUse;\r\n        this._addCalls(fn.node, fn.info.calls);\r\n      }\r\n    }\r\n\r\n    for (const fn of this._functions.values()) {\r\n      fn.node.search((node) => {\r\n        if (node instanceof Attribute) {\r\n          if (node.value) {\r\n            if (isArray(node.value)) {\r\n              for (const value of node.value) {\r\n                for (const override of this.overrides) {\r\n                  if (value === override.name) {\r\n                    fn.info?.overrides.push(override);\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              for (const override of this.overrides) {\r\n                if (node.value === override.name) {\r\n                  fn.info?.overrides.push(override);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else if (node instanceof VariableExpr) {\r\n          for (const override of this.overrides) {\r\n            if (node.name === override.name) {\r\n              fn.info?.overrides.push(override);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      this._markStructsInUse(u.type);\r\n    }\r\n    for (const s of this.storage) {\r\n      this._markStructsInUse(s.type);\r\n    }\r\n  }\r\n\r\n  getStructInfo(name: string): StructInfo | null {\r\n    for (const s of this.structs) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getOverrideInfo(name: string): OverrideInfo | null {\r\n    for (const o of this.overrides) {\r\n      if (o.name == name) {\r\n        return o;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _markStructsInUse(type: TypeInfo) {\r\n    if (!type) {\r\n      return;\r\n    }\r\n    if (type.isStruct) {\r\n      (type as StructInfo).inUse = true;\r\n      if ((type as StructInfo).members) {\r\n        for (const m of (type as StructInfo).members) {\r\n          this._markStructsInUse(m.type);\r\n        }\r\n      }\r\n    } else if (type.isArray) {\r\n      this._markStructsInUse((type as ArrayInfo).format);\r\n    } else if (type.isTemplate) {\r\n      if ((type as TemplateInfo).format) {\r\n        this._markStructsInUse((type as TemplateInfo).format!);\r\n      }\r\n    } else {\r\n      const alias = this._getAlias(type.name);\r\n      if (alias) {\r\n        this._markStructsInUse(alias);\r\n      }\r\n    }\r\n  }\r\n\r\n  _addCalls(fn: Function, calls: Set<FunctionInfo>, ) {\r\n    for (const call of fn.calls) {\r\n      const info = this._functions.get(call.name)?.info;\r\n      if (info) {\r\n        calls.add(info);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// Find a resource by its group and binding.\r\n  findResource(group: number, binding: number, entry?: string) {\r\n    if (entry) {\r\n      for (const fn of this.entry.compute) {\r\n        if (fn.name === entry) {\r\n          for (const r of fn.resources) {\r\n            if (r.group == group && r.binding == binding) {\r\n              return r;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const fn of this.entry.vertex) {\r\n        if (fn.name === entry) {\r\n          for (const r of fn.resources) {\r\n            if (r.group == group && r.binding == binding) {\r\n              return r;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const fn of this.entry.fragment) {\r\n        if (fn.name === entry) {\r\n          for (const r of fn.resources) {\r\n            if (r.group == group && r.binding == binding) {\r\n              return r;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      if (u.group == group && u.binding == binding) {\r\n        return u;\r\n      }\r\n    }\r\n    for (const s of this.storage) {\r\n      if (s.group == group && s.binding == binding) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const t of this.textures) {\r\n      if (t.group == group && t.binding == binding) {\r\n        return t;\r\n      }\r\n    }\r\n    for (const s of this.samplers) {\r\n      if (s.group == group && s.binding == binding) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _findResource(name: string): VariableInfo | null {\r\n    for (const u of this.uniforms) {\r\n      if (u.name == name) {\r\n        return u;\r\n      }\r\n    }\r\n    for (const s of this.storage) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const t of this.textures) {\r\n      if (t.name == name) {\r\n        return t;\r\n      }\r\n    }\r\n    for (const s of this.samplers) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  _markStructsFromAST(type: Type) {\r\n    const info = this.getTypeInfo(type, null);\r\n    this._markStructsInUse(info);\r\n  }\r\n\r\n  _findResources(fn: Node, isEntry: boolean): VariableInfo[] {\r\n    const resources: any[] = [];\r\n    const self = this;\r\n    const varStack: any[] = [];\r\n    fn.search((node) => {\r\n      if (node instanceof _BlockStart) {\r\n        varStack.push({});\r\n      } else if (node instanceof _BlockEnd) {\r\n        varStack.pop();\r\n      } else if (node instanceof Var) {\r\n        const v = node as Var;\r\n        if (isEntry && v.type !== null) {\r\n          this._markStructsFromAST(v.type);\r\n        }\r\n        if (varStack.length > 0) {\r\n          varStack[varStack.length - 1][v.name] = v;\r\n        }\r\n      } else if (node instanceof CreateExpr) {\r\n        const c = node as CreateExpr;\r\n        if (isEntry && c.type !== null) {\r\n          this._markStructsFromAST(c.type);\r\n        }\r\n      } else if (node instanceof Let) {\r\n        const v = node as Let;\r\n        if (isEntry && v.type !== null) {\r\n          this._markStructsFromAST(v.type);\r\n        }\r\n        if (varStack.length > 0) {\r\n          varStack[varStack.length - 1][v.name] = v;\r\n        }\r\n      } else if (node instanceof VariableExpr) {\r\n        const v = node as VariableExpr;\r\n        // Check to see if the variable is a local variable before checking to see if it's\r\n        // a resource.\r\n        if (varStack.length > 0) {\r\n          const varInfo = varStack[varStack.length - 1][v.name];\r\n          if (varInfo) {\r\n            return;\r\n          }\r\n        }\r\n        const varInfo = self._findResource(v.name);\r\n        if (varInfo) {\r\n          resources.push(varInfo);\r\n        }\r\n      } else if (node instanceof CallExpr) {\r\n        const c = node as CallExpr;\r\n        const callFn = self._functions.get(c.name);\r\n        if (callFn) {\r\n          if (isEntry) {\r\n            callFn.inUse = true;\r\n          }\r\n          (fn as Function).calls.add(callFn.node);\r\n          if (callFn.resources === null) {\r\n            callFn.resources = self._findResources(callFn.node, isEntry);\r\n          }\r\n          resources.push(...callFn.resources);\r\n        }\r\n      } else if (node instanceof Call) {\r\n        const c = node as Call;\r\n        const callFn = self._functions.get(c.name);\r\n        if (callFn) {\r\n          if (isEntry) {\r\n            callFn.inUse = true;\r\n          }\r\n          (fn as Function).calls.add(callFn.node);\r\n          if (callFn.resources === null) {\r\n            callFn.resources = self._findResources(callFn.node, isEntry);\r\n          }\r\n          resources.push(...callFn.resources);\r\n        }\r\n      }\r\n    });\r\n    return [...new Map(resources.map(r => [r.name, r])).values()];\r\n  }\r\n\r\n  getBindGroups(): Array<VariableInfo[]> {\r\n    const groups: Array<VariableInfo[]> = [];\r\n\r\n    function _makeRoom(group: number, binding: number) {\r\n      if (group >= groups.length) {\r\n        groups.length = group + 1;\r\n      }\r\n\r\n      if (groups[group] === undefined) {\r\n        groups[group] = [];\r\n      }\r\n\r\n      if (binding >= groups[group].length) {\r\n        groups[group].length = binding + 1;\r\n      }\r\n    }\r\n\r\n    for (const u of this.uniforms) {\r\n      _makeRoom(u.group, u.binding);\r\n      const group = groups[u.group];\r\n      group[u.binding] = u;\r\n    }\r\n\r\n    for (const u of this.storage) {\r\n      _makeRoom(u.group, u.binding);\r\n      const group = groups[u.group];\r\n      group[u.binding] = u;\r\n    }\r\n\r\n    for (const t of this.textures) {\r\n      _makeRoom(t.group, t.binding);\r\n      const group = groups[t.group];\r\n      group[t.binding] = t;\r\n    }\r\n\r\n    for (const t of this.samplers) {\r\n      _makeRoom(t.group, t.binding);\r\n      const group = groups[t.group];\r\n      group[t.binding] = t;\r\n    }\r\n\r\n    return groups;\r\n  }\r\n\r\n  _getOutputs(\r\n    type: Type,\r\n    outputs: OutputInfo[] | undefined = undefined\r\n  ): OutputInfo[] {\r\n    if (outputs === undefined) {\r\n      outputs = [];\r\n    }\r\n\r\n    if (type instanceof Struct) {\r\n      this._getStructOutputs(type, outputs);\r\n    } else {\r\n      const output = this._getOutputInfo(type);\r\n      if (output !== null) {\r\n        outputs.push(output);\r\n      }\r\n    }\r\n\r\n    return outputs;\r\n  }\r\n\r\n  _getStructOutputs(struct: Struct, outputs: OutputInfo[]) {\r\n    for (const m of struct.members) {\r\n      if (m.type instanceof Struct) {\r\n        this._getStructOutputs(m.type, outputs);\r\n      } else {\r\n        const location =\r\n          this._getAttribute(m, \"location\") || this._getAttribute(m, \"builtin\");\r\n        if (location !== null) {\r\n          const typeInfo = this.getTypeInfo(m.type, m.type.attributes);\r\n          const locationValue = this._parseInt(location.value);\r\n          const info = new OutputInfo(\r\n            m.name,\r\n            typeInfo,\r\n            location.name,\r\n            locationValue\r\n          );\r\n          outputs.push(info);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getOutputInfo(type: Type): OutputInfo | null {\r\n    const location =\r\n      this._getAttribute(type, \"location\") ||\r\n      this._getAttribute(type, \"builtin\");\r\n    if (location !== null) {\r\n      const typeInfo = this.getTypeInfo(type, type.attributes);\r\n      const locationValue = this._parseInt(location.value);\r\n      const info = new OutputInfo(\"\", typeInfo, location.name, locationValue);\r\n      return info;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getInputs(\r\n    args: Argument[],\r\n    inputs: InputInfo[] | undefined = undefined\r\n  ): InputInfo[] {\r\n    if (inputs === undefined) {\r\n      inputs = [];\r\n    }\r\n\r\n    for (const arg of args) {\r\n      if (arg.type instanceof Struct) {\r\n        this._getStructInputs(arg.type, inputs);\r\n      } else {\r\n        const input = this._getInputInfo(arg);\r\n        if (input !== null) {\r\n          inputs.push(input);\r\n        }\r\n      }\r\n    }\r\n\r\n    return inputs;\r\n  }\r\n\r\n  _getStructInputs(struct: Struct, inputs: InputInfo[]) {\r\n    for (const m of struct.members) {\r\n      if (m.type instanceof Struct) {\r\n        this._getStructInputs(m.type, inputs);\r\n      } else {\r\n        const input = this._getInputInfo(m);\r\n        if (input !== null) {\r\n          inputs.push(input);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getInputInfo(node: Member | Argument): InputInfo | null {\r\n    const location =\r\n      this._getAttribute(node, \"location\") ||\r\n      this._getAttribute(node, \"builtin\");\r\n    if (location !== null) {\r\n      const interpolation = this._getAttribute(node, \"interpolation\");\r\n      const type = this.getTypeInfo(node.type, node.attributes);\r\n      const locationValue = this._parseInt(location.value);\r\n      const info = new InputInfo(node.name, type, location.name, locationValue);\r\n      if (interpolation !== null) {\r\n        info.interpolation = this._parseString(interpolation.value);\r\n      }\r\n      return info;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _parseString(s: string | string[]): string {\r\n    if (s instanceof Array) {\r\n      s = s[0];\r\n    }\r\n    return s;\r\n  }\r\n\r\n  _parseInt(s: string | string[]): number | string {\r\n    if (s instanceof Array) {\r\n      s = s[0];\r\n    }\r\n    const n = parseInt(s);\r\n    return isNaN(n) ? s : n;\r\n  }\r\n\r\n  _getAlias(name: string): TypeInfo | null {\r\n    for (const a of this.aliases) {\r\n      if (a.name == name) {\r\n        return a.type;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getAliasInfo(node: Alias): AliasInfo {\r\n    return new AliasInfo(node.name, this.getTypeInfo(node.type!, null));\r\n  }\r\n\r\n  getTypeInfoByName(name: string): TypeInfo | null {\r\n    for (const s of this.structs) {\r\n      if (s.name == name) {\r\n        return s;\r\n      }\r\n    }\r\n    for (const a of this.aliases) {\r\n      if (a.name == name) {\r\n        return a.type;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getTypeInfo(type: Type, attributes: Attribute[] | null = null): TypeInfo {\r\n    if (this._types.has(type)) {\r\n      return this._types.get(type)!;\r\n    }\r\n\r\n    if (type instanceof PointerType) {\r\n      const t = type.type ? this.getTypeInfo(type.type!, type.attributes) : null;\r\n      const info = new PointerInfo(type.name, t, attributes);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof ArrayType) {\r\n      const a = type as ArrayType;\r\n      const t = a.format ? this.getTypeInfo(a.format!, a.attributes) : null;\r\n      const info = new ArrayInfo(a.name, attributes);\r\n      info.format = t;\r\n      info.count = a.count;\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof Struct) {\r\n      const s = type as Struct;\r\n      const info = new StructInfo(s.name, attributes);\r\n      info.startLine = s.startLine;\r\n      info.endLine = s.endLine;\r\n      for (const m of s.members) {\r\n        const t = this.getTypeInfo(m.type!, m.attributes);\r\n        info.members.push(new MemberInfo(m.name, t, m.attributes));\r\n      }\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof SamplerType) {\r\n      const s = type as SamplerType;\r\n      const formatIsType = s.format instanceof Type;\r\n      const format = s.format\r\n        ? formatIsType\r\n          ? this.getTypeInfo(s.format! as Type, null)\r\n          : new TypeInfo(s.format! as string, null)\r\n        : null;\r\n      const info = new TemplateInfo(s.name, format, attributes, s.access);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    if (type instanceof TemplateType) {\r\n      const t = type as TemplateType;\r\n      const format = t.format ? this.getTypeInfo(t.format!, null) : null;\r\n      const info = new TemplateInfo(t.name, format, attributes, t.access);\r\n      this._types.set(type, info);\r\n      this._updateTypeInfo(info);\r\n      return info;\r\n    }\r\n\r\n    const info = new TypeInfo(type.name, attributes);\r\n    this._types.set(type, info);\r\n    this._updateTypeInfo(info);\r\n    return info;\r\n  }\r\n\r\n  _updateTypeInfo(type: TypeInfo) {\r\n    const typeSize = this._getTypeSize(type);\r\n    type.size = typeSize?.size ?? 0;\r\n\r\n    if (type instanceof ArrayInfo) {\r\n      if (type[\"format\"]) {\r\n        const formatInfo = this._getTypeSize(type[\"format\"]);\r\n        // Array stride is the maximum of the format size and alignment.\r\n        // In the case of a vec3f, the size is 12 bytes, but the alignment is 16 bytes.\r\n        // Buffer alignment is therefore 16 bytes.\r\n        type.stride = Math.max(formatInfo?.size ?? 0, formatInfo?.align ?? 0);\r\n        this._updateTypeInfo(type[\"format\"]);\r\n      }\r\n    }\r\n\r\n    if (type instanceof PointerInfo) {\r\n      this._updateTypeInfo(type[\"format\"]);\r\n    }\r\n\r\n    if (type instanceof StructInfo) {\r\n      this._updateStructInfo(type);\r\n    }\r\n  }\r\n\r\n  _updateStructInfo(struct: StructInfo) {\r\n    let offset = 0;\r\n    let lastSize = 0;\r\n    let lastOffset = 0;\r\n    let structAlign = 0;\r\n\r\n    for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\r\n      const member = struct.members[mi];\r\n\r\n      const sizeInfo = this._getTypeSize(member);\r\n      if (!sizeInfo) {\r\n        continue;\r\n      }\r\n\r\n      const type = this._getAlias(member.type.name) ?? member.type;\r\n      const align = sizeInfo.align;\r\n      const size = sizeInfo.size;\r\n      offset = this._roundUp(align, offset + lastSize);\r\n      lastSize = size;\r\n      lastOffset = offset;\r\n      structAlign = Math.max(structAlign, align);\r\n\r\n      member.offset = offset;\r\n      member.size = size;\r\n\r\n      this._updateTypeInfo(member.type);\r\n    }\r\n\r\n    struct.size = this._roundUp(structAlign, lastOffset + lastSize);\r\n    struct.align = structAlign;\r\n  }\r\n\r\n  _getTypeSize(\r\n    type: TypeInfo | MemberInfo | null | undefined\r\n  ): _TypeSize | null {\r\n    if (type === null || type === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const explicitSize = this._getAttributeNum(type.attributes, \"size\", 0);\r\n    const explicitAlign = this._getAttributeNum(type.attributes, \"align\", 0);\r\n\r\n    if (type instanceof MemberInfo) {\r\n      type = type.type;\r\n    }\r\n\r\n    if (type instanceof TypeInfo) {\r\n      const alias = this._getAlias(type.name);\r\n      if (alias !== null) {\r\n        type = alias;\r\n      }\r\n    }\r\n\r\n    {\r\n      const info = Reflect._typeInfo[type.name];\r\n      if (info !== undefined) {\r\n        const divisor = type[\"format\"]?.name === \"f16\" ? 2 : 1;\r\n        return new _TypeSize(\r\n          Math.max(explicitAlign, info.align / divisor),\r\n          Math.max(explicitSize, info.size / divisor)\r\n        );\r\n      }\r\n    }\r\n\r\n    {\r\n      const info =\r\n        Reflect._typeInfo[type.name.substring(0, type.name.length - 1)];\r\n      if (info) {\r\n        const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\r\n        return new _TypeSize(\r\n          Math.max(explicitAlign, info.align / divisor),\r\n          Math.max(explicitSize, info.size / divisor)\r\n        );\r\n      }\r\n    }\r\n\r\n    if (type instanceof ArrayInfo) {\r\n      let arrayType = type as ArrayInfo;\r\n      let align = 8;\r\n      let size = 8;\r\n      // Type                 AlignOf(T)          Sizeof(T)\r\n      // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\r\n      // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\r\n      //\r\n      // @stride(Q)\r\n      // array<E, N>          AlignOf(E)          N * Q\r\n      //\r\n      // @stride(Q)\r\n      // array<E>             AlignOf(E)          Nruntime * Q\r\n      //const E = type.format.name;\r\n      const E = this._getTypeSize(arrayType.format);\r\n      if (E !== null) {\r\n        size = E.size;\r\n        align = E.align;\r\n      }\r\n\r\n      const N = arrayType.count;\r\n\r\n      const stride = this._getAttributeNum(\r\n        type?.attributes ?? null,\r\n        \"stride\",\r\n        this._roundUp(align, size)\r\n      );\r\n      size = N * stride;\r\n\r\n      if (explicitSize) {\r\n        size = explicitSize;\r\n      }\r\n\r\n      return new _TypeSize(\r\n        Math.max(explicitAlign, align),\r\n        Math.max(explicitSize, size)\r\n      );\r\n    }\r\n\r\n    if (type instanceof StructInfo) {\r\n      let align = 0;\r\n      let size = 0;\r\n      // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\r\n      //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\r\n      //                          Where L is the last member of the structure\r\n      let offset = 0;\r\n      let lastSize = 0;\r\n      let lastOffset = 0;\r\n      for (const m of type.members) {\r\n        const mi = this._getTypeSize(m.type);\r\n        if (mi !== null) {\r\n          align = Math.max(mi.align, align);\r\n          offset = this._roundUp(mi.align, offset + lastSize);\r\n          lastSize = mi.size;\r\n          lastOffset = offset;\r\n        }\r\n      }\r\n      size = this._roundUp(align, lastOffset + lastSize);\r\n\r\n      return new _TypeSize(\r\n        Math.max(explicitAlign, align),\r\n        Math.max(explicitSize, size)\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _isUniformVar(node: Node): boolean {\r\n    return node instanceof Var && node.storage == \"uniform\";\r\n  }\r\n\r\n  _isStorageVar(node: Node): boolean {\r\n    return node instanceof Var && node.storage == \"storage\";\r\n  }\r\n\r\n  _isTextureVar(node: Node): boolean {\r\n    return (\r\n      node instanceof Var &&\r\n      node.type !== null &&\r\n      Reflect._textureTypes.indexOf(node.type.name) != -1\r\n    );\r\n  }\r\n\r\n  _isSamplerVar(node: Node): boolean {\r\n    return (\r\n      node instanceof Var &&\r\n      node.type !== null &&\r\n      Reflect._samplerTypes.indexOf(node.type.name) != -1\r\n    );\r\n  }\r\n\r\n  _getAttribute(node: Node, name: string): Attribute | null {\r\n    const obj = node as Object;\r\n    if (!obj || !obj[\"attributes\"]) {\r\n      return null;\r\n    }\r\n    const attrs = obj[\"attributes\"];\r\n    for (let a of attrs) {\r\n      if (a.name == name) {\r\n        return a;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getAttributeNum(\r\n    attributes: Attribute[] | null,\r\n    name: string,\r\n    defaultValue: number\r\n  ): number {\r\n    if (attributes === null) {\r\n      return defaultValue;\r\n    }\r\n    for (let a of attributes) {\r\n      if (a.name == name) {\r\n        let v = a !== null && a.value !== null ? a.value : defaultValue;\r\n        if (v instanceof Array) {\r\n          v = v[0];\r\n        }\r\n        if (typeof v === \"number\") {\r\n          return v;\r\n        }\r\n        if (typeof v === \"string\") {\r\n          return parseInt(v);\r\n        }\r\n        return defaultValue;\r\n      }\r\n    }\r\n    return defaultValue;\r\n  }\r\n\r\n  _roundUp(k: number, n: number): number {\r\n    return Math.ceil(n / k) * k;\r\n  }\r\n\r\n  // Type                 AlignOf(T)          Sizeof(T)\r\n  // i32, u32, or f32     4                   4\r\n  // atomic<T>            4                   4\r\n  // vec2<T>              8                   8\r\n  // vec3<T>              16                  12\r\n  // vec4<T>              16                  16\r\n  // mat2x2<f32>          8                   16\r\n  // mat3x2<f32>          8                   24\r\n  // mat4x2<f32>          8                   32\r\n  // mat2x3<f32>          16                  32\r\n  // mat3x3<f32>          16                  48\r\n  // mat4x3<f32>          16                  64\r\n  // mat2x4<f32>          16                  32\r\n  // mat3x4<f32>          16                  48\r\n  // mat4x4<f32>          16                  64\r\n  static readonly _typeInfo = {\r\n    f16: { align: 2, size: 2 },\r\n    i32: { align: 4, size: 4 },\r\n    u32: { align: 4, size: 4 },\r\n    f32: { align: 4, size: 4 },\r\n    atomic: { align: 4, size: 4 },\r\n    vec2: { align: 8, size: 8 },\r\n    vec3: { align: 16, size: 12 },\r\n    vec4: { align: 16, size: 16 },\r\n    mat2x2: { align: 8, size: 16 },\r\n    mat3x2: { align: 8, size: 24 },\r\n    mat4x2: { align: 8, size: 32 },\r\n    mat2x3: { align: 16, size: 32 },\r\n    mat3x3: { align: 16, size: 48 },\r\n    mat4x3: { align: 16, size: 64 },\r\n    mat2x4: { align: 16, size: 32 },\r\n    mat3x4: { align: 16, size: 48 },\r\n    mat4x4: { align: 16, size: 64 },\r\n  };\r\n\r\n  static readonly _textureTypes = TokenTypes.any_texture_type.map((t) => {\r\n    return t.name;\r\n  });\r\n\r\n  static readonly _samplerTypes = TokenTypes.sampler_type.map((t) => {\r\n    return t.name;\r\n  });\r\n}\r\n","import { Let, Var, Argument, Function } from \"../wgsl_ast.js\";\r\nimport { Data } from \"../wgsl_ast.js\";\r\n\r\ntype ASTVarNode = Let | Var | Argument;\r\n\r\nlet _id = 0;\r\n\r\nexport class VarRef {\r\n    name: string;\r\n    value: Data;\r\n    node: ASTVarNode | null;\r\n    readonly id: number = _id++;\r\n\r\n    constructor(n: string, v: Data, node: ASTVarNode | null) {\r\n        this.name = n;\r\n        this.value = v;\r\n        this.node = node;\r\n    }\r\n\r\n    clone(): VarRef {\r\n        return new VarRef(this.name, this.value, this.node);\r\n    }\r\n};\r\n\r\nexport class FunctionRef {\r\n    name: string;\r\n    node: Function;\r\n    readonly id: number = _id++;\r\n\r\n    constructor(node: Function) {\r\n        this.name = node.name;\r\n        this.node = node;\r\n    }\r\n\r\n    clone(): FunctionRef {\r\n        return new FunctionRef(this.node);\r\n    }\r\n};\r\n\r\nexport class ExecContext {\r\n    parent: ExecContext | null = null;\r\n    variables = new Map<string, VarRef>();\r\n    functions = new Map<string, FunctionRef>();\r\n    currentFunctionName = \"\";\r\n    readonly id: number = _id++;\r\n\r\n    constructor(parent?: ExecContext) {\r\n        if (parent) {\r\n            this.parent = parent;\r\n            this.currentFunctionName = parent.currentFunctionName;\r\n        }\r\n    }\r\n\r\n    getVariable(name: string): VarRef | null {\r\n        if (this.variables.has(name)) {\r\n            return this.variables.get(name) ?? null;\r\n        }\r\n        if (this.parent) {\r\n            return this.parent.getVariable(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getFunction(name: string): FunctionRef | null {\r\n        if (this.functions.has(name)) {\r\n            return this.functions.get(name) ?? null;\r\n        }\r\n        if (this.parent) {\r\n            return this.parent.getFunction(name);\r\n        }\r\n        return null\r\n    }\r\n\r\n    createVariable(name: string, value: Data, node?: ASTVarNode) {\r\n        this.variables.set(name, new VarRef(name, value, node ?? null));\r\n    }\r\n\r\n    setVariable(name: string, value: Data, node?: ASTVarNode) {\r\n        const v = this.getVariable(name);\r\n        if (v !== null) {\r\n            v.value = value;\r\n        } else {\r\n            this.createVariable(name, value, node);\r\n        }\r\n    }\r\n\r\n    getVariableValue(name: string): Data | null {\r\n        const v = this.getVariable(name);\r\n        return v?.value ?? null;\r\n    }\r\n\r\n    clone(): ExecContext {\r\n        return new ExecContext(this);\r\n    }\r\n};\r\n","import { Node, Type } from \"../wgsl_ast.js\";\r\nimport { ExecContext } from \"./exec_context.js\";\r\nimport { TypeInfo } from \"../wgsl_reflect.js\";\r\nimport { Data } from \"../wgsl_ast.js\";\r\n\r\nexport class ExecInterface {\r\n    evalExpression(node: Node, context: ExecContext): Data | null {\r\n        return null;\r\n    }\r\n\r\n    getTypeInfo(type: Type | string): TypeInfo | null {\r\n        return null; \r\n    }\r\n\r\n    getVariableName(node: Node, context: ExecContext): string | null {\r\n        return \"\";\r\n    }\r\n}\r\n","import { CallExpr, Call, UnaryOperator, VariableExpr } from \"../wgsl_ast.js\";\r\nimport { Data, TypedData, TextureData, ScalarData, VectorData, MatrixData } from \"../wgsl_ast.js\";\r\nimport { ExecContext } from \"./exec_context.js\";\r\nimport { ExecInterface } from \"./exec_interface.js\";\r\nimport { ArrayInfo, TypeInfo } from \"../reflect/info.js\";\r\n\r\nexport class BuiltinFunctions {\r\n    exec: ExecInterface;\r\n\r\n    constructor(exec: ExecInterface) {\r\n        this.exec = exec;\r\n    }\r\n\r\n    getTypeInfo(type: string): TypeInfo | null {\r\n        return this.exec.getTypeInfo(type);\r\n    }\r\n\r\n    // Logical Built-in Functions\r\n    All(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        let isTrue = true;\r\n        if (value instanceof VectorData) {\r\n            value.data.forEach((x: any) => { if (!x) isTrue = false; });\r\n            return new ScalarData(isTrue ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n        }\r\n        throw new Error(`All() expects a vector argument. Line ${node.line}`);\r\n    }\r\n\r\n    Any(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            const res = value.data.some((v: any) => v);\r\n            return new ScalarData(res ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n        }\r\n        throw new Error(`Any() expects a vector argument. Line ${node.line}`);\r\n    }\r\n\r\n    Select(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // select(false, true, condition)\r\n        const condition = this.exec.evalExpression(node.args[2], context);\r\n        if (!(condition instanceof ScalarData)) {\r\n            throw new Error(`Select() expects a bool condition. Line ${node.line}`);\r\n        }\r\n        if (!condition.value) {\r\n            return this.exec.evalExpression(node.args[0], context);\r\n        } else {\r\n            return this.exec.evalExpression(node.args[1], context);\r\n        }\r\n    }\r\n\r\n    // Array Built-in Functions\r\n    ArrayLength(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let arrayArg = node.args[0];\r\n        // TODO: handle \"&\" operator\r\n        if (arrayArg instanceof UnaryOperator) {\r\n            arrayArg = (arrayArg as UnaryOperator).right;\r\n        }\r\n        const arrayData = this.exec.evalExpression(arrayArg, context);\r\n        if (arrayData instanceof TypedData && arrayData.typeInfo.size === 0) {\r\n            const ta = arrayData.typeInfo as ArrayInfo;\r\n            const count = arrayData.buffer.byteLength / ta.stride;\r\n            return new ScalarData(count, this.getTypeInfo(\"u32\"));\r\n        }\r\n        return new ScalarData(arrayData.typeInfo.size, this.getTypeInfo(\"u32\"));\r\n    }\r\n\r\n    // Numeric Built-in Functions\r\n    Abs(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.abs(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.abs(s.value), s.typeInfo);\r\n    }\r\n\r\n    Acos(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.acos(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.acos(s.value), value.typeInfo);\r\n    }\r\n\r\n    Acosh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.acosh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.acosh(s.value), value.typeInfo);\r\n    }\r\n\r\n    Asin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.asin(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.asin(s.value), value.typeInfo);\r\n    }\r\n\r\n    Asinh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.asinh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.asinh(s.value), value.typeInfo);\r\n    }\r\n\r\n    Atan(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.atan(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.atan(s.value), value.typeInfo);\r\n    }\r\n\r\n    Atanh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.atanh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.atanh(s.value), value.typeInfo);\r\n    }\r\n\r\n    Atan2(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const y = this.exec.evalExpression(node.args[0], context);\r\n        const x = this.exec.evalExpression(node.args[1], context);\r\n        if (y instanceof VectorData && x instanceof VectorData) {\r\n            return new VectorData(y.data.map((v: number, i: number) => Math.atan2(v, x.data[i])), y.typeInfo);\r\n        }\r\n        const ys = y as ScalarData;\r\n        const xs = x as ScalarData;\r\n        return new ScalarData(Math.atan2(ys.value, xs.value), y.typeInfo);\r\n    }\r\n\r\n    Ceil(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.ceil(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.ceil(s.value), value.typeInfo);\r\n    }\r\n\r\n    _clamp(value: number, min: number, max: number): number {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n\r\n    Clamp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const min = this.exec.evalExpression(node.args[1], context);\r\n        const max = this.exec.evalExpression(node.args[2], context);\r\n        if (value instanceof VectorData && min instanceof VectorData && max instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number, i: number) => this._clamp(v, min.data[i], max.data[i])), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        const minS = min as ScalarData;\r\n        const maxS = max as ScalarData\r\n        return new ScalarData(this._clamp(s.value, minS.value, maxS.value), value.typeInfo);\r\n    }\r\n\r\n    Cos(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.cos(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.cos(s.value), value.typeInfo);\r\n    }\r\n\r\n    Cosh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.cosh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.cos(s.value), value.typeInfo);\r\n    }\r\n\r\n    CountLeadingZeros(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.clz32(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.clz32(s.value), value.typeInfo);\r\n    }\r\n\r\n    _countOneBits(value: number): number {\r\n        let count = 0;\r\n        while (value !== 0) {\r\n            if (value & 1) {\r\n                count++;\r\n            }\r\n            value >>= 1;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    CountOneBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._countOneBits(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._countOneBits(s.value), value.typeInfo);\r\n    }\r\n\r\n    _countTrailingZeros(value: number): number {\r\n        if (value === 0) {\r\n            return 32; // Special case for 0\r\n        }\r\n        let count = 0;\r\n        while ((value & 1) === 0) {\r\n            value >>= 1;\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    CountTrailingZeros(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._countTrailingZeros(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._countTrailingZeros(s.value), value.typeInfo);\r\n    }\r\n\r\n    Cross(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            if (l.data.length !== 3 || r.data.length !== 3) {\r\n                console.error(`Cross() expects 3D vectors. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            const lv = l.data;\r\n            const rv = r.data;\r\n            return new VectorData([\r\n                lv[1] * rv[2] - rv[1] * lv[2],\r\n                lv[2] * rv[0] - rv[2] * lv[0],\r\n                lv[0] * rv[1] - rv[0] * lv[1],\r\n            ], l.typeInfo);\r\n        }\r\n        console.error(`Cross() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Degrees(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const radToDeg = 180.0 / Math.PI;\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v * radToDeg), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value * radToDeg, this.getTypeInfo(\"f32\"));\r\n    }\r\n\r\n    Determinant(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const m = this.exec.evalExpression(node.args[0], context);\r\n        if (m instanceof MatrixData) {\r\n            const mv = m.data;\r\n            const mt = m.typeInfo.getTypeName();\r\n            const isHalf = mt.endsWith(\"h\");\r\n            const formatType = isHalf ? this.getTypeInfo(\"f16\") : this.getTypeInfo(\"f32\");\r\n            if (mt === \"mat2x2\" || mt === \"mat2x2f\" || mt === \"mat2x2h\") {\r\n                return new ScalarData(mv[0] * mv[3] - mv[1] * mv[2], formatType);\r\n            } else if (mt === \"mat2x3\" || mt === \"mat2x3f\" || mt === \"mat2x3h\") {\r\n                return new ScalarData(mv[0] * (mv[4] * mv[8] - mv[5] * mv[7]) -\r\n                        mv[1] * (mv[3] * mv[8] - mv[5] * mv[6]) + mv[2] * (mv[3] * mv[7] - mv[4] * mv[6]), formatType);\r\n            } else if (mt === \"mat2x4\" || mt === \"mat2x4f\" || mt === \"mat2x4h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat3x2\" || mt === \"mat3x2f\" || mt === \"mat3x2h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat3x3\" || mt === \"mat3x3f\" || mt === \"mat3x3h\") {\r\n                return new ScalarData(mv[0] * (mv[4] * mv[8] - mv[5] * mv[7]) -\r\n                        mv[1] * (mv[3] * mv[8] - mv[5] * mv[6]) + mv[2] * (mv[3] * mv[7] - mv[4] * mv[6]), formatType);\r\n            } else if (mt === \"mat3x4\" || mt === \"mat3x4f\" || mt === \"mat3x4h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat4x2\" || mt === \"mat4x2f\" || mt === \"mat4x2h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat4x3\" || mt === \"mat4x3f\" || mt === \"mat4x3h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            } else if (mt === \"mat4x4\" || mt === \"mat4x4f\" || mt === \"mat4x4h\") {\r\n                console.error(`TODO: Determinant for ${mt}`);\r\n            }\r\n        }\r\n        console.error(`Determinant expects a matrix argument. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Distance(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            let sum = 0;\r\n            for (let i = 0; i < l.data.length; ++i) {\r\n                sum += (l.data[i] - r.data[i]) * (l.data[i] - r.data[i]);\r\n            }\r\n            return new ScalarData(Math.sqrt(sum), this.getTypeInfo(\"f32\"));\r\n        }\r\n        const ls = l as ScalarData;\r\n        const rs = r as ScalarData;\r\n        return new ScalarData(Math.abs(ls.value - rs.value), l.typeInfo);\r\n    }\r\n\r\n    _dot(e1: Int32Array | Uint32Array | Float32Array, e2: Int32Array | Uint32Array | Float32Array) {\r\n        let dot = 0;\r\n        for (let i = 0; i < e1.length; ++i) {\r\n            dot += e2[i] * e1[i];\r\n        }\r\n        return dot;\r\n    }\r\n\r\n    Dot(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            return new ScalarData(this._dot(l.data, r.data), this.getTypeInfo(\"f32\"));\r\n        }\r\n        console.error(`Dot() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Dot4U8Packed(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dot4U8Packed. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Dot4I8Packed(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dot4I8Packed. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Exp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.exp(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.exp(s.value), value.typeInfo);\r\n    }\r\n\r\n    Exp2(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.pow(2, v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.pow(2, s.value), value.typeInfo);\r\n    }\r\n\r\n    ExtractBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const offset = this.exec.evalExpression(node.args[1], context);\r\n        const count = this.exec.evalExpression(node.args[2], context);\r\n        if (offset.typeInfo.name !== \"u32\" && offset.typeInfo.name !== \"x32\") {\r\n            console.error(`ExtractBits() expects an i32 offset argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n        if (count.typeInfo.name !== \"u32\" && count.typeInfo.name !== \"x32\") {\r\n            console.error(`ExtractBits() expects an i32 count argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const o = (offset as ScalarData).value;\r\n        const c = (count as ScalarData).value;\r\n\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => (v >> o) & ((1 << c) - 1)), value.typeInfo);\r\n        }\r\n\r\n        if (value.typeInfo.name !== \"i32\" && value.typeInfo.name !== \"x32\") {\r\n            console.error(`ExtractBits() expects an i32 argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n        const v = (value as ScalarData).value;\r\n        return new ScalarData((v >> o) & ((1 << c) - 1), this.getTypeInfo(\"i32\"));\r\n    }\r\n\r\n    FaceForward(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const e1 = this.exec.evalExpression(node.args[0], context);\r\n        const e2 = this.exec.evalExpression(node.args[1], context);\r\n        const n = this.exec.evalExpression(node.args[2], context);\r\n        if (e1 instanceof VectorData && e2 instanceof VectorData && n instanceof VectorData) {\r\n            const dot = this._dot(e2.data, n.data);\r\n            if (dot < 0) {\r\n                return new VectorData(Array.from(e1.data), e1.typeInfo);\r\n            }\r\n            return new VectorData(e1.data.map((v: number) => -v), e1.typeInfo);\r\n        }\r\n        console.error(`FaceForward() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _firstLeadingBit(s: number): number {\r\n        if (s === 0) {\r\n            return -1;\r\n        }\r\n        return 31 - Math.clz32(s);  // clz32: count leading zeros\r\n    }\r\n\r\n    FirstLeadingBit(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._firstLeadingBit(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._firstLeadingBit(s.value), value.typeInfo);\r\n    }\r\n\r\n    _firstTrailingBit(s: number): number {\r\n        if (s === 0) {\r\n            return -1;\r\n        }\r\n        return Math.log2(s & -s); // n & -n isolates the lowest set bit.  Math.log2 gives its position.\r\n    }\r\n\r\n    FirstTrailingBit(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => this._firstTrailingBit(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(this._firstTrailingBit(s.value), value.typeInfo);\r\n    }\r\n\r\n    Floor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.floor(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.floor(s.value), value.typeInfo);\r\n    }\r\n\r\n    Fma(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const a = this.exec.evalExpression(node.args[0], context);\r\n        const b = this.exec.evalExpression(node.args[1], context);\r\n        const c = this.exec.evalExpression(node.args[2], context);\r\n        if (a instanceof VectorData && b instanceof VectorData && c instanceof VectorData) {\r\n            if (a.data.length !== b.data.length || a.data.length !== c.data.length) {\r\n                console.error(`Fma() expects vectors of the same length. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            return new VectorData(a.data.map((v: number, i: number) => v * b.data[i] + c.data[i]), a.typeInfo);\r\n        }\r\n        const av = a as ScalarData;\r\n        const bv = b as ScalarData;\r\n        const cv = c as ScalarData;\r\n        return new ScalarData(av.value * bv.value + cv.value, av.typeInfo);\r\n    }\r\n\r\n    Fract(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v - Math.floor(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value - Math.floor(s.value), value.typeInfo);\r\n    }\r\n\r\n    Frexp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: frexp. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    InsertBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        const insert = this.exec.evalExpression(node.args[1], context);\r\n        const offset = this.exec.evalExpression(node.args[2], context);\r\n        const count = this.exec.evalExpression(node.args[3], context);\r\n\r\n        if (offset.typeInfo.name !== \"u32\" && offset.typeInfo.name !== \"x32\") {\r\n            console.error(`InsertBits() expects an i32 offset argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const o = (offset as ScalarData).value;\r\n        const c = (count as ScalarData).value;\r\n        const mask = ((1 << c) - 1) << o;\r\n        const invMask = ~mask;\r\n\r\n        if (value instanceof VectorData && insert instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number, i: number) => {\r\n                return (v & invMask) | ((insert.data[i] << o) & mask);\r\n            }), value.typeInfo);\r\n        }\r\n        const v = (value as ScalarData).value;\r\n        const i = (insert as ScalarData).value;\r\n        return new ScalarData((v & invMask) | ((i << o) & mask), value.typeInfo);\r\n    }\r\n\r\n    InverseSqrt(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => 1 / Math.sqrt(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(1 / Math.sqrt(s.value), value.typeInfo);\r\n    }\r\n\r\n    Ldexp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: ldexp. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Length(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            let sum = 0;\r\n            value.data.forEach((v: number) => { sum += v * v; });\r\n            return new ScalarData(Math.sqrt(sum), this.getTypeInfo(\"f32\"));\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.abs(s.value), value.typeInfo);\r\n    }\r\n\r\n    Log(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.log(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.log(s.value), value.typeInfo);\r\n    }\r\n\r\n    Log2(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.log2(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData\r\n        return new ScalarData(Math.log2(s.value), value.typeInfo);\r\n    }\r\n\r\n    Max(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            return new VectorData(l.data.map((v: number, i: number) => Math.max(v, r.data[i])), l.typeInfo);\r\n        }\r\n        const ls = l as ScalarData;\r\n        const rs = r as ScalarData;\r\n        return new ScalarData(Math.max(ls.value, rs.value), l.typeInfo);\r\n    }\r\n\r\n    Min(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const l = this.exec.evalExpression(node.args[0], context);\r\n        const r = this.exec.evalExpression(node.args[1], context);\r\n        if (l instanceof VectorData && r instanceof VectorData) {\r\n            return new VectorData(l.data.map((v: number, i: number) => Math.min(v, r.data[i])), l.typeInfo);\r\n        }\r\n        const ls = l as ScalarData;\r\n        const rs = r as ScalarData;\r\n        return new ScalarData(Math.min(ls.value, rs.value), l.typeInfo);\r\n    }\r\n\r\n    Mix(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const x = this.exec.evalExpression(node.args[0], context);\r\n        const y = this.exec.evalExpression(node.args[1], context);\r\n        const a = this.exec.evalExpression(node.args[2], context);\r\n        if (x instanceof VectorData && y instanceof VectorData && a instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => x.data[i] * (1 - a.data[i]) + y.data[i] * a.data[i]), x.typeInfo);\r\n        }\r\n        const xs = x as ScalarData;\r\n        const ys = y as ScalarData;\r\n        const as = a as ScalarData;\r\n        return new ScalarData(xs.value * (1 - as.value) + ys.value * as.value, x.typeInfo);\r\n    }\r\n\r\n    Modf(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const x = this.exec.evalExpression(node.args[0], context);\r\n        const y = this.exec.evalExpression(node.args[1], context);\r\n        if (x instanceof VectorData && y instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => v % y.data[i]), x.typeInfo);\r\n        }\r\n        const xs = x as ScalarData;\r\n        const ys = y as ScalarData;\r\n        return new ScalarData(xs.value % ys.value, x.typeInfo);\r\n    }\r\n\r\n    Normalize(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            const length = (this.Length(node, context) as ScalarData).value;\r\n            return new VectorData(value.data.map((v: number) => v / length), value.typeInfo);\r\n        }\r\n        console.error(`Normalize() expects a vector argument. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Pow(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const x = this.exec.evalExpression(node.args[0], context);\r\n        const y = this.exec.evalExpression(node.args[1], context);\r\n        if (x instanceof VectorData && y instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => Math.pow(v, y.data[i])), x.typeInfo);\r\n        }\r\n        const xs = x as ScalarData;\r\n        const ys = y as ScalarData;\r\n        return new ScalarData(Math.pow(xs.value, ys.value), x.typeInfo);\r\n    }\r\n\r\n    QuantizeToF16(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // TODO: actually quantize the f32 to f16\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value, value.typeInfo);\r\n    }\r\n\r\n    Radians(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => v * Math.PI / 180), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(s.value * Math.PI / 180, this.getTypeInfo(\"f32\"));\r\n    }\r\n\r\n    Reflect(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // e1 - 2 * dot(e2, e1) * e2\r\n        let e1 = this.exec.evalExpression(node.args[0], context);\r\n        let e2 = this.exec.evalExpression(node.args[1], context);\r\n        if (e1 instanceof VectorData && e2 instanceof VectorData) {\r\n            const dot = this._dot(e1.data, e2.data);\r\n            return new VectorData(e1.data.map((v: number, i: number) => v - 2 * dot * e2.data[i]), e1.typeInfo);\r\n        }\r\n        console.error(`Reflect() expects vector arguments. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Refract(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let e1 = this.exec.evalExpression(node.args[0], context);\r\n        let e2 = this.exec.evalExpression(node.args[1], context);\r\n        let e3 = this.exec.evalExpression(node.args[2], context);\r\n        if (e1 instanceof VectorData && e2 instanceof VectorData && e3 instanceof ScalarData) {\r\n            const dot = this._dot(e2.data, e1.data);\r\n            return new VectorData(e1.data.map((v: number, i: number) => {\r\n                const k = 1.0 - e3.value * e3.value * (1.0 - dot * dot);\r\n                if (k < 0) {\r\n                    return 0;\r\n                }\r\n                const sqrtK = Math.sqrt(k);\r\n                return e3.value * v - (e3.value * dot + sqrtK) * e2.data[i];\r\n            }), e1.typeInfo);\r\n        }\r\n\r\n        console.error(`Refract() expects vector arguments and a scalar argument. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    ReverseBits(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: reverseBits. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    Round(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.round(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.round(s.value), value.typeInfo);\r\n    }\r\n\r\n    Saturate(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.min(Math.max(v, 0), 1)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.min(Math.max(s.value, 0), 1), value.typeInfo);\r\n    }\r\n\r\n    Sign(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sign(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sign(s.value), value.typeInfo);\r\n    }\r\n\r\n    Sin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sin(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sin(s.value), value.typeInfo);\r\n    }\r\n\r\n    Sinh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sinh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sinh(s.value), value.typeInfo);\r\n    }\r\n\r\n    _smoothstep(edge0: number, edge1: number, x: number): number {\r\n        const t = Math.min(Math.max((x - edge0) / (edge1 - edge0), 0), 1);\r\n        return t * t * (3 - 2 * t);\r\n    }\r\n\r\n    SmoothStep(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const edge0 = this.exec.evalExpression(node.args[0], context);\r\n        const edge1 = this.exec.evalExpression(node.args[1], context);\r\n        const x = this.exec.evalExpression(node.args[2], context);\r\n        if (x instanceof VectorData && edge0 instanceof VectorData && edge1 instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => this._smoothstep(edge0.data[i], edge1.data[i], v)), x.typeInfo);\r\n        }\r\n        const e0 = edge0 as ScalarData;\r\n        const e1 = edge1 as ScalarData;\r\n        const xS = x as ScalarData;\r\n        return new ScalarData(this._smoothstep(e0.value, e1.value, xS.value), x.typeInfo);\r\n    }\r\n\r\n    Sqrt(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.sqrt(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.sqrt(s.value), value.typeInfo);\r\n    }\r\n\r\n    Step(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const edge = this.exec.evalExpression(node.args[0], context);\r\n        const x = this.exec.evalExpression(node.args[1], context);\r\n        if (x instanceof VectorData && edge instanceof VectorData) {\r\n            return new VectorData(x.data.map((v: number, i: number) => v < edge.data[i] ? 0 : 1), x.typeInfo);\r\n        }\r\n        const e = edge as ScalarData;\r\n        const s = x as ScalarData;\r\n        return new ScalarData(s.value < e.value ? 0 : 1, e.typeInfo);\r\n    }\r\n\r\n    Tan(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.tan(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.tan(s.value), value.typeInfo);\r\n    }\r\n\r\n    Tanh(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.tanh(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData;\r\n        return new ScalarData(Math.tanh(s.value), value.typeInfo);\r\n    }\r\n\r\n    _getTransposeType(t: TypeInfo): TypeInfo {\r\n        const tname = t.getTypeName();\r\n        if (tname === \"mat2x2f\" || tname === \"mat2x2h\") {\r\n            return t;\r\n        } else if (tname === \"mat2x3f\") {\r\n            return this.getTypeInfo(\"mat3x2f\");\r\n        } else if (tname === \"mat2x3h\") {\r\n            return this.getTypeInfo(\"mat3x2h\");\r\n        } else if (tname === \"mat2x4f\") {\r\n            return this.getTypeInfo(\"mat4x2f\");\r\n        } else if (tname === \"mat2x4h\") {\r\n            return this.getTypeInfo(\"mat4x2h\");\r\n        } else if (tname === \"mat3x2f\") {\r\n            return this.getTypeInfo(\"mat2x3f\");\r\n        } else if (tname === \"mat3x2h\") {\r\n            return this.getTypeInfo(\"mat2x3h\");\r\n        } else if (tname === \"mat3x3f\" || tname === \"mat3x3h\") {\r\n            return t;\r\n        } else if (tname === \"mat3x4f\") {\r\n            return this.getTypeInfo(\"mat4x3f\");\r\n        } else if (tname === \"mat3x4h\") {\r\n            return this.getTypeInfo(\"mat4x3h\");\r\n        } else if (tname === \"mat4x2f\") {\r\n            return this.getTypeInfo(\"mat2x4f\");\r\n        } else if (tname === \"mat4x2h\") {\r\n            return this.getTypeInfo(\"mat2x4h\");\r\n        } else if (tname === \"mat4x3f\") {\r\n            return this.getTypeInfo(\"mat3x4f\");\r\n        } else if (tname === \"mat4x3h\") {\r\n            return this.getTypeInfo(\"mat3x4h\");\r\n        } else if (tname === \"mat4x4f\" || tname === \"mat4x4h\") {\r\n            return t;\r\n        }\r\n\r\n        console.error(`Invalid matrix type ${tname}`);\r\n        return t;\r\n    }\r\n\r\n    Transpose(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const m = this.exec.evalExpression(node.args[0], context);\r\n        if (!(m instanceof MatrixData)) {\r\n            console.error(`Transpose() expects a matrix argument. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const ttype = this._getTransposeType(m.typeInfo);\r\n\r\n        if (m.typeInfo.name === \"mat2x2\" || m.typeInfo.name === \"mat2x2f\" || m.typeInfo.name === \"mat2x2h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[2], mv[1], mv[3]], ttype);\r\n        } else if (m.typeInfo.name === \"mat2x3\" || m.typeInfo.name === \"mat2x3f\" || m.typeInfo.name === \"mat2x3h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[3], mv[6], mv[1], mv[4], mv[7]], ttype);\r\n        } else if (m.typeInfo.name === \"mat2x4\" || m.typeInfo.name === \"mat2x4f\" || m.typeInfo.name === \"mat2x4h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[12], mv[1], mv[5], mv[9], mv[13]], ttype);\r\n        } else if (m.typeInfo.name === \"mat3x2\" || m.typeInfo.name === \"mat3x2f\" || m.typeInfo.name === \"mat3x2h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[3], mv[1], mv[4], mv[2], mv[5]], ttype);\r\n        } else if (m.typeInfo.name === \"mat3x3\" || m.typeInfo.name === \"mat3x3f\" || m.typeInfo.name === \"mat3x3h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[3], mv[6], mv[1], mv[4], mv[7], mv[2], mv[5], mv[8]], ttype);\r\n        } else if (m.typeInfo.name === \"mat3x4\" || m.typeInfo.name === \"mat3x4f\" || m.typeInfo.name === \"mat3x4h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[12], mv[1], mv[5], mv[9], mv[13], mv[2], mv[6], mv[10], mv[14]], ttype);\r\n        } else if (m.typeInfo.name === \"mat4x2\" || m.typeInfo.name === \"mat4x2f\" || m.typeInfo.name === \"mat4x2h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[1], mv[5], mv[2], mv[6]], ttype);\r\n        } else if (m.typeInfo.name === \"mat4x3\" || m.typeInfo.name === \"mat4x3f\" || m.typeInfo.name === \"mat4x3h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[1], mv[5], mv[9], mv[2], mv[6], mv[10]], ttype);\r\n        } else if (m.typeInfo.name === \"mat4x4\" || m.typeInfo.name === \"mat4x4f\" || m.typeInfo.name === \"mat4x4h\") {\r\n            const mv = m.data;\r\n            return new MatrixData([mv[0], mv[4], mv[8], mv[12],\r\n                                   mv[1], mv[5], mv[9], mv[13],\r\n                                   mv[2], mv[6], mv[10], mv[14],\r\n                                   mv[3], mv[7], mv[11], mv[15]], ttype);\r\n        }\r\n\r\n        console.error(`Invalid matrix type ${m.typeInfo.name}`);\r\n        return null;\r\n    }\r\n\r\n    Trunc(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const value = this.exec.evalExpression(node.args[0], context);\r\n        if (value instanceof VectorData) {\r\n            return new VectorData(value.data.map((v: number) => Math.trunc(v)), value.typeInfo);\r\n        }\r\n        const s = value as ScalarData\r\n        return new ScalarData(Math.trunc(s.value), value.typeInfo);\r\n    }\r\n\r\n    // Derivative Built-in Functions\r\n    Dpdx(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dpdx. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    DpdxCoarse(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(`TODO: dpdxCoarse. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    DpdxFine(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdxFine\");\r\n        return null;\r\n    }\r\n\r\n    Dpdy(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdy\");\r\n        return null;\r\n    }\r\n\r\n    DpdyCoarse(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdyCoarse\");\r\n        return null;\r\n    }\r\n\r\n    DpdyFine(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: dpdyFine\");\r\n        return null;\r\n    }\r\n\r\n    Fwidth(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: fwidth\");\r\n        return null;\r\n    }\r\n\r\n    FwidthCoarse(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: fwidthCoarse\");\r\n        return null;\r\n    }\r\n\r\n    FwidthFine(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: fwidthFine\");\r\n        return null;\r\n    }\r\n\r\n    // Texture Built-in Functions\r\n    TextureDimensions(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        const level = node.args.length > 1 ? (this.exec.evalExpression(node.args[1], context) as ScalarData).value : 0;\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                if (level < 0 || level >= texture.mipLevelCount) {\r\n                    console.error(`Invalid mip level for textureDimensions. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                const textureSize = texture.getMipLevelSize(level);\r\n\r\n                const dimension = texture.dimension;\r\n\r\n                if (dimension === \"1d\") {\r\n                    return new ScalarData(textureSize[0], this.getTypeInfo(\"u32\"));\r\n                } else if (dimension === \"3d\") {\r\n                    return new VectorData(textureSize, this.getTypeInfo(\"vec3u\"));\r\n                } else if (dimension === \"2d\") {\r\n                    return new VectorData(textureSize.slice(0, 2), this.getTypeInfo(\"vec2u\"));\r\n                } else {\r\n                    console.error(`Invalid texture dimension ${dimension} not found. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureDimensions. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureGather(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureGather\");\r\n        return null;\r\n    }\r\n\r\n    TextureGatherCompare(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureGatherCompare\");\r\n        return null;\r\n    }\r\n\r\n    TextureLoad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        const uv = this.exec.evalExpression(node.args[1], context);\r\n        const level = node.args.length > 2 ? (this.exec.evalExpression(node.args[2], context) as ScalarData).value : 0;\r\n\r\n        // TODO: non-vec2 UVs, for non-2D textures\r\n        if (!(uv instanceof VectorData) || uv.data.length !== 2) {\r\n            console.error(`Invalid UV argument for textureLoad. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                const x = Math.floor(uv.data[0]);\r\n                const y = Math.floor(uv.data[1]);\r\n                if (x < 0 || x >= texture.width || y < 0 || y >= texture.height) {\r\n                    console.error(`Texture ${textureName} out of bounds. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                const texel = texture.getPixel(x, y, 0, level);\r\n                if (texel === null) {\r\n                    console.error(`Invalid texture format for textureLoad. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                return new VectorData(texel, this.getTypeInfo(\"vec4f\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        console.error(`Invalid texture argument for textureLoad. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureNumLayers(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                return new ScalarData(texture.depthOrArrayLayers, this.getTypeInfo(\"u32\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureNumLayers. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureNumLevels(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                return new ScalarData(texture.mipLevelCount, this.getTypeInfo(\"u32\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureNumLevels. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureNumSamples(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                return new ScalarData(texture.sampleCount, this.getTypeInfo(\"u32\"));\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n        console.error(`Invalid texture argument for textureNumSamples. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    TextureSample(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSample\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleBias(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleBias\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleCompare(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleCompare\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleCompareLevel(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleCompareLevel\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleGrad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleGrad\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleLevel(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleLevel\");\r\n        return null;\r\n    }\r\n\r\n    TextureSampleBaseClampToEdge(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: textureSampleBaseClampToEdge\");\r\n        return null;\r\n    }\r\n\r\n    TextureStore(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        const textureArg = node.args[0];\r\n        const uv = this.exec.evalExpression(node.args[1], context);\r\n        const index = (node.args.length === 4) ? (this.exec.evalExpression(node.args[2], context) as ScalarData).value : 0;\r\n        const value = (node.args.length === 4) ? (this.exec.evalExpression(node.args[3], context) as VectorData).data :\r\n            (this.exec.evalExpression(node.args[2], context) as VectorData).data;\r\n\r\n        if (value.length !== 4) {\r\n            console.error(`Invalid value argument for textureStore. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        // TODO: non-vec2 UVs, for non-2D textures\r\n        if (!(uv instanceof VectorData) || uv.data.length !== 2) {\r\n            console.error(`Invalid UV argument for textureStore. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (textureArg instanceof VariableExpr) {\r\n            const textureName = (textureArg as VariableExpr).name;\r\n            const texture = context.getVariableValue(textureName);\r\n            if (texture instanceof TextureData) {\r\n                const textureSize = texture.getMipLevelSize(0);\r\n                const x = Math.floor(uv.data[0]);\r\n                const y = Math.floor(uv.data[1]);\r\n                if (x < 0 || x >= textureSize[0] || y < 0 || y >= textureSize[1]) {\r\n                    console.error(`Texture ${textureName} out of bounds. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                texture.setPixel(x, y, 0, index, Array.from(value));\r\n\r\n                return null;\r\n            } else {\r\n                console.error(`Texture ${textureName} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n        }\r\n\r\n        console.error(`Invalid texture argument for textureStore. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    // Atomic Built-in Functions\r\n    AtomicLoad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n        return currentValue;\r\n    }\r\n\r\n    AtomicStore(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    AtomicAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value += value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicSub(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value -= value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicMax(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = Math.max(currentValue.value, value.value);\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicMin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = Math.min(currentValue.value, value.value);\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicAnd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = currentValue.value & value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicOr(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = currentValue.value | value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicXor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = currentValue.value ^ value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicExchange(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        let l = node.args[0];\r\n        if (l instanceof UnaryOperator) {\r\n            l = l.right;\r\n        }\r\n\r\n        const name = this.exec.getVariableName(l, context);\r\n        const v = context.getVariable(name);\r\n\r\n        let r = node.args[1];\r\n        const value = this.exec.evalExpression(r, context);\r\n\r\n        const currentValue = v.value.getSubData(this.exec, l.postfix, context);\r\n\r\n        const originalValue = new ScalarData((currentValue as ScalarData).value, currentValue.typeInfo);\r\n\r\n        if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n            currentValue.value = value.value;\r\n        }\r\n\r\n        if (v.value instanceof TypedData) {\r\n            v.value.setDataValue(this.exec, currentValue, l.postfix, context);\r\n        }\r\n\r\n        return originalValue;\r\n    }\r\n\r\n    AtomicCompareExchangeWeak(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: atomicCompareExchangeWeak\");\r\n        return null;\r\n    }\r\n\r\n    // Data Packing Built-in Functions\r\n    Pack4x8snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4x8snorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack4x8unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4x8unorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack4xI8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4xI8\");\r\n        return null;\r\n    }\r\n\r\n    Pack4xU8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4xU8\");\r\n        return null;\r\n    }\r\n\r\n    Pack4x8Clamp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4x8Clamp\");\r\n        return null;\r\n    }\r\n\r\n    Pack4xU8Clamp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack4xU8Clamp\");\r\n        return null;\r\n    }\r\n\r\n    Pack2x16snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack2x16snorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack2x16unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack2x16unorm\");\r\n        return null;\r\n    }\r\n\r\n    Pack2x16float(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: pack2x16float\");\r\n        return null;\r\n    }\r\n\r\n    // Data Unpacking Built-in Functions\r\n    Unpack4x8snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4x8snorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack4x8unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4x8unorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack4xI8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4xI8\");\r\n        return null;\r\n    }\r\n\r\n    Unpack4xU8(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack4xU8\");\r\n        return null;\r\n    }\r\n\r\n    Unpack2x16snorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack2x16snorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack2x16unorm(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack2x16unorm\");\r\n        return null;\r\n    }\r\n\r\n    Unpack2x16float(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: unpack2x16float\");\r\n        return null;\r\n    }\r\n\r\n    // Synchronization Functions\r\n    StorageBarrier(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    TextureBarrier(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    WorkgroupBarrier(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    WorkgroupUniformLoad(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        // Execution is single threaded, barriers not necessary.\r\n        return null;\r\n    }\r\n\r\n    // Subgroup Functions\r\n    SubgroupAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAdd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupExclusiveAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupExclusiveAdd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupInclusiveAdd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupInclusiveAdd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupAll(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAll\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupAnd(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAnd\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupAny(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupAny\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupBallot(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupBallot\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupBroadcast(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupBroadcast\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupBroadcastFirst(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupBroadcastFirst\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupElect(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupElect\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupMax(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupMax\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupMin(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupMin\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupMul(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupMul\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupExclusiveMul(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupExclusiveMul\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupInclusiveMul(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupInclusiveMul\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupOr(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupOr\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffle(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffle\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffleDown(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffleDown\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffleUp(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffleUp\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupShuffleXor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupShuffleXor\");\r\n        return null;\r\n    }\r\n\r\n    SubgroupXor(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: subgroupXor\");\r\n        return null;\r\n    }\r\n\r\n    // Quad Functions\r\n    QuadBroadcast(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadBroadcast\");\r\n        return null;\r\n    }\r\n\r\n    QuadSwapDiagonal(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadSwapDiagonal\");\r\n        return null;\r\n    }\r\n\r\n    QuadSwapX(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadSwapX\");\r\n        return null;\r\n    }\r\n\r\n    QuadSwapY(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        console.error(\"TODO: quadSwapY\");\r\n        return null;\r\n    }\r\n}\r\n","import { TypeInfo } from '../reflect/info';\r\n\r\nexport const VectorTypeSize = {\r\n    \"vec2\": 2, \"vec2f\": 2, \"vec2i\": 2, \"vec2u\": 2, \"vec2b\": 2, \"vec2h\": 2,\r\n    \"vec3\": 3, \"vec3f\": 3, \"vec3i\": 3, \"vec3u\": 3, \"vec3b\": 3, \"vec3h\": 3,\r\n    \"vec4\": 4, \"vec4f\": 4, \"vec4i\": 4, \"vec4u\": 4, \"vec4b\": 4, \"vec4h\": 4\r\n};\r\n\r\nexport const MatrixTypeSize = {\r\n    \"mat2x2\": [2, 2, 4], \"mat2x2f\": [2, 2, 4], \"mat2x2h\": [2, 2, 4],\r\n    \"mat2x3\": [2, 3, 6], \"mat2x3f\": [2, 3, 6], \"mat2x3h\": [2, 3, 6],\r\n    \"mat2x4\": [2, 4, 8], \"mat2x4f\": [2, 4, 8], \"mat2x4h\": [2, 4, 8],\r\n    \"mat3x2\": [3, 2, 6], \"mat3x2f\": [3, 2, 6], \"mat3x2h\": [3, 2, 6],\r\n    \"mat3x3\": [3, 3, 9], \"mat3x3f\": [3, 3, 9], \"mat3x3h\": [3, 3, 9],\r\n    \"mat3x4\": [3, 4, 12], \"mat3x4f\": [3, 4, 12], \"mat3x4h\": [3, 4, 12],\r\n    \"mat4x2\": [4, 2, 8], \"mat4x2f\": [4, 2, 8], \"mat4x2h\": [4, 2, 8],\r\n    \"mat4x3\": [4, 3, 12], \"mat4x3f\": [4, 3, 12], \"mat4x3h\": [4, 3, 12],\r\n    \"mat4x4\": [4, 4, 16], \"mat4x4f\": [4, 4, 16], \"mat4x4h\": [4, 4, 16]\r\n};\r\n\r\nexport const MatrixTransposeType = {\r\n    \"mat2x2\": \"mat2x2\", \"mat2x2f\": \"mat2x2f\", \"mat2x2h\": \"mat2x2h\",\r\n    \"mat2x3\": \"mat3x2\", \"mat2x3f\": \"mat3x2f\", \"mat2x3h\": \"mat3x2h\",\r\n    \"mat2x4\": \"mat4x2\", \"mat2x4f\": \"mat4x2f\", \"mat2x4h\": \"mat4x2h\",\r\n    \"mat3x2\": \"mat2x3\", \"mat3x2f\": \"mat2x3f\", \"mat3x2h\": \"mat2x3h\",\r\n    \"mat3x3\": \"mat3x3\", \"mat3x3f\": \"mat3x3f\", \"mat3x3h\": \"mat3x3h\",\r\n    \"mat3x4\": \"mat4x3\", \"mat3x4f\": \"mat4x3f\", \"mat3x4h\": \"mat4x3h\",\r\n    \"mat4x2\": \"mat2x4\", \"mat4x2f\": \"mat2x4f\", \"mat4x2h\": \"mat2x4h\",\r\n    \"mat4x3\": \"mat4x3\", \"mat4x3f\": \"mat4x3f\", \"mat4x3h\": \"mat4x3h\",\r\n    \"mat4x4\": \"mat4x4\", \"mat4x4f\": \"mat4x4f\", \"mat4x4h\": \"mat4x4h\"\r\n};\r\n\r\nexport function matrixTranspose(matrix: number[], t: TypeInfo) {\r\n    if (MatrixTypeSize[t.name] === undefined) {\r\n        return null;\r\n    }\r\n\r\n    const cols = MatrixTypeSize[t.name][0];\r\n    const rows = MatrixTypeSize[t.name][1];\r\n    const result: number[] = [];\r\n\r\n    for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n            result[i * rows + j] = matrix[j * cols + i];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function matrixMultiply(matrixA: number[], t1: TypeInfo, matrixB: number[], t2: TypeInfo): number[] | null {\r\n  if (MatrixTypeSize[t1.name] === undefined || MatrixTypeSize[t2.name] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const k = MatrixTypeSize[t1.name][0];\r\n  const r = MatrixTypeSize[t1.name][1];\r\n  const c = MatrixTypeSize[t2.name][0];\r\n  const k2 = MatrixTypeSize[t2.name][1];\r\n\r\n  if (k !== k2) {\r\n    return null;\r\n  }\r\n\r\n  const result: number[] = new Array(c * r);\r\n\r\n  for (let j = 0; j < r; j++) { // Iterate through columns of result\r\n    for (let i = 0; i < c; i++) { // Iterate through rows of result\r\n      let sum = 0;\r\n      for (let l = 0; l < k; l++) {\r\n        sum += matrixA[l * r + j] * matrixB[i * k + l]; // Access column-major elements\r\n      }\r\n      result[j * c + i] = sum; // Store in column-major order\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function matrixVectorMultiply(matrix: number[], t1: TypeInfo, vector: number[], t2: TypeInfo): number[] | null {\r\n  if (MatrixTypeSize[t1.name] === undefined || VectorTypeSize[t2.name] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const cols = MatrixTypeSize[t1.name][0];\r\n  const rows = MatrixTypeSize[t1.name][1];\r\n  \r\n  if (cols !== vector.length) {\r\n    return null;\r\n  }\r\n\r\n  const resultVec = new Array(rows);\r\n  // Perform matrix-vector multiplication (column-major)\r\n  for (let i = 0; i < rows; i++) {\r\n    let sum = 0;\r\n    for (let j = 0; j < cols; j++) {\r\n      sum += matrix[j * rows + i] * vector[j]; // Access column-major element\r\n    }\r\n    resultVec[i] = sum;\r\n  }\r\n\r\n  return resultVec;\r\n}\r\n\r\nexport function vectorMatrixMultiply(vector: number[], t1: TypeInfo, matrix: number[], t2: TypeInfo): number[] | null {\r\n  if (VectorTypeSize[t1.name] === undefined || MatrixTypeSize[t2.name] === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const cols = MatrixTypeSize[t2.name][0];\r\n  const rows = MatrixTypeSize[t2.name][1];\r\n\r\n  if (rows !== vector.length) {\r\n    return null;\r\n  }\r\n\r\n  const result: number[] = [];\r\n  for (let j = 0; j < cols; j++) {\r\n    let sum = 0;\r\n    for (let i = 0; i < rows; i++) {\r\n      sum += vector[i] * matrix[i * cols + j];\r\n    }\r\n    result[j] = sum;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { Node, Type, TemplateType, Return, Break, Continue, Let, Var, Const,\r\n    If, For, While, Loop, Continuing, Assign, Increment, Struct, Override, ArrayType,\r\n    Call, Diagnostic, Alias, BinaryOperator, LiteralExpr, Expression,\r\n    VariableExpr, CallExpr, CreateExpr, ConstExpr, BitcastExpr, UnaryOperator,\r\n    ArrayIndex, StringExpr, Function, Switch, SwitchCase, Case, Default, DefaultSelector } from \"./wgsl_ast.js\";\r\nimport { Data, TypedData, TextureData, ScalarData, VectorData, MatrixData, PointerData, VoidData } from \"./wgsl_ast.js\";\r\nimport { Reflect } from \"./reflect/reflect.js\";\r\nimport { TypeInfo, StructInfo, ArrayInfo, TemplateInfo } from \"./reflect/info.js\";\r\nimport { ExecContext, FunctionRef } from \"./exec/exec_context.js\";\r\nimport { ExecInterface } from \"./exec/exec_interface.js\";\r\nimport { BuiltinFunctions } from \"./exec/builtin_functions.js\";\r\nimport { isArray, castScalar, castVector } from \"./utils/cast.js\";\r\nimport { matrixMultiply, matrixVectorMultiply, vectorMatrixMultiply, MatrixTypeSize, VectorTypeSize } from \"./utils/matrix.js\";\r\n\r\nexport class WgslExec extends ExecInterface {\r\n    ast: Node[];\r\n    context: ExecContext;\r\n    reflection: Reflect;\r\n    builtins: BuiltinFunctions;\r\n    typeInfo: Object;\r\n\r\n    constructor(ast?: Node[], context?: ExecContext) {\r\n        super();\r\n        this.ast = ast ?? [];\r\n        this.reflection = new Reflect();\r\n        this.reflection.updateAST(this.ast);\r\n\r\n        this.context = context?.clone() ?? new ExecContext();\r\n        this.builtins = new BuiltinFunctions(this);\r\n\r\n        this.typeInfo = {\r\n            \"bool\": this.getTypeInfo(Type.bool),\r\n            \"i32\": this.getTypeInfo(Type.i32),\r\n            \"u32\": this.getTypeInfo(Type.u32),\r\n            \"f32\": this.getTypeInfo(Type.f32),\r\n            \"f16\": this.getTypeInfo(Type.f16),\r\n            \"vec2f\": this.getTypeInfo(TemplateType.vec2f),\r\n            \"vec2u\": this.getTypeInfo(TemplateType.vec2u),\r\n            \"vec2i\": this.getTypeInfo(TemplateType.vec2i),\r\n            \"vec2h\": this.getTypeInfo(TemplateType.vec2h),\r\n            \"vec3f\": this.getTypeInfo(TemplateType.vec3f),\r\n            \"vec3u\": this.getTypeInfo(TemplateType.vec3u),\r\n            \"vec3i\": this.getTypeInfo(TemplateType.vec3i),\r\n            \"vec3h\": this.getTypeInfo(TemplateType.vec3h),\r\n            \"vec4f\": this.getTypeInfo(TemplateType.vec4f),\r\n            \"vec4u\": this.getTypeInfo(TemplateType.vec4u),\r\n            \"vec4i\": this.getTypeInfo(TemplateType.vec4i),\r\n            \"vec4h\": this.getTypeInfo(TemplateType.vec4h),\r\n            \"mat2x2f\": this.getTypeInfo(TemplateType.mat2x2f),\r\n            \"mat2x3f\": this.getTypeInfo(TemplateType.mat2x3f),\r\n            \"mat2x4f\": this.getTypeInfo(TemplateType.mat2x4f),\r\n            \"mat3x2f\": this.getTypeInfo(TemplateType.mat3x2f),\r\n            \"mat3x3f\": this.getTypeInfo(TemplateType.mat3x3f),\r\n            \"mat3x4f\": this.getTypeInfo(TemplateType.mat3x4f),\r\n            \"mat4x2f\": this.getTypeInfo(TemplateType.mat4x2f),\r\n            \"mat4x3f\": this.getTypeInfo(TemplateType.mat4x3f),\r\n            \"mat4x4f\": this.getTypeInfo(TemplateType.mat4x4f),\r\n        };\r\n    }\r\n\r\n    getVariableValue(name: string): number | number[] | null {\r\n        const v = this.context.getVariable(name)?.value ?? null;\r\n        if (v === null) {\r\n            return null;\r\n        }\r\n        if (v instanceof ScalarData) {\r\n            return v.value;\r\n        }\r\n        if (v instanceof VectorData) {\r\n            return Array.from(v.data);\r\n        }\r\n        if (v instanceof MatrixData) {\r\n            return Array.from(v.data);\r\n        }\r\n        if (v instanceof TypedData) {\r\n            if (v.typeInfo instanceof ArrayInfo) {\r\n                if (v.typeInfo.format.name === \"u32\") {\r\n                    return Array.from(new Uint32Array(v.buffer, v.offset, v.typeInfo.count));\r\n                } else if (v.typeInfo.format.name === \"i32\") {\r\n                    return Array.from(new Int32Array(v.buffer, v.offset, v.typeInfo.count));\r\n                } else if (v.typeInfo.format.name === \"f32\") {\r\n                    return Array.from(new Float32Array(v.buffer, v.offset, v.typeInfo.count));\r\n                }\r\n            }\r\n        }\r\n        console.error(`Unsupported return variable type ${v.typeInfo.name}`);\r\n        return null;\r\n    }\r\n\r\n    execute(config?: Object): void {\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            this._setOverrides(config[\"constants\"], this.context);\r\n        }\r\n\r\n        this._execStatements(this.ast, this.context);\r\n    }\r\n\r\n    dispatchWorkgroups(kernel: string, dispatchCount: number | number[], bindGroups: Object, config?: Object): void {\r\n        const context = this.context.clone();\r\n\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            this._setOverrides(config[\"constants\"], context);\r\n        }\r\n\r\n        this._execStatements(this.ast, context);\r\n\r\n        const f = context.getFunction(kernel);\r\n        if (!f) {\r\n            console.error(`Function ${kernel} not found`);\r\n            return;\r\n        }\r\n\r\n        if (typeof dispatchCount === \"number\") {\r\n            dispatchCount = [dispatchCount, 1, 1];\r\n        } else if (dispatchCount.length === 0) {\r\n            console.error(`Invalid dispatch count`);\r\n            return;\r\n        } else if (dispatchCount.length === 1) {\r\n            dispatchCount = [dispatchCount[0], 1, 1];\r\n        } else if (dispatchCount.length === 2) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], 1];\r\n        } else if (dispatchCount.length > 3) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], dispatchCount[2]];\r\n        }\r\n\r\n        const width = dispatchCount[0];\r\n        const height = dispatchCount[1];\r\n        const depth = dispatchCount[2];\r\n\r\n        const vec3u = this.getTypeInfo(\"vec3u\");\r\n        context.setVariable(\"@num_workgroups\", new VectorData(dispatchCount, vec3u));\r\n\r\n        for (const set in bindGroups) {\r\n            for (const binding in bindGroups[set]) {\r\n                const entry = bindGroups[set][binding];\r\n\r\n                context.variables.forEach((v) => {\r\n                    const node = v.node;\r\n                    if (node?.attributes) {\r\n                        let b = null;\r\n                        let s = null;\r\n                        for (const attr of node.attributes) {\r\n                            if (attr.name === \"binding\") {\r\n                                b = attr.value;\r\n                            } else if (attr.name === \"group\") {\r\n                                s = attr.value;\r\n                            }\r\n                        }\r\n                        if (binding == b && set == s) {\r\n                            if (entry.texture !== undefined && entry.descriptor !== undefined) {\r\n                                // Texture\r\n                                const textureData = new TextureData(entry.texture, this.getTypeInfo(node.type), entry.descriptor,\r\n                                        entry.texture.view ?? null);\r\n                                v.value = textureData;\r\n                            } else if (entry.uniform !== undefined) {\r\n                                // Uniform buffer\r\n                                v.value = new TypedData(entry.uniform, this.getTypeInfo(node.type));\r\n                            } else {\r\n                                // Storage buffer\r\n                                v.value = new TypedData(entry, this.getTypeInfo(node.type));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let z = 0; z < depth; ++z) {\r\n            for (let y = 0; y < height; ++y) {\r\n                for (let x = 0; x < width; ++x) {\r\n                    context.setVariable(\"@workgroup_id\", new VectorData([x, y, z], this.getTypeInfo(\"vec3u\")));\r\n                    this._dispatchWorkgroup(f, [x, y, z], context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static _breakObj = new Data(new TypeInfo(\"BREAK\", null), null);\r\n    static _continueObj = new Data(new TypeInfo(\"CONTINUE\", null), null);\r\n\r\n    execStatement(stmt: Node, context: ExecContext): Data | null {\r\n        if (stmt instanceof Return) {\r\n            return this.evalExpression(stmt.value, context);\r\n        } else if (stmt instanceof Break) {\r\n            if (stmt.condition) {\r\n                const c = this.evalExpression(stmt.condition, context);\r\n                if (!(c instanceof ScalarData)) {\r\n                    throw new Error(`Invalid break-if condition`);\r\n                }\r\n                if (!c.value) {\r\n                    return null;\r\n                }\r\n            }\r\n            return WgslExec._breakObj;\r\n        } else if (stmt instanceof Continue) {\r\n            return WgslExec._continueObj;\r\n        } else if (stmt instanceof Let) {\r\n            this._let(stmt, context);\r\n        } else if (stmt instanceof Var) {\r\n            this._var(stmt, context);\r\n        } else if (stmt instanceof Const) {\r\n            this._const(stmt, context);\r\n        } else if (stmt instanceof Function) {\r\n            this._function(stmt, context);\r\n        } else if (stmt instanceof If) {\r\n            return this._if(stmt, context);\r\n        } else if (stmt instanceof Switch) {\r\n            return this._switch(stmt, context);\r\n        } else if (stmt instanceof For) {\r\n            return this._for(stmt, context);\r\n        } else if (stmt instanceof While) {\r\n            return this._while(stmt, context);\r\n        } else if (stmt instanceof Loop) {\r\n            return this._loop(stmt, context);\r\n        } else if (stmt instanceof Continuing) {\r\n            const subContext = context.clone();\r\n            subContext.currentFunctionName = context.currentFunctionName;\r\n            return this._execStatements(stmt.body, subContext);\r\n        } else if (stmt instanceof Assign) {\r\n            this._assign(stmt, context);\r\n        } else if (stmt instanceof Increment) {\r\n            this._increment(stmt, context);\r\n        } else if (stmt instanceof Struct) {\r\n            return null;\r\n        } else if (stmt instanceof Override) {\r\n            const name = stmt.name;\r\n            if (context.getVariable(name) === null) {\r\n                context.setVariable(name, new ScalarData(0, this.getTypeInfo(\"u32\")));\r\n                //console.error(`Override constant ${name} not found. Line ${stmt.line}`);\r\n            }\r\n        } else if (stmt instanceof Call) {\r\n            this._call(stmt, context);\r\n        } else if (stmt instanceof Diagnostic) {\r\n            return null; // Nothing to do here.\r\n        } else if (stmt instanceof Alias) {\r\n            return null; // Nothing to do here.\r\n        } else {\r\n            console.error(`Invalid statement type.`, stmt, `Line ${stmt.line}`);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    evalExpression(node: Node, context: ExecContext): Data | null {\r\n        if (node instanceof BinaryOperator) {\r\n            return this._evalBinaryOp(node, context);\r\n        } else if (node instanceof LiteralExpr) {\r\n            return this._evalLiteral(node, context);\r\n        } else if (node instanceof VariableExpr) {\r\n            return this._evalVariable(node, context);\r\n        } else if (node instanceof CallExpr) {\r\n            return this._evalCall(node, context);\r\n        } else if (node instanceof CreateExpr) {\r\n            return this._evalCreate(node, context);\r\n        } else if (node instanceof ConstExpr) {\r\n            return this._evalConst(node, context);\r\n        } else if (node instanceof BitcastExpr) {\r\n            return this._evalBitcast(node, context);\r\n        } else if (node instanceof UnaryOperator) {\r\n            return this._evalUnaryOp(node, context);\r\n        }\r\n        console.error(`Invalid expression type`, node, `Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    getTypeInfo(type: Type | string): TypeInfo | null {\r\n        if (type instanceof Type) {\r\n            const t = this.reflection.getTypeInfo(type as Type);\r\n            if (t !== null) {\r\n                return t;\r\n            }\r\n        }\r\n\r\n        let t = this.typeInfo[type as string] ?? null;\r\n        if (t !== null) {\r\n            return t;\r\n        }\r\n\r\n        t = this.reflection.getTypeInfoByName(type as string);\r\n        return t;\r\n    }\r\n\r\n    _setOverrides(constants: Object, context: ExecContext): void {\r\n        for (const k in constants) {\r\n            const v = constants[k];\r\n            const override = this.reflection.getOverrideInfo(k);\r\n            if (override !== null) {\r\n                if (override.type === null) {\r\n                    override.type = this.getTypeInfo(\"u32\");\r\n                }\r\n                if (override.type.name === \"u32\" || override.type.name === \"i32\" || override.type.name === \"f32\" || override.type.name === \"f16\") {\r\n                    context.setVariable(k, new ScalarData(v, override.type));\r\n                } else if (override.type.name === \"bool\") {\r\n                    context.setVariable(k, new ScalarData(v ? 1 : 0, override.type));\r\n                } else if (override.type.name === \"vec2\" || override.type.name === \"vec3\" || override.type.name === \"vec4\" ||\r\n                    override.type.name === \"vec2f\" || override.type.name === \"vec3f\" || override.type.name === \"vec4f\" ||\r\n                    override.type.name === \"vec2i\" || override.type.name === \"vec3i\" || override.type.name === \"vec4i\" ||\r\n                    override.type.name === \"vec2u\" || override.type.name === \"vec3u\" || override.type.name === \"vec4u\" ||\r\n                    override.type.name === \"vec2h\" || override.type.name === \"vec3h\" || override.type.name === \"vec4h\") {\r\n                    context.setVariable(k, new VectorData(v, override.type));\r\n                } else {\r\n                    console.error(`Invalid constant type for ${k}`);\r\n                }\r\n            } else {\r\n                console.error(`Override ${k} does not exist in the shader.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchWorkgroup(f: FunctionRef, workgroup_id: number[], context: ExecContext): void {\r\n        const workgroupSize = [1, 1, 1];\r\n        for (const attr of f.node.attributes) {\r\n            if (attr.name === \"workgroup_size\") {\r\n                if (attr.value.length > 0) {\r\n                    // The value could be an override constant\r\n                    const v = context.getVariableValue(attr.value[0]);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[0] = v.value;\r\n                    } else {\r\n                        workgroupSize[0] = parseInt(attr.value[0]);\r\n                    }\r\n                }\r\n                if (attr.value.length > 1) {\r\n                    const v = context.getVariableValue(attr.value[1]);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[1] = v.value;\r\n                    } else {\r\n                        workgroupSize[1] = parseInt(attr.value[1]);\r\n                    }\r\n                }\r\n                if (attr.value.length > 2) {\r\n                    const v = context.getVariableValue(attr.value[2]);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[2] = v.value;\r\n                    } else {\r\n                        workgroupSize[2] = parseInt(attr.value[2]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const vec3u = this.getTypeInfo(\"vec3u\");\r\n        const u32 = this.getTypeInfo(\"u32\");\r\n        context.setVariable(\"@workgroup_size\", new VectorData(workgroupSize, vec3u));\r\n\r\n        const width = workgroupSize[0];\r\n        const height = workgroupSize[1];\r\n        const depth = workgroupSize[2];\r\n\r\n        for (let z = 0, li = 0; z < depth; ++z) {\r\n            for (let y = 0; y < height; ++y) {\r\n                for (let x = 0; x < width; ++x, ++li) {\r\n                    const local_invocation_id = [x, y, z];\r\n                    const global_invocation_id = [\r\n                        x + workgroup_id[0] * workgroupSize[0],\r\n                        y + workgroup_id[1] * workgroupSize[1],\r\n                        z + workgroup_id[2] * workgroupSize[2]];\r\n\r\n                    context.setVariable(\"@local_invocation_id\", new VectorData(local_invocation_id, vec3u));\r\n                    context.setVariable(\"@global_invocation_id\", new VectorData(global_invocation_id, vec3u));\r\n                    context.setVariable(\"@local_invocation_index\", new ScalarData(li, u32));\r\n\r\n                    this._dispatchExec(f, context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _dispatchExec(f: FunctionRef, context: ExecContext): void {\r\n        // Update any built-in input args.\r\n        // TODO: handle input structs.\r\n        for (const arg of f.node.args) {\r\n            for (const attr of arg.attributes) {\r\n                if (attr.name === \"builtin\") {\r\n                    const globalName = `@${attr.value}`;\r\n                    const globalVar = context.getVariable(globalName);\r\n                    if (globalVar !== undefined) {\r\n                        context.variables.set(arg.name, globalVar);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._execStatements(f.node.body, context);\r\n    }\r\n\r\n    getVariableName(node: Node, context: ExecContext): string | null {\r\n        while (node instanceof UnaryOperator) {\r\n            node = node.right;\r\n        }\r\n\r\n        if (node instanceof VariableExpr) {\r\n            return (node as VariableExpr).name;\r\n        } else {\r\n            console.error(`Unknown variable type`, node, 'Line', node.line);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _execStatements(statements: Node[], context: ExecContext): Data | null {\r\n        for (const stmt of statements) {\r\n            // Block statements are declared as arrays of statements.\r\n            if (stmt instanceof Array) {\r\n                const subContext = context.clone();\r\n                const res = this._execStatements(stmt, subContext);\r\n                if (res) {\r\n                    return res;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            const res = this.execStatement(stmt, context);\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _call(node: Call, context: ExecContext): void {\r\n        const subContext = context.clone();\r\n        subContext.currentFunctionName = node.name;\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (!f) {\r\n            if (node.isBuiltin) {\r\n                this._callBuiltinFunction(node, subContext);\r\n            } else {\r\n                const typeInfo = this.getTypeInfo(node.name);\r\n                if (typeInfo) {\r\n                    this._evalCreate(node, context);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n            const arg = f.node.args[ai];\r\n            const value = this.evalExpression(node.args[ai], subContext);\r\n            subContext.setVariable(arg.name, value, arg);\r\n        }\r\n\r\n        this._execStatements(f.node.body, subContext);\r\n    }\r\n\r\n    _increment(node: Increment, context: ExecContext): void {\r\n        const name = this.getVariableName(node.variable, context);\r\n        const v = context.getVariable(name);\r\n        if (!v) {\r\n            console.error(`Variable ${name} not found. Line ${node.line}`);\r\n            return;\r\n        }\r\n        if (node.operator === \"++\") {\r\n            if (v.value instanceof ScalarData) {\r\n                v.value.value++;\r\n            } else {\r\n                console.error(`Variable ${name} is not a scalar. Line ${node.line}`);\r\n            }\r\n        } else if (node.operator === \"--\") {\r\n            if (v.value instanceof ScalarData) {\r\n                v.value.value--;\r\n            } else {\r\n                console.error(`Variable ${name} is not a scalar. Line ${node.line}`);\r\n            }\r\n        } else {\r\n            console.error(`Unknown increment operator ${node.operator}. Line ${node.line}`);\r\n        }\r\n    }\r\n\r\n    _getVariableData(node: Node, context: ExecContext): Data | null {\r\n        if (node instanceof VariableExpr) {\r\n            const name = this.getVariableName(node, context);\r\n            const _var = context.getVariable(name);\r\n            if (_var === null) {\r\n                console.error(`Variable ${name} not found. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            return _var.value.getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        if (node instanceof UnaryOperator) {\r\n            if (node.operator === \"*\") {\r\n                const refData = this._getVariableData(node.right, context);\r\n                if (!(refData instanceof PointerData)) {\r\n                    console.error(`Variable ${node.right} is not a pointer. Line ${node.line}`);\r\n                    return null;\r\n                }\r\n\r\n                return refData.reference.getSubData(this, node.postfix, context);\r\n            } else if (node.operator === \"&\") {\r\n                const refData = this._getVariableData(node.right, context);\r\n                return new PointerData(refData);\r\n            } \r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _assign(node: Assign, context: ExecContext): void {\r\n        let v: Data | null = null;\r\n        let name: string = \"<var>\";\r\n\r\n        let postfix: Expression | null = null;\r\n\r\n        if (node.variable instanceof UnaryOperator) {\r\n            const varData = this._getVariableData(node.variable, context);\r\n            const assignValue = this.evalExpression(node.value, context);\r\n            const op = node.operator;\r\n\r\n            if (op === \"=\") {\r\n                if (varData instanceof ScalarData || varData instanceof VectorData || varData instanceof MatrixData) {\r\n                    if (assignValue instanceof ScalarData || assignValue instanceof VectorData || assignValue instanceof MatrixData &&\r\n                        varData.data.length === assignValue.data.length) {\r\n                        varData.data.set(assignValue.data);\r\n                        return;\r\n                    } else {\r\n                        console.error(`Invalid assignment. Line ${node.line}`);\r\n                    }\r\n                } else if (varData instanceof TypedData && assignValue instanceof TypedData) {\r\n                    if ((varData.buffer.byteLength - varData.offset) >= (assignValue.buffer.byteLength - assignValue.offset)) {\r\n                        if (varData.buffer.byteLength % 4 === 0) {\r\n                            new Uint32Array(varData.buffer, varData.offset, varData.typeInfo.size / 4).set(new Uint32Array(assignValue.buffer, assignValue.offset, assignValue.typeInfo.size / 4));\r\n                        } else {\r\n                            new Uint8Array(varData.buffer, varData.offset, varData.typeInfo.size).set(new Uint8Array(assignValue.buffer, assignValue.offset, assignValue.typeInfo.size));\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n                console.error(`Invalid assignment. Line ${node.line}`);\r\n                return null;\r\n            } else if (op === \"+=\") {\r\n                if (varData instanceof ScalarData || varData instanceof VectorData || varData instanceof MatrixData) {\r\n                    if (assignValue instanceof ScalarData || assignValue instanceof VectorData || assignValue instanceof MatrixData) {\r\n                        varData.data.set(assignValue.data.map((v: number, i: number) => varData.data[i] + v));\r\n                        return;\r\n                    } else {\r\n                        console.error(`Invalid assignment . Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            } else if (op === \"-=\") {\r\n                if (varData instanceof ScalarData || varData instanceof VectorData || varData instanceof MatrixData) {\r\n                    if (assignValue instanceof ScalarData || assignValue instanceof VectorData || assignValue instanceof MatrixData) {\r\n                        varData.data.set(assignValue.data.map((v: number, i: number) => varData.data[i] - v));\r\n                        return;\r\n                    } else {\r\n                        console.error(`Invalid assignment. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (node.variable instanceof UnaryOperator) {\r\n            if (node.variable.operator === \"*\") {\r\n                name = this.getVariableName(node.variable.right, context);\r\n                const _var = context.getVariable(name);\r\n                if (_var && _var.value instanceof PointerData) {\r\n                    v = _var.value.reference;\r\n                } else {\r\n                    console.error(`Variable ${name} is not a pointer. Line ${node.line}`);\r\n                    return;\r\n                }\r\n\r\n                let postfix = node.variable.postfix;\r\n                if (!postfix) {\r\n                    let rNode = node.variable.right;\r\n                    while (rNode instanceof UnaryOperator) {\r\n                        if (rNode.postfix) {\r\n                            postfix = rNode.postfix;\r\n                            break;\r\n                        }\r\n                        rNode = rNode.right;\r\n                    }\r\n                }\r\n                if (postfix) {\r\n                    v = v.getSubData(this, postfix, context);\r\n                }\r\n            }\r\n        } else {\r\n            postfix = node.variable.postfix;\r\n            name = this.getVariableName(node.variable, context);\r\n            const _var = context.getVariable(name);\r\n            if (_var === null) {\r\n                console.error(`Variable ${name} not found. Line ${node.line}`);\r\n                return;\r\n            }\r\n            v = _var.value;\r\n        }\r\n\r\n        if (v instanceof PointerData) {\r\n            v = v.reference;\r\n        }\r\n\r\n        if (v === null) {\r\n            console.error(`Variable ${name} not found. Line ${node.line}`);\r\n            return;\r\n        }\r\n\r\n        const value = this.evalExpression(node.value, context);\r\n\r\n        const op = node.operator;\r\n        if (op !== \"=\") {\r\n            const currentValue = v.getSubData(this, postfix, context);\r\n\r\n            if (currentValue instanceof VectorData && value instanceof ScalarData) {\r\n                const cv = currentValue.data;\r\n                const v = value.value;\r\n\r\n                if (op === \"+=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] += v;\r\n                    }\r\n                } else if (op === \"-=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] -= v;\r\n                    }\r\n                } else if (op === \"*=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] *= v;\r\n                    }\r\n                } else if (op === \"/=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] /= v;\r\n                    }\r\n                } else if (op === \"%=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] %= v;\r\n                    }\r\n                } else if (op === \"&=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] &= v;\r\n                    }\r\n                } else if (op === \"|=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] |= v;\r\n                    }\r\n                } else if (op === \"^=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] ^= v;\r\n                    }\r\n                } else if (op === \"<<=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] <<= v;\r\n                    }\r\n                } else if (op === \">>=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] >>= v;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid operator ${op}. Line ${node.line}`);\r\n                }\r\n            } else if (currentValue instanceof VectorData && value instanceof VectorData) {\r\n                const cv = currentValue.data;\r\n                const v = value.data;\r\n                if (cv.length !== v.length) {\r\n                    console.error(`Vector length mismatch. Line ${node.line}`);\r\n                    return;\r\n                }\r\n\r\n                if (op === \"+=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] += v[i];\r\n                    }\r\n                } else if (op === \"-=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] -= v[i];\r\n                    }\r\n                } else if (op === \"*=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] *= v[i];\r\n                    }\r\n                } else if (op === \"/=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] /= v[i];\r\n                    }\r\n                } else if (op === \"%=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] %= v[i];\r\n                    }\r\n                } else if (op === \"&=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] &= v[i];\r\n                    }\r\n                } else if (op === \"|=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] |= v[i];\r\n                    }\r\n                } else if (op === \"^=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] ^= v[i];\r\n                    }\r\n                } else if (op === \"<<=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] <<= v[i];\r\n                    }\r\n                } else if (op === \">>=\") {\r\n                    for (let i = 0; i < cv.length; ++i) {\r\n                        cv[i] >>= v[i];\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid operator ${op}. Line ${node.line}`);\r\n                }\r\n            } else if (currentValue instanceof ScalarData && value instanceof ScalarData) {\r\n                if (op === \"+=\") {\r\n                    currentValue.value += value.value;\r\n                } else if (op === \"-=\") {\r\n                    currentValue.value -= value.value;\r\n                } else if (op === \"*=\") {\r\n                    currentValue.value *= value.value;\r\n                } else if (op === \"/=\") {\r\n                    currentValue.value /= value.value;\r\n                } else if (op === \"%=\") {\r\n                    currentValue.value %= value.value;\r\n                } else if (op === \"&=\") {\r\n                    currentValue.value &= value.value;\r\n                } else if (op === \"|=\") {\r\n                    currentValue.value |= value.value;\r\n                } else if (op === \"^=\") {\r\n                    currentValue.value ^= value.value;\r\n                } else if (op === \"<<=\") {\r\n                    currentValue.value <<= value.value;\r\n                } else if (op === \">>=\") {\r\n                    currentValue.value >>= value.value;\r\n                } else {\r\n                    console.error(`Invalid operator ${op}. Line ${node.line}`);\r\n                }\r\n            } else {\r\n                console.error(`Invalid type for ${node.operator} operator. Line ${node.line}`);\r\n                return;\r\n            }\r\n\r\n            // If the variable is a TypedData, as in a struct or array, and we're assigning a\r\n            // sub portion of it, set the data in the original buffer.\r\n            if (v instanceof TypedData) {\r\n                v.setDataValue(this, currentValue, postfix, context);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (v instanceof TypedData) {\r\n            v.setDataValue(this, value, postfix, context);\r\n        } else if (postfix) {\r\n            if (!(v instanceof VectorData) && !(v instanceof MatrixData)) {\r\n                console.error(`Variable ${name} is not a vector or matrix. Line ${node.line}`);\r\n                return;\r\n            }\r\n\r\n            if (postfix instanceof ArrayIndex) {\r\n                const idx = (this.evalExpression(postfix.index, context) as ScalarData).value;\r\n\r\n                if (v instanceof VectorData) {\r\n                    if (value instanceof ScalarData) {\r\n                        v.data[idx] = value.value;\r\n                    } else {\r\n                        console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else if (v instanceof MatrixData) {\r\n                    const idx = (this.evalExpression(postfix.index, context) as ScalarData).value;\r\n                    if (idx < 0) {\r\n                        console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                    if (value instanceof VectorData) {\r\n                        const typeName = v.typeInfo.getTypeName();\r\n                        if (typeName === \"mat2x2\" || typeName === \"mat2x2f\" || typeName === \"mat2x2h\") {\r\n                            if (idx < 2 && value.data.length === 2) {\r\n                                v.data[idx * 2] = value.data[0];\r\n                                v.data[idx * 2 + 1] = value.data[1];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat2x3\" || typeName === \"mat2x3f\" || typeName === \"mat2x3h\") {\r\n                            if (idx < 2 && value.data.length === 3) {\r\n                                v.data[idx * 3] = value.data[0];\r\n                                v.data[idx * 3 + 1] = value.data[1];\r\n                                v.data[idx * 3 + 2] = value.data[2];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat2x4\" || typeName === \"mat2x4f\" || typeName === \"mat2x4h\") {\r\n                            if (idx < 2 && value.data.length === 4) {\r\n                                v.data[idx * 4] = value.data[0];\r\n                                v.data[idx * 4 + 1] = value.data[1];\r\n                                v.data[idx * 4 + 2] = value.data[2];\r\n                                v.data[idx * 4 + 3] = value.data[3];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat3x2\" || typeName === \"mat3x2f\" || typeName === \"mat3x2h\") {\r\n                            if (idx < 3 && value.data.length === 2) {\r\n                                v.data[idx * 2] = value.data[0];\r\n                                v.data[idx * 2 + 1] = value.data[1];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat3x3\" || typeName === \"mat3x3f\" || typeName === \"mat3x3h\") {\r\n                            if (idx < 3 && value.data.length === 3) {\r\n                                v.data[idx * 3] = value.data[0];\r\n                                v.data[idx * 3 + 1] = value.data[1];\r\n                                v.data[idx * 3 + 2] = value.data[2];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat3x4\" || typeName === \"mat3x4f\" || typeName === \"mat3x4h\") {\r\n                            if (idx < 3 && value.data.length === 4) {\r\n                                v.data[idx * 4] = value.data[0];\r\n                                v.data[idx * 4 + 1] = value.data[1];\r\n                                v.data[idx * 4 + 2] = value.data[2];\r\n                                v.data[idx * 4 + 3] = value.data[3];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat4x2\" || typeName === \"mat4x2f\" || typeName === \"mat4x2h\") {\r\n                            if (idx < 4 && value.data.length === 2) {\r\n                                v.data[idx * 2] = value.data[0];\r\n                                v.data[idx * 2 + 1] = value.data[1];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat4x3\" || typeName === \"mat4x3f\" || typeName === \"mat4x3h\") {\r\n                            if (idx < 4 && value.data.length === 3) {\r\n                                v.data[idx * 3] = value.data[0];\r\n                                v.data[idx * 3 + 1] = value.data[1];\r\n                                v.data[idx * 3 + 2] = value.data[2];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else if (typeName === \"mat4x4\" || typeName === \"mat4x4f\" || typeName === \"mat4x4h\") {\r\n                            if (idx < 4 && value.data.length === 4) {\r\n                                v.data[idx * 4] = value.data[0];\r\n                                v.data[idx * 4 + 1] = value.data[1];\r\n                                v.data[idx * 4 + 2] = value.data[2];\r\n                                v.data[idx * 4 + 3] = value.data[3];\r\n                            } else {\r\n                                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            } else if (postfix instanceof StringExpr) {\r\n                const member = postfix.value;\r\n                if (!(v instanceof VectorData)) {\r\n                    console.error(`Invalid assignment to ${member}. Variable ${name} is not a vector. Line ${node.line}`);\r\n                    return;\r\n                }\r\n                if (value instanceof ScalarData) {\r\n                    if (member.length > 1) {\r\n                        console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                    if (member === \"x\") {\r\n                        v.data[0] = value.value;\r\n                    } else if (member === \"y\") {\r\n                        if (v.data.length < 2) {\r\n                            console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                        v.data[1] = value.value;\r\n                    } else if (member === \"z\") {\r\n                        if (v.data.length < 3) {\r\n                            console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                        v.data[2] = value.value;\r\n                    } else if (member === \"w\") {\r\n                        if (v.data.length < 4) {\r\n                            console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                        v.data[3] = value.value;\r\n                    }\r\n                } else if (value instanceof VectorData) {\r\n                    if (member.length !== value.data.length) {\r\n                        console.error(`Invalid assignment to ${member} for variable ${name}. Line ${node.line}`);\r\n                        return;\r\n                    }\r\n                    for (let i = 0; i < member.length; ++i) {\r\n                        const m = member[i];\r\n                        if (m === \"x\" || m === \"r\") {\r\n                            v.data[0] = value.data[i];\r\n                        } else if (m === \"y\" || m === \"g\") {\r\n                            if (value.data.length < 2) {\r\n                                console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                            v.data[1] = value.data[i];\r\n                        } else if (m === \"z\" || m === \"b\") {\r\n                            if (value.data.length < 3) {\r\n                                console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                            v.data[2] = value.data[i];\r\n                        } else if (m === \"w\" || m === \"a\") {\r\n                            if (value.data.length < 4) {\r\n                                console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                                return;\r\n                            }\r\n                            v.data[3] = value.data[i];\r\n                        } else {\r\n                            console.error(`Invalid assignment to ${m} for variable ${name}. Line ${node.line}`);\r\n                            return;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            if (v instanceof ScalarData && value instanceof ScalarData) {\r\n                v.value = value.value;\r\n            } else if (v instanceof VectorData && value instanceof VectorData) {\r\n                v.data.set(value.data);\r\n            } else if (v instanceof MatrixData && value instanceof MatrixData) {\r\n                v.data.set(value.data);\r\n            } else {\r\n                console.error(`Invalid assignment to ${name}. Line ${node.line}`);\r\n            }\r\n            //v.value = value;\r\n        }\r\n        return;\r\n    }\r\n\r\n    _function(node: Function, context: ExecContext): void {\r\n        const f = new FunctionRef(node);\r\n        context.functions.set(node.name, f);\r\n    }\r\n\r\n    _const(node: Const, context: ExecContext): void {\r\n        let value = null;\r\n        if (node.value !== null) {\r\n            value = this.evalExpression(node.value, context);\r\n        }\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _let(node: Let, context: ExecContext): void {\r\n        let value: Data | null = null;\r\n        if (node.value !== null) {\r\n            value = this.evalExpression(node.value, context);\r\n            if (value === null) {\r\n                console.error(`Invalid value for variable ${node.name}. Line ${node.line}`);\r\n                return;\r\n            }\r\n            if (!(node.value instanceof UnaryOperator)) {\r\n                value = value.clone();\r\n            }\r\n        } else {\r\n            const typeName = node.type.name;\r\n            if (typeName === \"f32\" || typeName === \"i32\" || typeName === \"u32\" ||\r\n                typeName === \"bool\" || typeName === \"f16\" ||\r\n                typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\" ||\r\n                typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n                typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n                typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\" ||\r\n                typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n                typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\" ||\r\n                typeName === \"mat2x2\" || typeName === \"mat2x3\" || typeName === \"mat2x4\" ||\r\n                typeName === \"mat3x2\" || typeName === \"mat3x3\" || typeName === \"mat3x4\" ||\r\n                typeName === \"mat4x2\" || typeName === \"mat4x3\" || typeName === \"mat4x4\" ||\r\n                typeName === \"mat2x2f\" || typeName === \"mat2x3f\" || typeName === \"mat2x4f\" ||\r\n                typeName === \"mat3x2f\" || typeName === \"mat3x3f\" || typeName === \"mat3x4f\" ||\r\n                typeName === \"mat4x2f\" || typeName === \"mat4x3f\" || typeName === \"mat4x4f\" ||\r\n                typeName === \"mat2x2h\" || typeName === \"mat2x3h\" || typeName === \"mat2x4h\" ||\r\n                typeName === \"mat3x2h\" || typeName === \"mat3x3h\" || typeName === \"mat3x4h\" ||\r\n                typeName === \"mat4x2h\" || typeName === \"mat4x3h\" || typeName === \"mat4x4h\" ||\r\n                typeName === \"array\") {\r\n                const defType = new CreateExpr(node.type, []);\r\n                value = this._evalCreate(defType, context);\r\n            }\r\n        }\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _var(node: Var, context: ExecContext): void {\r\n        let value = null;\r\n        if (node.value !== null) {\r\n            value = this.evalExpression(node.value, context);\r\n            if (value === null) {\r\n                console.error(`Invalid value for variable ${node.name}. Line ${node.line}`);\r\n                return;\r\n            }\r\n            if (!(node.value instanceof UnaryOperator)) {\r\n                value = value.clone();\r\n            }\r\n        } else {\r\n            if (node.type === null) {\r\n                console.error(`Variable ${node.name} has no type. Line ${node.line}`);\r\n                return;\r\n            }\r\n\r\n            const typeName = node.type.name;\r\n            if (typeName === \"f32\" || typeName === \"i32\" || typeName === \"u32\" ||\r\n                typeName === \"bool\" || typeName === \"f16\" ||\r\n                typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\" ||\r\n                typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n                typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n                typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\" ||\r\n                typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n                typeName === \"vec2b\" || typeName === \"vec3b\" || typeName === \"vec4b\" ||\r\n                typeName === \"mat2x2\" || typeName === \"mat2x3\" || typeName === \"mat2x4\" ||\r\n                typeName === \"mat3x2\" || typeName === \"mat3x3\" || typeName === \"mat3x4\" ||\r\n                typeName === \"mat4x2\" || typeName === \"mat4x3\" || typeName === \"mat4x4\" ||\r\n                typeName === \"mat2x2f\" || typeName === \"mat2x3f\" || typeName === \"mat2x4f\" ||\r\n                typeName === \"mat3x2f\" || typeName === \"mat3x3f\" || typeName === \"mat3x4f\" ||\r\n                typeName === \"mat4x2f\" || typeName === \"mat4x3f\" || typeName === \"mat4x4f\" ||\r\n                typeName === \"mat2x2h\" || typeName === \"mat2x3h\" || typeName === \"mat2x4h\" ||\r\n                typeName === \"mat3x2h\" || typeName === \"mat3x3h\" || typeName === \"mat3x4h\" ||\r\n                typeName === \"mat4x2h\" || typeName === \"mat4x3h\" || typeName === \"mat4x4h\" ||\r\n                node.type instanceof ArrayType || node.type instanceof Struct || node.type instanceof TemplateType) {\r\n                const defType = new CreateExpr(node.type, []);\r\n                value = this._evalCreate(defType, context);\r\n            }\r\n        }\r\n\r\n        context.createVariable(node.name, value, node);\r\n    }\r\n\r\n    _switch(node: Switch, context: ExecContext) : Data | null {\r\n        context = context.clone();\r\n        const condition = this.evalExpression(node.condition, context);\r\n        if (!(condition instanceof ScalarData)) {\r\n            console.error(`Invalid if condition. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        let defaultCase: SwitchCase | null = null;\r\n\r\n        for (const c of node.cases) {\r\n            if (c instanceof Case) {\r\n                for (const selector of c.selectors) {\r\n                    if (selector instanceof DefaultSelector) {\r\n                        defaultCase = c;\r\n                        continue;\r\n                    }\r\n\r\n                    const selectorValue = this.evalExpression(selector, context);\r\n                    if (!(selectorValue instanceof ScalarData)) {\r\n                        console.error(`Invalid case selector. Line ${node.line}`);\r\n                        return null;\r\n                    }\r\n\r\n                    if (selectorValue.value === condition.value) {\r\n                        return this._execStatements(c.body, context);\r\n                    }\r\n                }\r\n            } else if (c instanceof Default) {\r\n                defaultCase = c;\r\n            }\r\n        }\r\n\r\n        if (defaultCase) {\r\n            return this._execStatements(defaultCase.body, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _if(node: If, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n        const condition = this.evalExpression(node.condition, context);\r\n        if (!(condition instanceof ScalarData)) {\r\n            console.error(`Invalid if condition. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (condition.value) {\r\n            return this._execStatements(node.body, context);\r\n        }\r\n\r\n        for (const e of node.elseif) {\r\n            const condition = this.evalExpression(e.condition, context);\r\n            if (!(condition instanceof ScalarData)) {\r\n                console.error(`Invalid if condition. Line ${node.line}`);\r\n                return null;\r\n            }\r\n            if (condition.value) {\r\n                return this._execStatements(e.body, context);\r\n            }\r\n        }\r\n\r\n        if (node.else) {\r\n            return this._execStatements(node.else, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _getScalarValue(v: Data | null): number {\r\n        if (v instanceof ScalarData) {\r\n            return v.value;\r\n        }\r\n        console.error(`Expected scalar value.`, v);\r\n        return 0;\r\n    }\r\n\r\n    _for(node: For, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n        this.execStatement(node.init, context);\r\n        while (this._getScalarValue(this.evalExpression(node.condition, context))) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res === WgslExec._breakObj) {\r\n                break;\r\n            }\r\n            if (res !== null && res !== WgslExec._continueObj) {\r\n                return res;\r\n            }\r\n            this.execStatement(node.increment, context);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _loop(node: Loop, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n\r\n        while (true) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res === WgslExec._breakObj) {\r\n                break;\r\n            } else if (res === WgslExec._continueObj) {\r\n                if (node.continuing) {\r\n                    const cres = this._execStatements(node.continuing.body, context);\r\n                    if (cres === WgslExec._breakObj) {\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (res !== null) {\r\n                return res;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    _while(node: While, context: ExecContext): Data | null {\r\n        context = context.clone();\r\n        while (this._getScalarValue(this.evalExpression(node.condition, context))) {\r\n            const res = this._execStatements(node.body, context);\r\n            if (res === WgslExec._breakObj) {\r\n                break;\r\n            } else if (res === WgslExec._continueObj) {\r\n                continue;\r\n            } else if (res !== null) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    _evalBitcast(node: BitcastExpr, context: ExecContext): Data | null {\r\n        const value = this.evalExpression(node.value, context);\r\n        const type = node.type;\r\n\r\n        if (value instanceof ScalarData) {\r\n            const v = castScalar(value.value, value.typeInfo.name, type.name);\r\n            return new ScalarData(v, this.getTypeInfo(type));\r\n        }\r\n\r\n        if (value instanceof VectorData) {\r\n            const fromType = value.typeInfo.getTypeName();\r\n            let fromCast = \"\";\r\n            if (fromType.endsWith(\"f\")) {\r\n                fromCast = \"f32\";\r\n            } else if (fromType.endsWith(\"i\")) {\r\n                fromCast = \"i32\";\r\n            } else if (fromType.endsWith(\"u\")) {\r\n                fromCast = \"u32\";\r\n            } else if (fromType.endsWith(\"b\")) {\r\n                fromCast = \"bool\";\r\n            } else if (fromType.endsWith(\"h\")) {\r\n                fromCast = \"f16\";\r\n            } else {\r\n                console.error(`Unknown vector type ${fromType}. Line ${node.line}`);\r\n                return null;\r\n            }\r\n\r\n            const toType = type.getTypeName();\r\n            let toCast = \"\";\r\n            if (toType.endsWith(\"f\")) {\r\n                toCast = \"f32\";\r\n            } else if (toType.endsWith(\"i\")) {\r\n                toCast = \"i32\";\r\n            } else if (toType.endsWith(\"u\")) {\r\n                toCast = \"u32\";\r\n            } else if (toType.endsWith(\"b\")) {\r\n                toCast = \"bool\";\r\n            } else if (toType.endsWith(\"h\")) {\r\n                toCast = \"f16\";\r\n            } else {\r\n                console.error(`Unknown vector type ${toCast}. Line ${node.line}`);\r\n                return null;\r\n            }\r\n\r\n            const v = castVector(Array.from(value.data), fromCast, toCast);\r\n            return new VectorData(v, this.getTypeInfo(type));\r\n        }\r\n\r\n        console.error(`TODO: bitcast for ${value.typeInfo.name}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalConst(node: ConstExpr, context: ExecContext): Data | null {\r\n        const data = context.getVariableValue(node.name).clone();\r\n        return data.getSubData(this, node.postfix, context);\r\n    }\r\n\r\n    _evalCreate(node: CreateExpr | CallExpr | Call, context: ExecContext): Data | null {\r\n        if (node instanceof CreateExpr) {\r\n            if (node.type === null) {\r\n                return VoidData.void;\r\n            }\r\n\r\n            const typeName = node.type.getTypeName();\r\n\r\n            switch (typeName) {\r\n                // Constructor Built-in Functions\r\n                // Value Constructor Built-in Functions\r\n                case \"bool\":\r\n                case \"i32\":\r\n                case \"u32\":\r\n                case \"f32\":\r\n                case \"f16\":\r\n                    return this._callConstructorValue(node, context);\r\n                case \"vec2\":\r\n                case \"vec3\":\r\n                case \"vec4\":\r\n                case \"vec2f\":\r\n                case \"vec3f\":\r\n                case \"vec4f\":\r\n                case \"vec2h\":\r\n                case \"vec3h\":\r\n                case \"vec4h\":\r\n                case \"vec2i\":\r\n                case \"vec3i\":\r\n                case \"vec4i\":\r\n                case \"vec2u\":\r\n                case \"vec3u\":\r\n                case \"vec4u\":\r\n                case \"vec2b\":\r\n                case \"vec3b\":\r\n                case \"vec4b\":\r\n                    return this._callConstructorVec(node, context);\r\n                case \"mat2x2\":\r\n                case \"mat2x2f\":\r\n                case \"mat2x2h\":\r\n                case \"mat2x3\":\r\n                case \"mat2x3f\":\r\n                case \"mat2x3h\":\r\n                case \"mat2x4\":\r\n                case \"mat2x4f\":\r\n                case \"mat2x4h\":\r\n                case \"mat3x2\":\r\n                case \"mat3x2f\":\r\n                case \"mat3x2h\":\r\n                case \"mat3x3\":\r\n                case \"mat3x3f\":\r\n                case \"mat3x3h\":\r\n                case \"mat3x4\":\r\n                case \"mat3x4f\":\r\n                case \"mat3x4h\":\r\n                case \"mat4x2\":\r\n                case \"mat4x2f\":\r\n                case \"mat4x2h\":\r\n                case \"mat4x3\":\r\n                case \"mat4x3f\":\r\n                case \"mat4x3h\":\r\n                case \"mat4x4\":\r\n                case \"mat4x4f\":\r\n                case \"mat4x4h\":\r\n                    return this._callConstructorMatrix(node, context);\r\n            }\r\n        }\r\n\r\n        const typeName = (node instanceof CreateExpr) ? node.type.name : node.name;\r\n        const typeInfo = (node instanceof CreateExpr) ? this.getTypeInfo(node.type) : this.getTypeInfo(node.name);\r\n        if (typeInfo === null) {\r\n            console.error(`Unknown type ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        if (typeInfo.size === 0) {\r\n            return null;\r\n        }\r\n\r\n        const data = new TypedData(new ArrayBuffer(typeInfo.size), typeInfo, 0);\r\n\r\n        // Assign the values in node.args to the data.\r\n        if (typeInfo instanceof StructInfo) {\r\n            if (node.args) {\r\n                for (let i = 0; i < node.args.length; ++i) {\r\n                    const memberInfo = typeInfo.members[i];\r\n                    const arg = node.args[i];\r\n                    const value = this.evalExpression(arg, context);\r\n                    data.setData(this, value, memberInfo.type, memberInfo.offset, context);\r\n                }\r\n            }\r\n        } else if (typeInfo instanceof ArrayInfo) {\r\n            let offset = 0;\r\n            if (node.args) {\r\n                for (let i = 0; i < node.args.length; ++i) {\r\n                    const arg = node.args[i];\r\n                    const value = this.evalExpression(arg, context);\r\n                    if (typeInfo.format === null) {\r\n                        if (value.typeInfo?.name === \"x32\") {\r\n                            typeInfo.format = this.getTypeInfo(\"i32\");\r\n                        } else {\r\n                            typeInfo.format = value.typeInfo;\r\n                        }\r\n                    }\r\n                    data.setData(this, value, typeInfo.format, offset, context);\r\n                    offset += typeInfo.stride;\r\n                }\r\n            }\r\n        } else {\r\n            console.error(`Unknown type \"${typeName}\". Line ${node.line}`);\r\n        }\r\n\r\n        if (node instanceof CreateExpr) {\r\n            return data.getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    _evalLiteral(node: LiteralExpr, context: ExecContext): Data | null {\r\n        const typeInfo = this.getTypeInfo(node.type);\r\n        const typeName = typeInfo.name;\r\n        if (typeName === \"x32\" || typeName === \"u32\" || typeName === \"f32\" || typeName === \"f16\" ||\r\n            typeName === \"i32\" || typeName === \"bool\") {\r\n            const data = new ScalarData(node.scalarValue, typeInfo);\r\n            return data;\r\n        }\r\n        if (typeName === \"vec2\" || typeName === \"vec3\" || typeName === \"vec4\" ||\r\n            typeName === \"vec2f\" || typeName === \"vec3f\" || typeName === \"vec4f\" ||\r\n            typeName === \"vec2h\" || typeName === \"vec3h\" || typeName === \"vec4h\" ||\r\n            typeName === \"vec2i\" || typeName === \"vec3i\" || typeName === \"vec4i\" ||\r\n            typeName === \"vec2u\" || typeName === \"vec3u\" || typeName === \"vec4u\") {\r\n            return this._callConstructorVec(node, context);\r\n        }\r\n        if (typeName === \"mat2x2\" || typeName === \"mat2x3\" || typeName === \"mat2x4\" ||\r\n            typeName === \"mat3x2\" || typeName === \"mat3x3\" || typeName === \"mat3x4\" ||\r\n            typeName === \"mat4x2\" || typeName === \"mat4x3\" || typeName === \"mat4x4\" ||\r\n            typeName === \"mat2x2f\" || typeName === \"mat2x3f\" || typeName === \"mat2x4f\" ||\r\n            typeName === \"mat3x2f\" || typeName === \"mat3x3f\" || typeName === \"mat3x4f\" ||\r\n            typeName === \"mat4x2f\" || typeName === \"mat4x3f\" || typeName === \"mat4x4f\" ||\r\n            typeName === \"mat2x2h\" || typeName === \"mat2x3h\" || typeName === \"mat2x4h\" ||\r\n            typeName === \"mat3x2h\" || typeName === \"mat3x3h\" || typeName === \"mat3x4h\" ||\r\n            typeName === \"mat4x2h\" || typeName === \"mat4x3h\" || typeName === \"mat4x4h\") {\r\n            return this._callConstructorMatrix(node, context);\r\n        }\r\n        return node.value;\r\n    }\r\n\r\n    _evalVariable(node: VariableExpr, context: ExecContext): Data | null {\r\n        const value = context.getVariableValue(node.name);\r\n        if (value === null) {\r\n            return value;\r\n        }\r\n        return value.getSubData(this, node.postfix, context);\r\n    }\r\n\r\n    static _priority = new Map<string, number>([[\"f32\", 0], [\"f16\", 1], [\"u32\", 2], [\"i32\", 3], [\"x32\", 3]]);\r\n    _maxFormatTypeInfo(x: TypeInfo[]): TypeInfo | null {\r\n        let t = x[0];\r\n        if (t.name === \"f32\") {\r\n            return t;\r\n        }\r\n        for (let i = 1; i < x.length; ++i) {\r\n            const tv = WgslExec._priority.get(t.name);\r\n            const xv = WgslExec._priority.get(x[i].name);\r\n            if (xv < tv) {\r\n                t = x[i];\r\n            }\r\n        }\r\n\r\n        if (t.name === \"x32\") {\r\n            return this.getTypeInfo(\"i32\");\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    _evalUnaryOp(node: UnaryOperator, context: ExecContext): Data | null {\r\n        const _r = this.evalExpression(node.right, context);\r\n\r\n        if (node.operator === \"&\") { \r\n            return new PointerData(_r);\r\n        } else if (node.operator === \"*\") {\r\n            if (_r instanceof PointerData) {\r\n                return _r.reference.getSubData(this, node.postfix, context);\r\n            }\r\n            console.error(`Invalid dereference. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const r = _r instanceof ScalarData ? _r.value : \r\n            _r instanceof VectorData ? Array.from(_r.data) : null;\r\n\r\n        switch (node.operator) {\r\n            case \"+\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => +x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(+rn, t);\r\n            }\r\n            case \"-\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => -x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(-rn, t);\r\n            }\r\n            case \"!\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => !x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(!rn ? 1 : 0, t);\r\n            }\r\n            case \"~\": {\r\n                if (isArray(r)) {\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ~x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_r.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(~rn, t);\r\n            }\r\n        }\r\n        console.error(`Invalid unary operator ${node.operator}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalBinaryOp(node: BinaryOperator, context: ExecContext): Data | null {\r\n        const _l = this.evalExpression(node.left, context);\r\n        const _r = this.evalExpression(node.right, context);\r\n\r\n        const l = _l instanceof ScalarData ? _l.value : \r\n            _l instanceof VectorData ? Array.from(_l.data) :\r\n            _l instanceof MatrixData ? Array.from(_l.data) : null;\r\n        const r = _r instanceof ScalarData ? _r.value : \r\n            _r instanceof VectorData ? Array.from(_r.data) : \r\n            _r instanceof MatrixData ? Array.from(_r.data) :\r\n            null;\r\n\r\n        switch (node.operator) {\r\n            case \"+\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x + ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x + rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln + x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln + rn, t);\r\n            }\r\n            case \"-\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x - ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x - rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln - x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln - rn, t);\r\n            }\r\n            case \"*\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n\r\n                    if (_l instanceof MatrixData && _r instanceof MatrixData) {\r\n                        const result = matrixMultiply(la, _l.typeInfo, ra, _r.typeInfo);\r\n                        if (result === null) {\r\n                            console.error(`Matrix multiplication failed. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        const colsB = MatrixTypeSize[_r.typeInfo.name][0];\r\n                        const rowsA = MatrixTypeSize[_l.typeInfo.name][1];\r\n                        const type = this.getTypeInfo(`mat${colsB}x${rowsA}f`);\r\n                        return new MatrixData(result, type);\r\n                    } else if (_l instanceof MatrixData && _r instanceof VectorData) {\r\n                        const result = matrixVectorMultiply(la, _l.typeInfo, ra, _r.typeInfo);\r\n                        if (result === null) {\r\n                            console.error(`Matrix vector multiplication failed. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        return new VectorData(result, _r.typeInfo);\r\n                    } else if (_l instanceof VectorData && _r instanceof MatrixData) {\r\n                        const result = vectorMatrixMultiply(la, _l.typeInfo, ra, _r.typeInfo);\r\n                        if (result === null) {\r\n                            console.error(`Matrix vector multiplication failed. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        return new VectorData(result, _l.typeInfo);\r\n                    } else {\r\n                        if (la.length !== ra.length) {\r\n                            console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                            return null;\r\n                        }\r\n                        const result = la.map((x: number, i: number) => x * ra[i]);\r\n                        return new VectorData(result, _l.typeInfo);\r\n                    }\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x * rn);\r\n                    if (_l instanceof MatrixData) {\r\n                        return new MatrixData(result, _l.typeInfo);\r\n                    }\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln * x);\r\n                    if (_r instanceof MatrixData) {\r\n                        return new MatrixData(result, _r.typeInfo);\r\n                    }\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln * rn, t);\r\n            }\r\n            case \"%\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x % ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x % rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln % x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln % rn, t);\r\n            }\r\n            case \"/\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x / ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x / rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln / x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln / rn, t);\r\n            }\r\n            case \"&\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x & ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x & rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln & x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln & rn, t);\r\n            }\r\n            case \"|\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x | ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x | rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln | x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln | rn, t);\r\n            }\r\n            case \"^\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x ^ ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x ^ rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln ^ x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln ^ rn, t);\r\n            }\r\n            case \"<<\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x << ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x << rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln << x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln << rn, t);\r\n            }\r\n            case \">>\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x >> ra[i]);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x >> rn);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln >> x);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                const t = this._maxFormatTypeInfo([_l.typeInfo, _r.typeInfo]);\r\n                return new ScalarData(ln >> rn, t);\r\n            }\r\n            case \">\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x > ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x > rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln > x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln > rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"<\":\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x < ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x < rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln < x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln < rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            case \"==\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x === ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x == rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln == x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln === rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"!=\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x !== ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x !== rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln !== x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln !== rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \">=\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x >= ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x >= rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln >= x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln >= rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"<=\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x <= ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x <= rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln <= x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln <= rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"&&\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x && ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x && rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln && x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln && rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n            case \"||\": {\r\n                if (isArray(l) && isArray(r)) {\r\n                    const la = l as number[];\r\n                    const ra = r as number[];\r\n                    if (la.length !== ra.length) {\r\n                        console.error(`Vector length mismatch. Line ${node.line}.`);\r\n                        return null;\r\n                    }\r\n                    const result = la.map((x: number, i: number) => x || ra[i] ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(l)) {\r\n                    const la = l as number[];\r\n                    const rn = r as number;\r\n                    const result = la.map((x: number, i: number) => x || rn ? 1 : 0);\r\n                    return new VectorData(result, _l.typeInfo);\r\n                } else if (isArray(r)) {\r\n                    const ln = l as number;\r\n                    const ra = r as number[];\r\n                    const result = ra.map((x: number, i: number) => ln || x ? 1 : 0);\r\n                    return new VectorData(result, _r.typeInfo);\r\n                }\r\n                const ln = l as number;\r\n                const rn = r as number;\r\n                return new ScalarData(ln || rn ? 1 : 0, this.getTypeInfo(\"bool\"));\r\n            }\r\n        }\r\n        console.error(`Unknown operator ${node.operator}. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _evalCall(node: CallExpr, context: ExecContext): Data | null {\r\n        if (node.cachedReturnValue !== null) {\r\n            return node.cachedReturnValue;\r\n        }\r\n\r\n        const subContext = context.clone();\r\n        subContext.currentFunctionName = node.name;\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (!f) {\r\n            if (node.isBuiltin) {\r\n                return this._callBuiltinFunction(node, subContext);\r\n            }\r\n\r\n            const typeInfo = this.getTypeInfo(node.name);\r\n            if (typeInfo) {\r\n                return this._evalCreate(node, context);\r\n            }\r\n\r\n            console.error(`Unknown function \"${node.name}\". Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n            const arg = f.node.args[ai];\r\n            const value = this.evalExpression(node.args[ai], subContext);\r\n            subContext.createVariable(arg.name, value, arg);\r\n        }\r\n\r\n        return this._execStatements(f.node.body, subContext);\r\n    }\r\n\r\n    _callBuiltinFunction(node: CallExpr | Call, context: ExecContext): Data | null {\r\n        switch (node.name) {\r\n            // Logical Built-in Functions\r\n            case \"all\":\r\n                return this.builtins.All(node, context);\r\n            case \"any\":\r\n                return this.builtins.Any(node, context);\r\n            case \"select\":\r\n                return this.builtins.Select(node, context);\r\n\r\n            // Array Built-in Functions\r\n            case \"arrayLength\":\r\n                return this.builtins.ArrayLength(node, context);\r\n\r\n            // Numeric Built-in Functions\r\n            case \"abs\":\r\n                return this.builtins.Abs(node, context);\r\n            case \"acos\":\r\n                return this.builtins.Acos(node, context);\r\n            case \"acosh\":\r\n                return this.builtins.Acosh(node, context);\r\n            case \"asin\":\r\n                return this.builtins.Asin(node, context);\r\n            case \"asinh\":\r\n                return this.builtins.Asinh(node, context);\r\n            case \"atan\":\r\n                return this.builtins.Atan(node, context);\r\n            case \"atanh\":\r\n                return this.builtins.Atanh(node, context);\r\n            case \"atan2\":\r\n                return this.builtins.Atan2(node, context);\r\n            case \"ceil\":\r\n                return this.builtins.Ceil(node, context);\r\n            case \"clamp\":\r\n                return this.builtins.Clamp(node, context);\r\n            case \"cos\":\r\n                return this.builtins.Cos(node, context);\r\n            case \"cosh\":\r\n                return this.builtins.Cosh(node, context);\r\n            case \"countLeadingZeros\":\r\n                return this.builtins.CountLeadingZeros(node, context);\r\n            case \"countOneBits\":\r\n                return this.builtins.CountOneBits(node, context);\r\n            case \"countTrailingZeros\":\r\n                return this.builtins.CountTrailingZeros(node, context);\r\n            case \"cross\":\r\n                return this.builtins.Cross(node, context);\r\n            case \"degrees\":\r\n                return this.builtins.Degrees(node, context);\r\n            case \"determinant\":\r\n                return this.builtins.Determinant(node, context);\r\n            case \"distance\":\r\n                return this.builtins.Distance(node, context);\r\n            case \"dot\":\r\n                return this.builtins.Dot(node, context);\r\n            case \"dot4U8Packed\":\r\n                return this.builtins.Dot4U8Packed(node, context);\r\n            case \"dot4I8Packed\":\r\n                return this.builtins.Dot4I8Packed(node, context);\r\n            case \"exp\":\r\n                return this.builtins.Exp(node, context);\r\n            case \"exp2\":\r\n                return this.builtins.Exp2(node, context);\r\n            case \"extractBits\":\r\n                return this.builtins.ExtractBits(node, context);\r\n            case \"faceForward\":\r\n                return this.builtins.FaceForward(node, context);\r\n            case \"firstLeadingBit\":\r\n                return this.builtins.FirstLeadingBit(node, context);\r\n            case \"firstTrailingBit\":\r\n                return this.builtins.FirstTrailingBit(node, context);\r\n            case \"floor\":\r\n                return this.builtins.Floor(node, context);\r\n            case \"fma\":\r\n                return this.builtins.Fma(node, context);\r\n            case \"fract\":\r\n                return this.builtins.Fract(node, context);\r\n            case \"frexp\":\r\n                return this.builtins.Frexp(node, context);\r\n            case \"insertBits\":\r\n                return this.builtins.InsertBits(node, context);\r\n            case \"inverseSqrt\":\r\n                return this.builtins.InverseSqrt(node, context);\r\n            case \"ldexp\":\r\n                return this.builtins.Ldexp(node, context);\r\n            case \"length\":\r\n                return this.builtins.Length(node, context);\r\n            case \"log\":\r\n                return this.builtins.Log(node, context);\r\n            case \"log2\":\r\n                return this.builtins.Log2(node, context);\r\n            case \"max\":\r\n                return this.builtins.Max(node, context);\r\n            case \"min\":\r\n                return this.builtins.Min(node, context);\r\n            case \"mix\":\r\n                return this.builtins.Mix(node, context);\r\n            case \"modf\":\r\n                return this.builtins.Modf(node, context);\r\n            case \"normalize\":\r\n                return this.builtins.Normalize(node, context);\r\n            case \"pow\":\r\n                return this.builtins.Pow(node, context);\r\n            case \"quantizeToF16\":\r\n                return this.builtins.QuantizeToF16(node, context);\r\n            case \"radians\":\r\n                return this.builtins.Radians(node, context);\r\n            case \"reflect\":\r\n                return this.builtins.Reflect(node, context);\r\n            case \"refract\":\r\n                return this.builtins.Refract(node, context);\r\n            case \"reverseBits\":\r\n                return this.builtins.ReverseBits(node, context);\r\n            case \"round\":\r\n                return this.builtins.Round(node, context);\r\n            case \"saturate\":\r\n                return this.builtins.Saturate(node, context);\r\n            case \"sign\":\r\n                return this.builtins.Sign(node, context);\r\n            case \"sin\":\r\n                return this.builtins.Sin(node, context);\r\n            case \"sinh\":\r\n                return this.builtins.Sinh(node, context);\r\n            case \"smoothStep\":\r\n                return this.builtins.SmoothStep(node, context);\r\n            case \"sqrt\":\r\n                return this.builtins.Sqrt(node, context);\r\n            case \"step\":\r\n                return this.builtins.Step(node, context);\r\n            case \"tan\":\r\n                return this.builtins.Tan(node, context);\r\n            case \"tanh\":\r\n                return this.builtins.Tanh(node, context);\r\n            case \"transpose\":\r\n                return this.builtins.Transpose(node, context);\r\n            case \"trunc\":\r\n                return this.builtins.Trunc(node, context);\r\n\r\n            // Derivative Built-in Functions\r\n            case \"dpdx\":\r\n                return this.builtins.Dpdx(node, context);\r\n            case \"dpdxCoarse\":\r\n                return this.builtins.DpdxCoarse(node, context);\r\n            case \"dpdxFine\":\r\n                return this.builtins.DpdxFine(node, context);\r\n            case \"dpdy\":\r\n                return this.builtins.Dpdy(node, context);\r\n            case \"dpdyCoarse\":\r\n                return this.builtins.DpdyCoarse(node, context);\r\n            case \"dpdyFine\":\r\n                return this.builtins.DpdyFine(node, context);\r\n            case \"fwidth\":\r\n                return this.builtins.Fwidth(node, context);\r\n            case \"fwidthCoarse\":\r\n                return this.builtins.FwidthCoarse(node, context);\r\n            case \"fwidthFine\":\r\n                return this.builtins.FwidthFine(node, context);\r\n\r\n            // Texture Built-in Functions\r\n            case \"textureDimensions\":\r\n                return this.builtins.TextureDimensions(node, context);\r\n            case \"textureGather\":\r\n                return this.builtins.TextureGather(node, context);\r\n            case \"textureGatherCompare\":\r\n                return this.builtins.TextureGatherCompare(node, context);\r\n            case \"textureLoad\":\r\n                return this.builtins.TextureLoad(node, context);\r\n            case \"textureNumLayers\":\r\n                return this.builtins.TextureNumLayers(node, context);\r\n            case \"textureNumLevels\":\r\n                return this.builtins.TextureNumLevels(node, context);\r\n            case \"textureNumSamples\":\r\n                return this.builtins.TextureNumSamples(node, context);\r\n            case \"textureSample\":\r\n                return this.builtins.TextureSample(node, context);\r\n            case \"textureSampleBias\":\r\n                return this.builtins.TextureSampleBias(node, context);\r\n            case \"textureSampleCompare\":\r\n                return this.builtins.TextureSampleCompare(node, context);\r\n            case \"textureSampleCompareLevel\":\r\n                return this.builtins.TextureSampleCompareLevel(node, context);\r\n            case \"textureSampleGrad\":\r\n                return this.builtins.TextureSampleGrad(node, context);\r\n            case \"textureSampleLevel\":\r\n                return this.builtins.TextureSampleLevel(node, context);\r\n            case \"textureSampleBaseClampToEdge\":\r\n                return this.builtins.TextureSampleBaseClampToEdge(node, context);\r\n            case \"textureStore\":\r\n                return this.builtins.TextureStore(node, context);\r\n\r\n            // Atomic Built-in Functions\r\n            case \"atomicLoad\":\r\n                return this.builtins.AtomicLoad(node, context);\r\n            case \"atomicStore\":\r\n                return this.builtins.AtomicStore(node, context);\r\n            case \"atomicAdd\":\r\n                return this.builtins.AtomicAdd(node, context);\r\n            case \"atomicSub\":\r\n                return this.builtins.AtomicSub(node, context);\r\n            case \"atomicMax\":\r\n                return this.builtins.AtomicMax(node, context);\r\n            case \"atomicMin\":\r\n                return this.builtins.AtomicMin(node, context);\r\n            case \"atomicAnd\":\r\n                return this.builtins.AtomicAnd(node, context);\r\n            case \"atomicOr\":\r\n                return this.builtins.AtomicOr(node, context);\r\n            case \"atomicXor\":\r\n                return this.builtins.AtomicXor(node, context);\r\n            case \"atomicExchange\":\r\n                return this.builtins.AtomicExchange(node, context);\r\n            case \"atomicCompareExchangeWeak\":\r\n                return this.builtins.AtomicCompareExchangeWeak(node, context);\r\n\r\n            // Data Packing Built-in Functions\r\n            case \"pack4x8snorm\":\r\n                return this.builtins.Pack4x8snorm(node, context);\r\n            case \"pack4x8unorm\":\r\n                return this.builtins.Pack4x8unorm(node, context);\r\n            case \"pack4xI8\":\r\n                return this.builtins.Pack4xI8(node, context);\r\n            case \"pack4xU8\":\r\n                return this.builtins.Pack4xU8(node, context);\r\n            case \"pack4x8Clamp\":\r\n                return this.builtins.Pack4x8Clamp(node, context);\r\n            case \"pack4xU8Clamp\":\r\n                return this.builtins.Pack4xU8Clamp(node, context);\r\n            case \"pack2x16snorm\":\r\n                return this.builtins.Pack2x16snorm(node, context);\r\n            case \"pack2x16unorm\":\r\n                return this.builtins.Pack2x16unorm(node, context);\r\n            case \"pack2x16float\":\r\n                return this.builtins.Pack2x16float(node, context);\r\n\r\n            // Data Unpacking Built-in Functions\r\n            case \"unpack4x8snorm\":\r\n                return this.builtins.Unpack4x8snorm(node, context);\r\n            case \"unpack4x8unorm\":\r\n                return this.builtins.Unpack4x8unorm(node, context);\r\n            case \"unpack4xI8\":\r\n                return this.builtins.Unpack4xI8(node, context);\r\n            case \"unpack4xU8\":\r\n                return this.builtins.Unpack4xU8(node, context);\r\n            case \"unpack2x16snorm\":\r\n                return this.builtins.Unpack2x16snorm(node, context);\r\n            case \"unpack2x16unorm\":\r\n                return this.builtins.Unpack2x16unorm(node, context);\r\n            case \"unpack2x16float\":\r\n                return this.builtins.Unpack2x16float(node, context);\r\n\r\n            // Synchronization Built-in Functions\r\n            case \"storageBarrier\":\r\n                return this.builtins.StorageBarrier(node, context);\r\n            case \"textureBarrier\":\r\n                return this.builtins.TextureBarrier(node, context);\r\n            case \"workgroupBarrier\":\r\n                return this.builtins.WorkgroupBarrier(node, context);\r\n            case \"workgroupUniformLoad\":\r\n                return this.builtins.WorkgroupUniformLoad(node, context);\r\n\r\n            // Subgroup Built-in Functions\r\n            case \"subgroupAdd\":\r\n                return this.builtins.SubgroupAdd(node, context);\r\n            case \"subgroupExclusiveAdd\":\r\n                return this.builtins.SubgroupExclusiveAdd(node, context);\r\n            case \"subgroupInclusiveAdd\":\r\n                return this.builtins.SubgroupInclusiveAdd(node, context);\r\n            case \"subgroupAll\":\r\n                return this.builtins.SubgroupAll(node, context);\r\n            case \"subgroupAnd\":\r\n                return this.builtins.SubgroupAnd(node, context);\r\n            case \"subgroupAny\":\r\n                return this.builtins.SubgroupAny(node, context);\r\n            case \"subgroupBallot\":\r\n                return this.builtins.SubgroupBallot(node, context);\r\n            case \"subgroupBroadcast\":\r\n                return this.builtins.SubgroupBroadcast(node, context);\r\n            case \"subgroupBroadcastFirst\":\r\n                return this.builtins.SubgroupBroadcastFirst(node, context);\r\n            case \"subgroupElect\":\r\n                return this.builtins.SubgroupElect(node, context);\r\n            case \"subgroupMax\":\r\n                return this.builtins.SubgroupMax(node, context);\r\n            case \"subgroupMin\":\r\n                return this.builtins.SubgroupMin(node, context);\r\n            case \"subgroupMul\":\r\n                return this.builtins.SubgroupMul(node, context);\r\n            case \"subgroupExclusiveMul\":\r\n                return this.builtins.SubgroupExclusiveMul(node, context);\r\n            case \"subgroupInclusiveMul\":\r\n                return this.builtins.SubgroupInclusiveMul(node, context);\r\n            case \"subgroupOr\":\r\n                return this.builtins.SubgroupOr(node, context);\r\n            case \"subgroupShuffle\":\r\n                return this.builtins.SubgroupShuffle(node, context);\r\n            case \"subgroupShuffleDown\":\r\n                return this.builtins.SubgroupShuffleDown(node, context);\r\n            case \"subgroupShuffleUp\":\r\n                return this.builtins.SubgroupShuffleUp(node, context);\r\n            case \"subgroupShuffleXor\":\r\n                return this.builtins.SubgroupShuffleXor(node, context);\r\n            case \"subgroupXor\":\r\n                return this.builtins.SubgroupXor(node, context);\r\n\r\n            // Quad Operations\r\n            case \"quadBroadcast\":\r\n                return this.builtins.QuadBroadcast(node, context);\r\n            case \"quadSwapDiagonal\":\r\n                return this.builtins.QuadSwapDiagonal(node, context);\r\n            case \"quadSwapX\":\r\n                return this.builtins.QuadSwapX(node, context);\r\n            case \"quadSwapY\":\r\n                return this.builtins.QuadSwapY(node, context);\r\n        }\r\n\r\n        const f = context.getFunction(node.name);\r\n        if (f) {\r\n            const subContext = context.clone();\r\n            for (let ai = 0; ai < f.node.args.length; ++ai) {\r\n                const arg = f.node.args[ai];\r\n                const value = this.evalExpression(node.args[ai], subContext);\r\n                subContext.setVariable(arg.name, value, arg);\r\n            }\r\n            return this._execStatements(f.node.body, subContext);\r\n        }\r\n\r\n        //console.error(`Function ${node.name} not found. Line ${node.line}`);\r\n        return null;\r\n    }\r\n\r\n    _callConstructorValue(node: CreateExpr, context: ExecContext): Data | null {\r\n        if (!node.args || node.args.length === 0) {\r\n            return new ScalarData(0, this.getTypeInfo(node.type));\r\n        }\r\n        const v = this.evalExpression(node.args[0], context);\r\n        v.typeInfo = this.getTypeInfo(node.type);\r\n        return v.getSubData(this, node.postfix, context).clone();\r\n    }\r\n\r\n    _callConstructorVec(node: CreateExpr | LiteralExpr, context: ExecContext): Data | null {\r\n        const typeInfo = this.getTypeInfo(node.type);\r\n        const typeName = node.type.getTypeName();\r\n\r\n        const count = VectorTypeSize[typeName];\r\n        if (count === undefined) {\r\n            console.error(`Invalid vec constructor ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const values: number[] = [];\r\n        if (node instanceof LiteralExpr) {\r\n            if (node.isVector) {\r\n                const a = node.vectorValue;\r\n                for (const v of a) {\r\n                    values.push(v);\r\n                }\r\n            } else {\r\n                values.push(node.scalarValue);\r\n            }\r\n        } else {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    const argValue = this.evalExpression(arg, context) ;\r\n                    if (argValue instanceof VectorData) {\r\n                        const vd = argValue.data;\r\n                        for (let i = 0; i < vd.length; ++i) {\r\n                            let e = vd[i];\r\n                            values.push(e);\r\n                        }\r\n                    } else if (argValue instanceof ScalarData) {\r\n                        let v = argValue.value;\r\n                        values.push(v);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (node.type instanceof TemplateType && node.type.format === null) {\r\n            node.type.format = TemplateType.f32; // TODO: get the format from the type of the arg.\r\n        }\r\n\r\n        if (values.length === 0) {\r\n            const values = new Array(count).fill(0);\r\n            return new VectorData(values, typeInfo).getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        if (values.length === 1) {\r\n            while (values.length < count) {\r\n                values.push(values[0]);\r\n            }\r\n        }\r\n\r\n        if (values.length < count) {\r\n            console.error(`Invalid vec constructor. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const data = new VectorData(values.length > count ? values.slice(0, count) : values, typeInfo);\r\n        return data.getSubData(this, node.postfix, context);\r\n    }\r\n\r\n    _callConstructorMatrix(node: CreateExpr | LiteralExpr, context: ExecContext): Data | null {\r\n        const typeInfo = this.getTypeInfo(node.type);\r\n        const typeName = node.type.getTypeName();\r\n\r\n        const count = MatrixTypeSize[typeName];\r\n        if (count === undefined) {\r\n            console.error(`Invalid matrix constructor ${typeName}. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        const values = [];\r\n        if (node instanceof LiteralExpr) {\r\n            if (node.isVector) {\r\n                const a = node.vectorValue;\r\n                for (const v of a) {\r\n                    values.push(v);\r\n                }\r\n            } else {\r\n                values.push(node.scalarValue);\r\n            }\r\n        } else {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    const argValue = this.evalExpression(arg, context) ;\r\n                    if (argValue instanceof VectorData) {\r\n                        values.push(...argValue.data);\r\n                    } else if (argValue instanceof ScalarData) {\r\n                        values.push(argValue.value);\r\n                    } else if (argValue instanceof MatrixData) {\r\n                        values.push(...argValue.data);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((typeInfo instanceof TemplateInfo) && typeInfo.format === null) {\r\n            typeInfo.format = this.getTypeInfo(\"f32\");\r\n        }\r\n\r\n        if (values.length === 0) {\r\n            const values = new Array(count[2]).fill(0);\r\n            return new MatrixData(values, typeInfo).getSubData(this, node.postfix, context);\r\n        }\r\n\r\n        if (values.length !== count[2]) {\r\n            console.error(`Invalid matrix constructor. Line ${node.line}`);\r\n            return null;\r\n        }\r\n\r\n        return new MatrixData(values, typeInfo).getSubData(this, node.postfix, context);\r\n    }\r\n}\r\n","import { Const, Alias, Struct } from \"../wgsl_ast.js\";\r\n\r\nexport class ParseContext {\r\n  constants: Map<string, Const> = new Map();\r\n  aliases: Map<string, Alias> = new Map();\r\n  structs: Map<string, Struct> = new Map();\r\n}\r\n","import { WgslScanner, Token, TokenType, TokenTypes } from \"./wgsl_scanner.js\";\r\nimport * as AST from \"./wgsl_ast.js\";\r\nimport { WgslExec } from \"./wgsl_exec.js\";\r\nimport { TemplateInfo } from \"./reflect/info.js\";\r\nimport { ScalarData } from \"./wgsl_ast.js\";\r\nimport { ParseContext } from \"./ast/parse_context.js\";\r\n\r\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\r\nexport class WgslParser {\r\n  _tokens: Token[] = [];\r\n  _current: number = 0;\r\n  _currentLine: number = 1;\r\n  _deferArrayCountEval: Object[] = [];\r\n  _currentLoop: AST.Statement[] = [];\r\n  _context = new ParseContext();\r\n  _exec = new WgslExec();\r\n  _forwardTypeCount: number = 0;;\r\n\r\n  parse(tokensOrCode: Token[] | string): AST.Statement[] {\r\n    this._initialize(tokensOrCode);\r\n\r\n    this._deferArrayCountEval.length = 0;\r\n\r\n    const statements: AST.Statement[] = [];\r\n    while (!this._isAtEnd()) {\r\n      const statement = this._global_decl_or_directive();\r\n      if (!statement) {\r\n        break;\r\n      }\r\n      statements.push(statement);\r\n    }\r\n\r\n    // Since constants can be declared after they are used, and\r\n    // constants can be used to size arrays, defer calculating the\r\n    // size until after the shader has finished parsing.\r\n    if (this._deferArrayCountEval.length > 0) {\r\n      for (const arrayDecl of this._deferArrayCountEval) {\r\n        const arrayType = arrayDecl[\"arrayType\"];\r\n        const countNode = arrayDecl[\"countNode\"];\r\n\r\n        if (countNode instanceof AST.VariableExpr) {\r\n          const variable = countNode as AST.VariableExpr;\r\n          const name = variable.name;\r\n          const constant = this._context.constants.get(name);\r\n          if (constant) {\r\n            try {\r\n              const count = constant.constEvaluate(this._exec);\r\n              arrayType.count = count;\r\n            } catch (e) {\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this._deferArrayCountEval.length = 0;\r\n    }\r\n\r\n    if (this._forwardTypeCount > 0) {\r\n      for (const statement of statements) {\r\n        statement.search((node) => {\r\n          if (node instanceof AST.Member) {\r\n            node.type = this._forwardType(node.type);\r\n          } else if (node instanceof AST.PointerType) {\r\n            node.type = this._forwardType(node.type);\r\n          } else if (node instanceof AST.ArrayType) {\r\n            node.format = this._forwardType(node.format);\r\n          } else if (node instanceof AST.Var || node instanceof AST.Let || node instanceof AST.Const) {\r\n            node.type = this._forwardType(node.type);\r\n          } else if (node instanceof AST.Function) {\r\n            node.returnType = this._forwardType(node.returnType);\r\n          } else if (node instanceof AST.Argument) {\r\n            node.type = this._forwardType(node.type);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return statements;\r\n  }\r\n\r\n  _forwardType(t: AST.Type | null): AST.Type | null {\r\n    if (t instanceof AST.ForwardType) {\r\n      const ft = this._getType(t.name);\r\n      if (ft) {\r\n        return ft;\r\n      }\r\n    } else if (t instanceof AST.PointerType) {\r\n      t.type = this._forwardType(t.type);\r\n    } else if (t instanceof AST.ArrayType) {\r\n      t.format = this._forwardType(t.format);\r\n    }\r\n    return t;\r\n  }\r\n\r\n  _initialize(tokensOrCode: Token[] | string) {\r\n    if (tokensOrCode) {\r\n      if (typeof tokensOrCode == \"string\") {\r\n        const scanner = new WgslScanner(tokensOrCode);\r\n        this._tokens = scanner.scanTokens();\r\n      } else {\r\n        this._tokens = tokensOrCode;\r\n      }\r\n    } else {\r\n      this._tokens = [];\r\n    }\r\n    this._current = 0;\r\n  }\r\n\r\n  _updateNode<T extends AST.Node>(n: T, l?: number): T {\r\n    n.line = l ?? this._currentLine;\r\n    return n;\r\n  }\r\n\r\n  _error(token: Token, message: string | null): Object {\r\n    return {\r\n      token,\r\n      message,\r\n      toString: function () {\r\n        return `${message}`;\r\n      },\r\n    };\r\n  }\r\n\r\n  _isAtEnd(): boolean {\r\n    return (\r\n      this._current >= this._tokens.length ||\r\n      this._peek().type == TokenTypes.eof\r\n    );\r\n  }\r\n\r\n  _match(types: TokenType | TokenType[]): boolean {\r\n    if (types instanceof TokenType) {\r\n      if (this._check(types)) {\r\n        this._advance();\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0, l = types.length; i < l; ++i) {\r\n      const type = types[i];\r\n      if (this._check(type)) {\r\n        this._advance();\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _consume(types: TokenType | TokenType[], message: string | null): Token {\r\n    if (this._check(types)) {\r\n      return this._advance();\r\n    }\r\n    throw this._error(this._peek(), `${message}. Line:${this._currentLine}`);\r\n  }\r\n\r\n  _check(types: TokenType | TokenType[]): boolean {\r\n    if (this._isAtEnd()) {\r\n      return false;\r\n    }\r\n    const tk = this._peek();\r\n    if (types instanceof Array) {\r\n      const t = tk.type;\r\n      let hasNameType = false;\r\n      for (const type of types) {\r\n        if (t === type) {\r\n          return true;\r\n        }\r\n        if (type === TokenTypes.tokens.name) {\r\n          hasNameType =  true;\r\n        }\r\n      }\r\n      if (hasNameType) {\r\n        // ident can include any of the other keywords, so special case it.\r\n        const match = (TokenTypes.tokens.name.rule as RegExp).exec(tk.lexeme);\r\n        if (match && match.index == 0 && match[0] == tk.lexeme) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    if (tk.type === types) {\r\n      return true;\r\n    }\r\n\r\n    // ident can include any of the other keywords, so special case it.\r\n    if (types === TokenTypes.tokens.name) {\r\n      const match = (TokenTypes.tokens.name.rule as RegExp).exec(tk.lexeme);\r\n      return match && match.index == 0 && match[0] == tk.lexeme;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _advance(): Token {\r\n    this._currentLine = this._peek()?.line ?? -1;\r\n    if (!this._isAtEnd()) {\r\n      this._current++;\r\n    }\r\n    return this._previous();\r\n  }\r\n\r\n  _peek(): Token {\r\n    return this._tokens[this._current];\r\n  }\r\n\r\n  _previous(): Token {\r\n    return this._tokens[this._current - 1];\r\n  }\r\n\r\n  _global_decl_or_directive(): AST.Statement | null {\r\n    // semicolon\r\n    // global_variable_decl semicolon\r\n    // global_constant_decl semicolon\r\n    // type_alias semicolon\r\n    // struct_decl\r\n    // function_decl\r\n    // enable_directive\r\n\r\n    // Ignore any stand-alone semicolons\r\n    while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd());\r\n\r\n    if (this._match(TokenTypes.keywords.alias)) {\r\n      const type = this._type_alias();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([type]);\r\n      return type;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.diagnostic)) {\r\n      const directive = this._diagnostic();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([directive]);\r\n      return directive;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.requires)) {\r\n      const requires = this._requires_directive();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([requires]);\r\n      return requires;\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.enable)) {\r\n      const enable = this._enable_directive();\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      this._exec.reflection.updateAST([enable]);\r\n      return enable;\r\n    }\r\n\r\n    // The following statements have an optional attribute*\r\n    const attrs = this._attribute();\r\n\r\n    if (this._check(TokenTypes.keywords.var)) {\r\n      const _var = this._global_variable_decl();\r\n      if (_var != null) {\r\n        _var.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_var]);\r\n      return _var;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.override)) {\r\n      const _override = this._override_variable_decl();\r\n      if (_override != null) {\r\n        _override.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_override]);\r\n      return _override;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.let)) {\r\n      const _let = this._global_let_decl();\r\n      if (_let != null) {\r\n        _let.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_let]);\r\n      return _let;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.const)) {\r\n      const _const = this._global_const_decl();\r\n      if (_const != null) {\r\n        _const.attributes = attrs;\r\n      }\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n      this._exec.reflection.updateAST([_const]);\r\n      return _const;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.struct)) {\r\n      const _struct = this._struct_decl();\r\n      if (_struct != null) {\r\n        _struct.attributes = attrs;\r\n      }\r\n      this._exec.reflection.updateAST([_struct]);\r\n      return _struct;\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.fn)) {\r\n      const _fn = this._function_decl();\r\n      if (_fn != null) {\r\n        _fn.attributes = attrs;\r\n      }\r\n      this._exec.reflection.updateAST([_fn]);\r\n      return _fn;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _function_decl(): AST.Function | null {\r\n    // attribute* function_header compound_statement\r\n    // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\r\n    if (!this._match(TokenTypes.keywords.fn)) {\r\n      return null;\r\n    }\r\n\r\n    const startLine = this._currentLine;\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected function name.\"\r\n    ).toString();\r\n\r\n    this._consume(\r\n      TokenTypes.tokens.paren_left,\r\n      \"Expected '(' for function arguments.\"\r\n    );\r\n\r\n    const args: AST.Argument[] = [];\r\n    if (!this._check(TokenTypes.tokens.paren_right)) {\r\n      do {\r\n        if (this._check(TokenTypes.tokens.paren_right)) {\r\n          break;\r\n        }\r\n        const argAttrs = this._attribute();\r\n\r\n        const name = this._consume(\r\n          TokenTypes.tokens.name,\r\n          \"Expected argument name.\"\r\n        ).toString();\r\n\r\n        this._consume(\r\n          TokenTypes.tokens.colon,\r\n          \"Expected ':' for argument type.\"\r\n        );\r\n\r\n        const typeAttrs = this._attribute();\r\n        const type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n\r\n          args.push(this._updateNode(new AST.Argument(name, type, argAttrs)));\r\n        }\r\n      } while (this._match(TokenTypes.tokens.comma));\r\n    }\r\n\r\n    this._consume(\r\n      TokenTypes.tokens.paren_right,\r\n      \"Expected ')' after function arguments.\"\r\n    );\r\n\r\n    let _return: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.arrow)) {\r\n      const attrs = this._attribute();\r\n      _return = this._type_decl();\r\n      if (_return != null) {\r\n        _return.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    const body = this._compound_statement();\r\n\r\n    const endLine = this._currentLine;\r\n\r\n    return this._updateNode(new AST.Function(name, args, _return, body, startLine, endLine), startLine);\r\n  }\r\n\r\n  _compound_statement(): AST.Statement[] {\r\n    // brace_left statement* brace_right\r\n    const statements: AST.Statement[] = [];\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\r\n    while (!this._check(TokenTypes.tokens.brace_right)) {\r\n      const statement = this._statement();\r\n      if (statement !== null) {\r\n        statements.push(statement as AST.Statement);\r\n      }\r\n    }\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\r\n\r\n    return statements;\r\n  }\r\n\r\n  _statement(): AST.Statement | AST.Statement[] | null {\r\n    // semicolon\r\n    // return_statement semicolon\r\n    // if_statement\r\n    // switch_statement\r\n    // loop_statement\r\n    // for_statement\r\n    // func_call_statement semicolon\r\n    // variable_statement semicolon\r\n    // break_statement semicolon\r\n    // continue_statement semicolon\r\n    // continuing_statement compound_statement\r\n    // discard semicolon\r\n    // assignment_statement semicolon\r\n    // compound_statement\r\n    // increment_statement semicolon\r\n    // decrement_statement semicolon\r\n    // static_assert_statement semicolon\r\n\r\n    // Ignore any stand-alone semicolons\r\n    while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd());\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.if)) {\r\n      return this._if_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.switch)) {\r\n      return this._switch_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.loop)) {\r\n      return this._loop_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.for)) {\r\n      return this._for_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.while)) {\r\n      return this._while_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.continuing)) {\r\n      return this._continuing_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.keywords.static_assert)) {\r\n      return this._static_assert_statement();\r\n    }\r\n\r\n    if (this._check(TokenTypes.tokens.brace_left)) {\r\n      return this._compound_statement();\r\n    }\r\n\r\n    let result: AST.Statement | null = null;\r\n    if (this._check(TokenTypes.keywords.return)) {\r\n      result = this._return_statement();\r\n    } else if (this._check([TokenTypes.keywords.var, TokenTypes.keywords.let, TokenTypes.keywords.const])) {\r\n      result = this._variable_statement();\r\n    } else if (this._match(TokenTypes.keywords.discard)) {\r\n      result = this._updateNode(new AST.Discard());\r\n    } else if (this._match(TokenTypes.keywords.break)) {\r\n      const breakStmt = this._updateNode(new AST.Break());\r\n      if (this._currentLoop.length > 0) {\r\n        const loop = this._currentLoop[this._currentLoop.length - 1];\r\n        breakStmt.loopId = loop.id;\r\n      } else {\r\n        // This break statement is not inside a loop.\r\n        //throw this._error(this._peek(), `Break statement must be inside a loop. Line: ${breakStmt.line}`);\r\n      }\r\n      result = breakStmt;\r\n      if (this._check(TokenTypes.keywords.if)) {\r\n        // break-if\r\n        this._advance();\r\n        breakStmt.condition = this._optional_paren_expression();\r\n      }\r\n    } else if (this._match(TokenTypes.keywords.continue)) {\r\n      const continueStmt = this._updateNode(new AST.Continue());\r\n      if (this._currentLoop.length > 0) {\r\n        const loop = this._currentLoop[this._currentLoop.length - 1];\r\n        continueStmt.loopId = loop.id;\r\n      } else {\r\n        // This continue statement is not inside a loop.\r\n        throw this._error(this._peek(), `Continue statement must be inside a loop. Line: ${continueStmt.line}`);\r\n      }\r\n      result = continueStmt;\r\n    } else {\r\n      result =\r\n        this._increment_decrement_statement() ||\r\n        this._func_call_statement() ||\r\n        this._assignment_statement();\r\n    }\r\n\r\n    if (result != null) {\r\n      this._consume(\r\n        TokenTypes.tokens.semicolon,\r\n        \"Expected ';' after statement.\"\r\n      );\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  _static_assert_statement(): AST.StaticAssert | null {\r\n    if (!this._match(TokenTypes.keywords.static_assert)) {\r\n      return null;\r\n    }\r\n    const line = this._currentLine;\r\n    const expression = this._optional_paren_expression();\r\n    return this._updateNode(new AST.StaticAssert(expression), line);\r\n  }\r\n\r\n  _while_statement(): AST.While | null {\r\n    if (!this._match(TokenTypes.keywords.while)) {\r\n      return null;\r\n    }\r\n\r\n    const whileLoop = this._updateNode(new AST.While(null, null));\r\n    this._currentLoop.push(whileLoop);\r\n\r\n    whileLoop.condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    whileLoop.body = this._compound_statement();\r\n\r\n    this._currentLoop.pop();\r\n\r\n    return whileLoop;\r\n  }\r\n\r\n  _continuing_statement(): AST.Continuing | null {\r\n    const loopId = this._currentLoop.length > 0 ? this._currentLoop[this._currentLoop.length - 1].id : -1;\r\n    if (!this._match(TokenTypes.keywords.continuing)) {\r\n      return null;\r\n    }\r\n    const line = this._currentLine;\r\n    const block = this._compound_statement();\r\n    return this._updateNode(new AST.Continuing(block, loopId), line);\r\n  }\r\n\r\n  _for_statement(): AST.For | null {\r\n    // for paren_left for_header paren_right compound_statement\r\n    if (!this._match(TokenTypes.keywords.for)) {\r\n      return null;\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n\r\n    const forLoop = this._updateNode(new AST.For(null, null, null, null));\r\n\r\n    this._currentLoop.push(forLoop);\r\n\r\n    // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\r\n    forLoop.init = !this._check(TokenTypes.tokens.semicolon)\r\n      ? this._for_init()\r\n      : null;\r\n    this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n    forLoop.condition = !this._check(TokenTypes.tokens.semicolon)\r\n      ? this._short_circuit_or_expression()\r\n      : null;\r\n    this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\r\n    forLoop.increment = !this._check(TokenTypes.tokens.paren_right)\r\n      ? this._for_increment()\r\n      : null;\r\n\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    forLoop.body = this._compound_statement();\r\n\r\n    this._currentLoop.pop();\r\n\r\n    return forLoop;\r\n  }\r\n\r\n  _for_init(): AST.Statement | null {\r\n    // (variable_statement assignment_statement func_call_statement)?\r\n    return (\r\n      this._variable_statement() ||\r\n      this._func_call_statement() ||\r\n      this._assignment_statement()\r\n    );\r\n  }\r\n\r\n  _for_increment(): AST.Statement | null {\r\n    // (assignment_statement func_call_statement increment_statement)?\r\n    return (\r\n      this._func_call_statement() ||\r\n      this._increment_decrement_statement() ||\r\n      this._assignment_statement()\r\n    );\r\n  }\r\n\r\n  _variable_statement(): AST.Var | AST.Let | AST.Const | null {\r\n    // variable_decl\r\n    // variable_decl equal short_circuit_or_expression\r\n    // let (ident variable_ident_decl) equal short_circuit_or_expression\r\n    // const (ident variable_ident_decl) equal short_circuit_or_expression\r\n    if (this._check(TokenTypes.keywords.var)) {\r\n      const _var = this._variable_decl();\r\n      if (_var === null) {\r\n        throw this._error(this._peek(), \"Variable declaration expected.\");\r\n      }\r\n      let value: AST.Expression | null = null;\r\n      if (this._match(TokenTypes.tokens.equal)) {\r\n        value = this._short_circuit_or_expression();\r\n      }\r\n\r\n      return this._updateNode(new AST.Var(\r\n        _var.name,\r\n        _var.type,\r\n        _var.storage,\r\n        _var.access,\r\n        value\r\n      ), _var.line);\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.let)) {\r\n      const line = this._currentLine;\r\n      const name = this._consume(\r\n        TokenTypes.tokens.name,\r\n        \"Expected name for let.\"\r\n      ).toString();\r\n      let type: AST.Type | null = null;\r\n      if (this._match(TokenTypes.tokens.colon)) {\r\n        const typeAttrs = this._attribute();\r\n        type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n        }\r\n      }\r\n      this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\r\n      const value = this._short_circuit_or_expression();\r\n      return this._updateNode(new AST.Let(name, type, null, null, value), line);\r\n    }\r\n\r\n    if (this._match(TokenTypes.keywords.const)) {\r\n      const line = this._currentLine;\r\n      const name = this._consume(\r\n        TokenTypes.tokens.name,\r\n        \"Expected name for const.\"\r\n      ).toString();\r\n      let type: AST.Type | null = null;\r\n      if (this._match(TokenTypes.tokens.colon)) {\r\n        const typeAttrs = this._attribute();\r\n        type = this._type_decl();\r\n        if (type != null) {\r\n          type.attributes = typeAttrs;\r\n        }\r\n      }\r\n      this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\r\n      const value = this._short_circuit_or_expression();\r\n      if (type === null && value instanceof AST.LiteralExpr) {\r\n        type = value.type;\r\n      }\r\n      return this._updateNode(new AST.Const(name, type, null, null, value), line);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _increment_decrement_statement(): AST.Statement | null {\r\n    const savedPos = this._current;\r\n\r\n    const _var = this._unary_expression();\r\n    if (_var == null) {\r\n      return null;\r\n    }\r\n\r\n    if (!this._check(TokenTypes.increment_operators)) {\r\n      this._current = savedPos;\r\n      return null;\r\n    }\r\n\r\n    const token = this._consume(\r\n      TokenTypes.increment_operators,\r\n      \"Expected increment operator\"\r\n    );\r\n\r\n    return this._updateNode(new AST.Increment(\r\n      token.type === TokenTypes.tokens.plus_plus\r\n        ? AST.IncrementOperator.increment\r\n        : AST.IncrementOperator.decrement,\r\n      _var));\r\n  }\r\n\r\n  _assignment_statement(): AST.Assign | null {\r\n    // (unary_expression underscore) equal short_circuit_or_expression\r\n    let _var: AST.Expression | null = null;\r\n    const line = this._currentLine;\r\n\r\n    if (this._check(TokenTypes.tokens.brace_right)) {\r\n      return null;\r\n    }\r\n\r\n    let isUnderscore = this._match(TokenTypes.tokens.underscore);\r\n    if (!isUnderscore) {\r\n      _var = this._unary_expression();\r\n    }\r\n\r\n    if (!isUnderscore && _var == null) {\r\n      return null;\r\n    }\r\n\r\n    const type = this._consume(\r\n      TokenTypes.assignment_operators,\r\n      \"Expected assignment operator.\");\r\n\r\n    const value = this._short_circuit_or_expression();\r\n\r\n    return this._updateNode(new AST.Assign(\r\n      AST.AssignOperator.parse(type.lexeme),\r\n      _var as AST.Expression,\r\n      value), line);\r\n  }\r\n\r\n  _func_call_statement(): AST.Call | null {\r\n    // ident argument_expression_list\r\n    if (!this._check(TokenTypes.tokens.ident)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    const savedPos = this._current;\r\n    const name = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected function name.\"\r\n    );\r\n    const args = this._argument_expression_list();\r\n\r\n    if (args === null) {\r\n      this._current = savedPos;\r\n      return null;\r\n    }\r\n\r\n    return this._updateNode(new AST.Call(name.lexeme, args), line);\r\n  }\r\n\r\n  _loop_statement(): AST.Loop | null {\r\n    // loop brace_left statement* continuing_statement? brace_right\r\n    if (!this._match(TokenTypes.keywords.loop)) {\r\n      return null;\r\n    }\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\r\n\r\n    const loop = this._updateNode(new AST.Loop([], null));\r\n    this._currentLoop.push(loop);\r\n\r\n    // statement*\r\n    let statement = this._statement();\r\n    while (statement !== null) {\r\n      if (Array.isArray(statement)) {\r\n        for (let s of statement) {\r\n          loop.body.push(s);\r\n        }\r\n      } else {\r\n        loop.body.push(statement);\r\n      }\r\n      // Keep continuing in the loop body statements so it can be\r\n      // executed in the stackframe of the body statements.\r\n      if (statement instanceof AST.Continuing) {\r\n        loop.continuing = statement;\r\n        // Continuing should be the last statement in the loop.\r\n        break;\r\n      }\r\n      statement = this._statement();\r\n    }\r\n\r\n    this._currentLoop.pop();\r\n\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\r\n\r\n    return loop;\r\n  }\r\n\r\n  _switch_statement(): AST.Switch | null {\r\n    // switch optional_paren_expression brace_left switch_body+ brace_right\r\n    if (!this._match(TokenTypes.keywords.switch)) {\r\n      return null;\r\n    }\r\n\r\n    const switchStmt = this._updateNode(new AST.Switch(null, []));\r\n\r\n    this._currentLoop.push(switchStmt);\r\n\r\n    switchStmt.condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\r\n    switchStmt.cases = this._switch_body();\r\n    if (switchStmt.cases == null || switchStmt.cases.length == 0) {\r\n      throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\r\n    }\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\r\n\r\n    this._currentLoop.pop();\r\n\r\n    return switchStmt;\r\n  }\r\n\r\n  _switch_body(): AST.SwitchCase[] {\r\n    // case case_selectors optional_colon brace_left case_body? brace_right\r\n    // default optional_colon brace_left case_body? brace_right\r\n    const cases: AST.SwitchCase[] = [];\r\n\r\n    let hasDefault = false;\r\n    while (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\r\n      if (this._match(TokenTypes.keywords.case)) {\r\n        const selectors = this._case_selectors();\r\n        for (const selector of selectors) {\r\n          if (selector instanceof AST.DefaultSelector) {\r\n            if (hasDefault) {\r\n              throw this._error(this._previous(), \"Multiple default cases in switch statement.\");\r\n            }\r\n            hasDefault = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        this._match(TokenTypes.tokens.colon); // colon is optional\r\n\r\n        let attributes = null;\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n          attributes = this._attribute();\r\n        }\r\n\r\n        this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch case.\");\r\n\r\n        const body = this._case_body();\r\n\r\n        this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch case.\");\r\n\r\n        cases.push(this._updateNode(new AST.Case(selectors, body)));\r\n      }\r\n\r\n      if (this._match(TokenTypes.keywords.default)) {\r\n        if (hasDefault) {\r\n          throw this._error(this._previous(), \"Multiple default cases in switch statement.\");\r\n        }\r\n        this._match(TokenTypes.tokens.colon); // colon is optional\r\n\r\n        let attributes = null;\r\n        if (this._check(TokenTypes.tokens.attr)) {\r\n          attributes = this._attribute();\r\n        }\r\n\r\n        this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch default.\");\r\n\r\n        const body = this._case_body();\r\n\r\n        this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch default.\");\r\n\r\n        cases.push(this._updateNode(new AST.Default(body)));\r\n      }\r\n    }\r\n\r\n    return cases;\r\n  }\r\n\r\n  _case_selectors(): AST.Expression[] {\r\n    // case_selector (comma case_selector)* comma?\r\n    // case_selector: expression | default\r\n    const selectors = [];\r\n\r\n    if (this._match(TokenTypes.keywords.default)) {\r\n      selectors.push(this._updateNode(new AST.DefaultSelector()));\r\n    } else {\r\n      selectors.push(this._shift_expression());\r\n    }\r\n\r\n    while (this._match(TokenTypes.tokens.comma)) {\r\n      if (this._match(TokenTypes.keywords.default)) {\r\n        selectors.push(this._updateNode(new AST.DefaultSelector()));\r\n      } else {\r\n        selectors.push(this._shift_expression());\r\n      }\r\n    }\r\n\r\n    return selectors;\r\n  }\r\n\r\n  _case_body(): AST.Statement[] {\r\n    // statement case_body?\r\n    // fallthrough semicolon\r\n    if (this._match(TokenTypes.keywords.fallthrough)) {\r\n      this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\r\n      return [];\r\n    }\r\n\r\n    let statement = this._statement();\r\n    if (statement == null) {\r\n      return [];\r\n    }\r\n\r\n    if (!(statement instanceof Array)) {\r\n      statement = [statement];\r\n    }\r\n\r\n    const nextStatement = this._case_body();\r\n    if (nextStatement.length == 0) {\r\n      return statement;\r\n    }\r\n\r\n    return [...statement, nextStatement[0]];\r\n  }\r\n\r\n  _if_statement(): AST.If | null {\r\n    // if optional_paren_expression compound_statement elseif_statement? else_statement?\r\n    if (!this._match(TokenTypes.keywords.if)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    const condition = this._optional_paren_expression();\r\n\r\n    let attributes = null;\r\n    if (this._check(TokenTypes.tokens.attr)) {\r\n      attributes = this._attribute();\r\n    }\r\n\r\n    const block = this._compound_statement();\r\n\r\n    let elseif: AST.ElseIf[] | null = [];\r\n    if (this._match_elseif()) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      elseif = this._elseif_statement(elseif);\r\n    }\r\n\r\n    let _else: AST.Statement[] | null = null;\r\n    if (this._match(TokenTypes.keywords.else)) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      _else = this._compound_statement();\r\n    }\r\n\r\n    return this._updateNode(new AST.If(condition, block, elseif, _else), line);\r\n  }\r\n\r\n  _match_elseif(): boolean {\r\n    if (this._tokens[this._current].type === TokenTypes.keywords.else &&\r\n      this._tokens[this._current + 1].type === TokenTypes.keywords.if) {\r\n      this._advance();\r\n      this._advance();\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _elseif_statement(elseif: AST.ElseIf[] = []): AST.ElseIf[] {\r\n    // else_if optional_paren_expression compound_statement elseif_statement?\r\n    const condition = this._optional_paren_expression();\r\n    const block = this._compound_statement();\r\n    elseif.push(this._updateNode(new AST.ElseIf(condition, block)));\r\n    if (this._match_elseif()) {\r\n      let attributes = null;\r\n      if (this._check(TokenTypes.tokens.attr)) {\r\n        attributes = this._attribute();\r\n      }\r\n      this._elseif_statement(elseif);\r\n    }\r\n    return elseif;\r\n  }\r\n\r\n  _return_statement(): AST.Return | null {\r\n    // return short_circuit_or_expression?\r\n    if (!this._match(TokenTypes.keywords.return)) {\r\n      return null;\r\n    }\r\n    const value = this._short_circuit_or_expression();\r\n    return this._updateNode(new AST.Return(value));\r\n  }\r\n\r\n  _short_circuit_or_expression(): AST.Expression {\r\n    // short_circuit_and_expression\r\n    // short_circuit_or_expression or_or short_circuit_and_expression\r\n    let expr = this._short_circuit_and_expr();\r\n    while (this._match(TokenTypes.tokens.or_or)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._short_circuit_and_expr()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _short_circuit_and_expr(): AST.Expression {\r\n    // inclusive_or_expression\r\n    // short_circuit_and_expression and_and inclusive_or_expression\r\n    let expr = this._inclusive_or_expression();\r\n    while (this._match(TokenTypes.tokens.and_and)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._inclusive_or_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _inclusive_or_expression(): AST.Expression {\r\n    // exclusive_or_expression\r\n    // inclusive_or_expression or exclusive_or_expression\r\n    let expr = this._exclusive_or_expression();\r\n    while (this._match(TokenTypes.tokens.or)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._exclusive_or_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _exclusive_or_expression(): AST.Expression {\r\n    // and_expression\r\n    // exclusive_or_expression xor and_expression\r\n    let expr = this._and_expression();\r\n    while (this._match(TokenTypes.tokens.xor)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._and_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _and_expression(): AST.Expression {\r\n    // equality_expression\r\n    // and_expression and equality_expression\r\n    let expr = this._equality_expression();\r\n    while (this._match(TokenTypes.tokens.and)) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._equality_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _equality_expression(): AST.Expression {\r\n    // relational_expression\r\n    // relational_expression equal_equal relational_expression\r\n    // relational_expression not_equal relational_expression\r\n    const expr = this._relational_expression();\r\n    if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {\r\n      return this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._relational_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _relational_expression(): AST.Expression {\r\n    // shift_expression\r\n    // relational_expression less_than shift_expression\r\n    // relational_expression greater_than shift_expression\r\n    // relational_expression less_than_equal shift_expression\r\n    // relational_expression greater_than_equal shift_expression\r\n    let expr = this._shift_expression();\r\n    while (this._match([\r\n        TokenTypes.tokens.less_than,\r\n        TokenTypes.tokens.greater_than,\r\n        TokenTypes.tokens.less_than_equal,\r\n        TokenTypes.tokens.greater_than_equal,\r\n      ])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._shift_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _shift_expression(): AST.Expression {\r\n    // additive_expression\r\n    // shift_expression shift_left additive_expression\r\n    // shift_expression shift_right additive_expression\r\n    let expr = this._additive_expression();\r\n    while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._additive_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _additive_expression(): AST.Expression {\r\n    // multiplicative_expression\r\n    // additive_expression plus multiplicative_expression\r\n    // additive_expression minus multiplicative_expression\r\n    let expr = this._multiplicative_expression();\r\n    while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._multiplicative_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _multiplicative_expression(): AST.Expression {\r\n    // unary_expression\r\n    // multiplicative_expression star unary_expression\r\n    // multiplicative_expression forward_slash unary_expression\r\n    // multiplicative_expression modulo unary_expression\r\n    let expr = this._unary_expression();\r\n    while (this._match([\r\n        TokenTypes.tokens.star,\r\n        TokenTypes.tokens.forward_slash,\r\n        TokenTypes.tokens.modulo,\r\n      ])) {\r\n      expr = this._updateNode(new AST.BinaryOperator(\r\n        this._previous().toString(),\r\n        expr,\r\n        this._unary_expression()\r\n      ));\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _unary_expression(): AST.Expression {\r\n    // singular_expression\r\n    // minus unary_expression\r\n    // bang unary_expression\r\n    // tilde unary_expression\r\n    // star unary_expression\r\n    // and unary_expression\r\n    if (this._match([\r\n        TokenTypes.tokens.minus,\r\n        TokenTypes.tokens.bang,\r\n        TokenTypes.tokens.tilde,\r\n        TokenTypes.tokens.star,\r\n        TokenTypes.tokens.and,\r\n      ])) {\r\n      return this._updateNode(new AST.UnaryOperator(\r\n        this._previous().toString(),\r\n        this._unary_expression()\r\n      ));\r\n    }\r\n    return this._singular_expression();\r\n  }\r\n\r\n  _singular_expression(): AST.Expression {\r\n    // primary_expression postfix_expression ?\r\n    const expr = this._primary_expression();\r\n    const p = this._postfix_expression();\r\n    if (p) {\r\n      expr.postfix = p;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  _postfix_expression(): AST.Expression | null {\r\n    // bracket_left short_circuit_or_expression bracket_right postfix_expression?\r\n    if (this._match(TokenTypes.tokens.bracket_left)) {\r\n      const expr = this._short_circuit_or_expression();\r\n      this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\r\n      const arrayIndex = this._updateNode(new AST.ArrayIndex(expr));\r\n      const p = this._postfix_expression();\r\n      if (p) {\r\n        arrayIndex.postfix = p;\r\n      }\r\n      return arrayIndex;\r\n    }\r\n\r\n    // period ident postfix_expression?\r\n    if (this._match(TokenTypes.tokens.period)) {\r\n      const name = this._consume(TokenTypes.tokens.name, \"Expected member name.\");\r\n      const p = this._postfix_expression();\r\n      const expr = this._updateNode(new AST.StringExpr(name.lexeme));\r\n      if (p) {\r\n        expr.postfix = p;\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _getStruct(name: string): AST.Type | null {\r\n    if (this._context.aliases.has(name)) {\r\n      const alias = this._context.aliases.get(name).type;\r\n      return alias;\r\n    }\r\n    if (this._context.structs.has(name)) {\r\n      const struct = this._context.structs.get(name);\r\n      return struct;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _getType(name: string): AST.Type {\r\n    const struct = this._getStruct(name);\r\n    if (struct !== null) {\r\n      return struct;\r\n    }\r\n    switch (name) {\r\n      case \"void\":\r\n        return AST.Type.void;\r\n      case \"bool\":\r\n        return AST.Type.bool;\r\n      case \"i32\":\r\n        return AST.Type.i32;\r\n      case \"u32\":\r\n        return AST.Type.u32;\r\n      case \"f32\":\r\n        return AST.Type.f32;\r\n      case \"f16\":\r\n        return AST.Type.f16;\r\n      case \"vec2f\":\r\n        return AST.TemplateType.vec2f;\r\n      case \"vec3f\":\r\n        return AST.TemplateType.vec3f;\r\n      case \"vec4f\":\r\n        return AST.TemplateType.vec4f;\r\n      case \"vec2i\":\r\n        return AST.TemplateType.vec2i;\r\n      case \"vec3i\":\r\n        return AST.TemplateType.vec3i;\r\n      case \"vec4i\":\r\n        return AST.TemplateType.vec4i;\r\n      case \"vec2u\":\r\n        return AST.TemplateType.vec2u;\r\n      case \"vec3u\":\r\n        return AST.TemplateType.vec3u;\r\n      case \"vec4u\":\r\n        return AST.TemplateType.vec4u;\r\n      case \"vec2h\":\r\n        return AST.TemplateType.vec2h;\r\n      case \"vec3h\":\r\n        return AST.TemplateType.vec3h;\r\n      case \"vec4h\":\r\n        return AST.TemplateType.vec4h;\r\n      case \"mat2x2f\":\r\n        return AST.TemplateType.mat2x2f;\r\n      case \"mat2x3f\":\r\n        return AST.TemplateType.mat2x3f;\r\n      case \"mat2x4f\":\r\n        return AST.TemplateType.mat2x4f;\r\n      case \"mat3x2f\":\r\n        return AST.TemplateType.mat3x2f;\r\n      case \"mat3x3f\":\r\n        return AST.TemplateType.mat3x3f;\r\n      case \"mat3x4f\":\r\n        return AST.TemplateType.mat3x4f;\r\n      case \"mat4x2f\":\r\n        return AST.TemplateType.mat4x2f;\r\n      case \"mat4x3f\":\r\n        return AST.TemplateType.mat4x3f;\r\n      case \"mat4x4f\":\r\n        return AST.TemplateType.mat4x4f;\r\n      case \"mat2x2h\":\r\n        return AST.TemplateType.mat2x2h;\r\n      case \"mat2x3h\":\r\n        return AST.TemplateType.mat2x3h;\r\n      case \"mat2x4h\":\r\n        return AST.TemplateType.mat2x4h;\r\n      case \"mat3x2h\":\r\n        return AST.TemplateType.mat3x2h;\r\n      case \"mat3x3h\":\r\n        return AST.TemplateType.mat3x3h;\r\n      case \"mat3x4h\":\r\n        return AST.TemplateType.mat3x4h;\r\n      case \"mat4x2h\":\r\n        return AST.TemplateType.mat4x2h;\r\n      case \"mat4x3h\":\r\n        return AST.TemplateType.mat4x3h;\r\n      case \"mat4x4h\":\r\n        return AST.TemplateType.mat4x4h;\r\n\r\n      case \"mat2x2i\":\r\n        return AST.TemplateType.mat2x2i;\r\n      case \"mat2x3i\":\r\n        return AST.TemplateType.mat2x3i;\r\n      case \"mat2x4i\":\r\n        return AST.TemplateType.mat2x4i;\r\n      case \"mat3x2i\":\r\n        return AST.TemplateType.mat3x2i;\r\n      case \"mat3x3i\":\r\n        return AST.TemplateType.mat3x3i;\r\n      case \"mat3x4i\":\r\n        return AST.TemplateType.mat3x4i;\r\n      case \"mat4x2i\":\r\n        return AST.TemplateType.mat4x2i;\r\n      case \"mat4x3i\":\r\n        return AST.TemplateType.mat4x3i;\r\n      case \"mat4x4i\":\r\n        return AST.TemplateType.mat4x4i;\r\n\r\n      case \"mat2x2u\":\r\n        return AST.TemplateType.mat2x2u;\r\n      case \"mat2x3u\":\r\n        return AST.TemplateType.mat2x3u;\r\n      case \"mat2x4u\":\r\n        return AST.TemplateType.mat2x4u;\r\n      case \"mat3x2u\":\r\n        return AST.TemplateType.mat3x2u;\r\n      case \"mat3x3u\":\r\n        return AST.TemplateType.mat3x3u;\r\n      case \"mat3x4u\":\r\n        return AST.TemplateType.mat3x4u;\r\n      case \"mat4x2u\":\r\n        return AST.TemplateType.mat4x2u;\r\n      case \"mat4x3u\":\r\n        return AST.TemplateType.mat4x3u;\r\n      case \"mat4x4u\":\r\n        return AST.TemplateType.mat4x4u;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _validateTypeRange(value: number, type: AST.Type) {\r\n    if (type.name === \"i32\") {\r\n      if (value < -2147483648 || value > 2147483647) {\r\n        throw this._error(this._previous(), `Value out of range for i32: ${value}. Line: ${this._currentLine}.`);\r\n      }\r\n    } else if (type.name === \"u32\") {\r\n      if (value < 0 || value > 4294967295) {\r\n        throw this._error(this._previous(), `Value out of range for u32: ${value}. Line: ${this._currentLine}.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  _primary_expression(): AST.Expression {\r\n    // ident argument_expression_list?\r\n    if (this._match(TokenTypes.tokens.ident)) {\r\n      const name = this._previous().toString();\r\n      if (this._check(TokenTypes.tokens.paren_left)) {\r\n        const args = this._argument_expression_list();\r\n        const type = this._getType(name);\r\n        if (type !== null) {\r\n          return this._updateNode(new AST.CreateExpr(type, args));\r\n        }\r\n        return this._updateNode(new AST.CallExpr(name, args));\r\n      }\r\n      if (this._context.constants.has(name)) {\r\n        const c = this._context.constants.get(name);\r\n        return this._updateNode(new AST.ConstExpr(name, c.value));\r\n      }\r\n      return this._updateNode(new AST.VariableExpr(name));\r\n    }\r\n\r\n    // const_literal\r\n    if (this._match(TokenTypes.tokens.int_literal)) {\r\n      const s = this._previous().toString();\r\n      let type = s.endsWith(\"i\") || s.endsWith(\"i\") ? AST.Type.i32 :\r\n          s.endsWith(\"u\") || s.endsWith(\"U\") ? AST.Type.u32 : AST.Type.x32;\r\n      const i = parseInt(s);\r\n      this._validateTypeRange(i, type);\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(i, this._exec.getTypeInfo(type)), type));\r\n    } else if (this._match(TokenTypes.tokens.uint_literal)) {\r\n      const u = parseInt(this._previous().toString());\r\n      this._validateTypeRange(u, AST.Type.u32);\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(u, this._exec.getTypeInfo(AST.Type.u32)), AST.Type.u32));\r\n    } else if (this._match([TokenTypes.tokens.decimal_float_literal, TokenTypes.tokens.hex_float_literal])) {\r\n      let fs = this._previous().toString();\r\n      let isF16 = fs.endsWith(\"h\");\r\n      if (isF16) {\r\n        fs = fs.substring(0, fs.length - 1);\r\n      }\r\n      const f = parseFloat(fs);\r\n      this._validateTypeRange(f, isF16 ? AST.Type.f16 : AST.Type.f32);\r\n      const type = isF16 ? AST.Type.f16 : AST.Type.f32;\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(f, this._exec.getTypeInfo(type)), type));\r\n    } else if (this._match([TokenTypes.keywords.true, TokenTypes.keywords.false])) {\r\n      let b = this._previous().toString() === TokenTypes.keywords.true.rule;\r\n      return this._updateNode(new AST.LiteralExpr(new ScalarData(b ? 1 : 0, this._exec.getTypeInfo(AST.Type.bool)), AST.Type.bool));\r\n    }\r\n\r\n    // paren_expression\r\n    if (this._check(TokenTypes.tokens.paren_left)) {\r\n      return this._paren_expression();\r\n    }\r\n\r\n    // bitcast less_than type_decl greater_than paren_expression\r\n    if (this._match(TokenTypes.keywords.bitcast)) {\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\r\n      const type = this._type_decl();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n      const value = this._paren_expression();\r\n      return this._updateNode(new AST.BitcastExpr(type, value));\r\n    }\r\n\r\n    // type_decl argument_expression_list\r\n    const type = this._type_decl();\r\n    const args = this._argument_expression_list();\r\n    return this._updateNode(new AST.CreateExpr(type, args));\r\n  }\r\n\r\n  _argument_expression_list(): AST.Expression[] | null {\r\n    // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\r\n    if (!this._match(TokenTypes.tokens.paren_left)) {\r\n      return null;\r\n    }\r\n\r\n    const args: AST.Expression[] = [];\r\n    do {\r\n      if (this._check(TokenTypes.tokens.paren_right)) {\r\n        break;\r\n      }\r\n      const arg = this._short_circuit_or_expression();\r\n      args.push(arg);\r\n    } while (this._match(TokenTypes.tokens.comma));\r\n    this._consume(\r\n      TokenTypes.tokens.paren_right,\r\n      \"Expected ')' for agument list\"\r\n    );\r\n\r\n    return args;\r\n  }\r\n\r\n  _optional_paren_expression(): AST.Expression {\r\n    // [paren_left] short_circuit_or_expression [paren_right]\r\n    this._match(TokenTypes.tokens.paren_left);\r\n    const expr = this._short_circuit_or_expression();\r\n    this._match(TokenTypes.tokens.paren_right);\r\n    return expr;\r\n  }\r\n\r\n  _paren_expression(): AST.Expression {\r\n    // paren_left short_circuit_or_expression paren_right\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\r\n    const expr = this._short_circuit_or_expression();\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\r\n    return expr;\r\n  }\r\n\r\n  _struct_decl(): AST.Struct | null {\r\n    // attribute* struct ident struct_body_decl\r\n    if (!this._match(TokenTypes.keywords.struct)) {\r\n      return null;\r\n    }\r\n\r\n    const startLine = this._currentLine;\r\n\r\n    const name = this._consume(TokenTypes.tokens.ident, \"Expected name for struct.\").toString();\r\n\r\n    // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\r\n    this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for struct body.\");\r\n    const members: AST.Member[] = [];\r\n    while (!this._check(TokenTypes.tokens.brace_right)) {\r\n      // struct_member: attribute* variable_ident_decl\r\n      const memberAttrs = this._attribute();\r\n\r\n      const memberName = this._consume(TokenTypes.tokens.name, \"Expected variable name.\").toString();\r\n\r\n      this._consume(TokenTypes.tokens.colon, \"Expected ':' for struct member type.\");\r\n\r\n      const typeAttrs = this._attribute();\r\n      const memberType = this._type_decl();\r\n      if (memberType != null) {\r\n        memberType.attributes = typeAttrs;\r\n      }\r\n\r\n      if (!this._check(TokenTypes.tokens.brace_right)) {\r\n        this._consume(TokenTypes.tokens.comma, \"Expected ',' for struct member.\");\r\n      } else {\r\n        this._match(TokenTypes.tokens.comma); // trailing comma optional.\r\n      }\r\n\r\n      members.push(this._updateNode(new AST.Member(memberName, memberType, memberAttrs)));\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.brace_right, \"Expected '}' after struct body.\");\r\n\r\n    const endLine = this._currentLine;\r\n\r\n    const structNode = this._updateNode(new AST.Struct(name, members, startLine, endLine), startLine);\r\n    this._context.structs.set(name, structNode);\r\n    return structNode;\r\n  }\r\n\r\n  _global_variable_decl(): AST.Var | null {\r\n    // attribute* variable_decl (equal const_expression)?\r\n    const _var = this._variable_decl();\r\n    if (!_var) {\r\n      return null;\r\n    }\r\n\r\n    if (this._match(TokenTypes.tokens.equal)) {\r\n      const expr = this._const_expression();\r\n      _var.value = expr;\r\n    }\r\n\r\n    if (_var.type !== null && _var.value instanceof AST.LiteralExpr) {\r\n      if (_var.value.type.name !== \"x32\") {\r\n        const t1 = _var.type.getTypeName();\r\n        const t2 = _var.value.type.getTypeName();\r\n        if (t1 !== t2) {\r\n          throw this._error(this._peek(), `Invalid cast from ${_var.value.type.name} to ${_var.type.name}. Line:${this._currentLine}`);\r\n        }\r\n      }\r\n      if (_var.value.isScalar) {\r\n        this._validateTypeRange(_var.value.scalarValue, _var.type);\r\n      }\r\n      _var.value.type = _var.type;\r\n    } else if (_var.type === null && _var.value instanceof AST.LiteralExpr) {\r\n      _var.type = _var.value.type.name === \"x32\" ? AST.Type.i32 : _var.value.type;\r\n      if (_var.value.isScalar) {\r\n        this._validateTypeRange(_var.value.scalarValue, _var.type);\r\n      }\r\n    }\r\n    return _var;\r\n  }\r\n\r\n  _override_variable_decl(): AST.Override | null {\r\n    // attribute* override_decl (equal const_expression)?\r\n    const _override = this._override_decl();\r\n    if (_override && this._match(TokenTypes.tokens.equal)) {\r\n      _override.value = this._const_expression();\r\n    }\r\n\r\n    return _override;\r\n  }\r\n\r\n  _global_const_decl(): AST.Const | null {\r\n    // attribute* const (ident variable_ident_decl) global_const_initializer?\r\n    if (!this._match(TokenTypes.keywords.const)) {\r\n      return null;\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.name,\r\n      \"Expected variable name\"\r\n    );\r\n\r\n    const line = this._currentLine;\r\n\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n    let value: AST.Expression | null = null;\r\n\r\n    this._consume(TokenTypes.tokens.equal, \"const declarations require an assignment\")\r\n\r\n    const valueExpr = this._short_circuit_or_expression();\r\n    try {\r\n      let type = [AST.Type.f32];\r\n      let constValue = valueExpr.constEvaluate(this._exec, type);\r\n\r\n      if (constValue instanceof ScalarData) {\r\n        this._validateTypeRange(constValue.value, type[0]);\r\n      }\r\n\r\n      if (type[0] instanceof AST.TemplateType && type[0].format === null &&\r\n        constValue.typeInfo instanceof TemplateInfo && constValue.typeInfo.format !== null) {\r\n        if (constValue.typeInfo.format.name === \"f16\") {\r\n          type[0].format = AST.Type.f16;\r\n        } else if (constValue.typeInfo.format.name === \"f32\") {\r\n          type[0].format = AST.Type.f32;\r\n        } else if (constValue.typeInfo.format.name === \"i32\") {\r\n          type[0].format = AST.Type.i32;\r\n        } else if (constValue.typeInfo.format.name === \"u32\") {\r\n          type[0].format = AST.Type.u32;\r\n        } else if (constValue.typeInfo.format.name === \"bool\") {\r\n          type[0].format = AST.Type.bool;\r\n        } else {\r\n          console.error(`TODO: impelement template format type ${constValue.typeInfo.format.name}`);\r\n        }\r\n      }\r\n\r\n      value = this._updateNode(new AST.LiteralExpr(constValue, type[0]));\r\n      this._exec.context.setVariable(name.toString(), constValue);\r\n    } catch {\r\n      value = valueExpr;\r\n    }\r\n\r\n    if (type !== null && value instanceof AST.LiteralExpr) {\r\n      if (value.type.name !== \"x32\") {\r\n        const t1 = type.getTypeName();\r\n        const t2 = value.type.getTypeName();\r\n        if (t1 !== t2) {\r\n          throw this._error(this._peek(), `Invalid cast from ${value.type.name} to ${type.name}. Line:${this._currentLine}`);\r\n        }\r\n      }\r\n      value.type = type;\r\n      if (value.isScalar) {\r\n        this._validateTypeRange(value.scalarValue, value.type);\r\n      }\r\n    } else if (type === null && value instanceof AST.LiteralExpr) {\r\n      type = value?.type ?? AST.Type.f32;\r\n      if (type === AST.Type.x32) {\r\n        type = AST.Type.i32;\r\n      }\r\n    }\r\n\r\n    const c = this._updateNode(new AST.Const(name.toString(), type, \"\", \"\", value), line);\r\n    this._context.constants.set(c.name, c);\r\n    return c;\r\n  }\r\n\r\n  _global_let_decl(): AST.Let | null {\r\n    // attribute* let (ident variable_ident_decl) global_const_initializer?\r\n    if (!this._match(TokenTypes.keywords.let)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.name,\r\n      \"Expected variable name\"\r\n    );\r\n\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    let value: AST.Expression | null = null;\r\n    if (this._match(TokenTypes.tokens.equal)) {\r\n      value = this._const_expression();\r\n    }\r\n\r\n    if (type !== null && value instanceof AST.LiteralExpr) {\r\n      if (value.type.name !== \"x32\") {\r\n        const t1 = type.getTypeName();\r\n        const t2 = value.type.getTypeName();\r\n        if (t1 !== t2) {\r\n          throw this._error(this._peek(), `Invalid cast from ${value.type.name} to ${type.name}. Line:${this._currentLine}`);\r\n        }\r\n      }\r\n      value.type = type;\r\n    } else if (type === null && value instanceof AST.LiteralExpr) {\r\n      type = value.type.name === \"x32\" ? AST.Type.i32 : value.type;\r\n    }\r\n\r\n    if (value instanceof AST.LiteralExpr) {\r\n      if (value.isScalar) {\r\n        this._validateTypeRange(value.scalarValue, type);\r\n      }\r\n    }\r\n    return this._updateNode(new AST.Let(name.toString(), type, \"\", \"\", value), line);\r\n  }\r\n\r\n  _const_expression(): AST.Expression {\r\n    // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\r\n    // const_literal\r\n    return this._short_circuit_or_expression();\r\n  }\r\n\r\n  _variable_decl(): AST.Var | null {\r\n    // var variable_qualifier? (ident variable_ident_decl)\r\n    if (!this._match(TokenTypes.keywords.var)) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._currentLine;\r\n\r\n    // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\r\n    let storage: string = \"\";\r\n    let access: string = \"\";\r\n    if (this._match(TokenTypes.tokens.less_than)) {\r\n      storage = this._consume(TokenTypes.storage_class, \"Expected storage_class.\").toString();\r\n      if (this._match(TokenTypes.tokens.comma))\r\n        access = this._consume(TokenTypes.access_mode, \"Expected access_mode.\").toString();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\r\n    }\r\n\r\n    const name = this._consume(\r\n      TokenTypes.tokens.name,\r\n      \"Expected variable name\"\r\n    );\r\n\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    return this._updateNode(new AST.Var(name.toString(), type, storage, access, null), line);\r\n  }\r\n\r\n  _override_decl(): AST.Override | null {\r\n    // override (ident variable_ident_decl)\r\n    if (!this._match(TokenTypes.keywords.override)) {\r\n      return null;\r\n    }\r\n\r\n    const name = this._consume(TokenTypes.tokens.name, \"Expected variable name\");\r\n    let type: AST.Type | null = null;\r\n    if (this._match(TokenTypes.tokens.colon)) {\r\n      const attrs = this._attribute();\r\n      type = this._type_decl();\r\n      if (type != null) {\r\n        type.attributes = attrs;\r\n      }\r\n    }\r\n\r\n    return this._updateNode(new AST.Override(name.toString(), type, null));\r\n  }\r\n\r\n  _diagnostic(): AST.Diagnostic | null {\r\n    // diagnostic(severity_control_name, diagnostic_rule_name)\r\n    this._consume(TokenTypes.tokens.paren_left, \"Expected '('\");\r\n    const severity = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected severity control name.\"\r\n    );\r\n    this._consume(TokenTypes.tokens.comma, \"Expected ','\");\r\n    const rule = this._consume(\r\n      TokenTypes.tokens.ident,\r\n      \"Expected diagnostic rule name.\"\r\n    );\r\n    let ruleMessage = rule.toString();\r\n    if (this._match(TokenTypes.tokens.period)) {\r\n      const message = this._consume(\r\n        TokenTypes.tokens.ident,\r\n        \"Expected diagnostic message.\"\r\n      );\r\n      ruleMessage += `.${message.toString()}`;\r\n    }\r\n\r\n    this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n    return this._updateNode(new AST.Diagnostic(severity.toString(), ruleMessage));\r\n  }\r\n\r\n  _enable_directive(): AST.Enable {\r\n    // enable ident semicolon\r\n    const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n    return this._updateNode(new AST.Enable(name.toString()));\r\n  }\r\n\r\n  _requires_directive(): AST.Requires {\r\n    // requires extension [, extension]* semicolon\r\n    const extensions: string[] = [this._consume(TokenTypes.tokens.ident, \"identity expected.\").toString()];\r\n    while (this._match(TokenTypes.tokens.comma)) {\r\n      const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n      extensions.push(name.toString());\r\n    }\r\n    return this._updateNode(new AST.Requires(extensions));\r\n  }\r\n\r\n  _type_alias(): AST.Alias {\r\n    // type ident equal type_decl\r\n    const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\r\n    this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\r\n\r\n    let aliasType = this._type_decl();\r\n    if (aliasType === null) {\r\n      throw this._error(this._peek(), \"Expected Type for Alias.\");\r\n    }\r\n    if (this._context.aliases.has(aliasType.name)) {\r\n      aliasType = this._context.aliases.get(aliasType.name).type;\r\n    }\r\n\r\n    const aliasNode = this._updateNode(new AST.Alias(name.toString(), aliasType));\r\n    this._context.aliases.set(aliasNode.name, aliasNode);\r\n\r\n    return aliasNode;\r\n  }\r\n\r\n  _type_decl(): AST.Type | null {\r\n    // ident\r\n    // bool\r\n    // float32\r\n    // int32\r\n    // uint32\r\n    // vec2 less_than type_decl greater_than\r\n    // vec3 less_than type_decl greater_than\r\n    // vec4 less_than type_decl greater_than\r\n    // mat2x2 less_than type_decl greater_than\r\n    // mat2x3 less_than type_decl greater_than\r\n    // mat2x4 less_than type_decl greater_than\r\n    // mat3x2 less_than type_decl greater_than\r\n    // mat3x3 less_than type_decl greater_than\r\n    // mat3x4 less_than type_decl greater_than\r\n    // mat4x2 less_than type_decl greater_than\r\n    // mat4x3 less_than type_decl greater_than\r\n    // mat4x4 less_than type_decl greater_than\r\n    // atomic less_than type_decl greater_than\r\n    // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n    // array_type_decl\r\n    // texture_sampler_types\r\n\r\n    if (this._check([\r\n        TokenTypes.tokens.ident,\r\n        ...TokenTypes.texel_format,\r\n        TokenTypes.keywords.bool,\r\n        TokenTypes.keywords.f32,\r\n        TokenTypes.keywords.i32,\r\n        TokenTypes.keywords.u32,\r\n      ])) {\r\n      const type = this._advance();\r\n      const typeName = type.toString();\r\n      if (this._context.structs.has(typeName)) {\r\n        return this._context.structs.get(typeName);\r\n      }\r\n      if (this._context.aliases.has(typeName)) {\r\n        return this._context.aliases.get(typeName).type;\r\n      }\r\n\r\n      const t = this._getType(typeName);\r\n      // Don't \"forward declare\" built-in types\r\n      if (!t) {\r\n        const node = this._updateNode(new AST.ForwardType(typeName));\r\n        this._forwardTypeCount++;\r\n        return node;\r\n      }\r\n\r\n      return this._updateNode(new AST.Type(typeName));\r\n    }\r\n\r\n    // texture_sampler_types\r\n    let type = this._texture_sampler_types();\r\n    if (type) {\r\n      return type;\r\n    }\r\n\r\n    if (this._check(TokenTypes.template_types)) {\r\n      let type = this._advance().toString();\r\n      let format: AST.Type | null = null;\r\n      let access: string | null = null;\r\n      if (this._match(TokenTypes.tokens.less_than)) {\r\n        format = this._type_decl();\r\n        access = null;\r\n        if (this._match(TokenTypes.tokens.comma)) {\r\n          access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\r\n        }\r\n        this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\r\n      }\r\n      const node = this._updateNode(new AST.TemplateType(type, format, access));\r\n      return node;\r\n    }\r\n\r\n    // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\r\n    if (this._match(TokenTypes.keywords.ptr)) {\r\n      let pointer = this._previous().toString();\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\r\n      const storage = this._consume(TokenTypes.storage_class, \"Expected storage_class for pointer\");\r\n      this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\r\n      const decl = this._type_decl();\r\n      let access: string | null = null;\r\n      if (this._match(TokenTypes.tokens.comma)) {\r\n        access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\r\n      }\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for pointer.\");\r\n      const node = this._updateNode(new AST.PointerType(pointer, storage.toString(), decl, access));\r\n      return node;\r\n    }\r\n\r\n    // The following type_decl's have an optional attribyte_list*\r\n    const attrs = this._attribute();\r\n\r\n    // attribute* array\r\n    // attribute* array less_than type_decl (comma element_count_expression)? greater_than\r\n    if (this._match(TokenTypes.keywords.array)) {\r\n      let format = null;\r\n      let countInt = -1;\r\n      const array = this._previous();\r\n      let countNode: AST.Expression | null = null;\r\n      if (this._match(TokenTypes.tokens.less_than)) {\r\n        format = this._type_decl();\r\n        if (this._context.aliases.has(format.name)) {\r\n          format = this._context.aliases.get(format.name).type;\r\n        }\r\n        let count: string = \"\";\r\n        if (this._match(TokenTypes.tokens.comma)) {\r\n          countNode = this._shift_expression();\r\n          // If we can't evaluate the node, defer evaluating it until after the shader has\r\n          // finished being parsed, because const statements can be declared **after** they\r\n          // are used.\r\n          try {\r\n            count = countNode.constEvaluate(this._exec).toString();\r\n            countNode = null;\r\n          } catch (e) {\r\n            count = \"1\";\r\n          }\r\n        }\r\n        this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for array.\");\r\n        countInt = count ? parseInt(count) : 0;\r\n      }\r\n      const arrayType = this._updateNode(new AST.ArrayType(array.toString(), attrs, format, countInt));\r\n      if (countNode) {\r\n        this._deferArrayCountEval.push({ arrayType, countNode });\r\n      }\r\n      return arrayType;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _texture_sampler_types(): AST.SamplerType | null {\r\n    // sampler_type\r\n    if (this._match(TokenTypes.sampler_type)) {\r\n      return this._updateNode(new AST.SamplerType(this._previous().toString(), null, null));\r\n    }\r\n\r\n    // depth_texture_type\r\n    if (this._match(TokenTypes.depth_texture_type)) {\r\n      return this._updateNode(new AST.SamplerType(this._previous().toString(), null, null));\r\n    }\r\n\r\n    // sampled_texture_type less_than type_decl greater_than\r\n    // multisampled_texture_type less_than type_decl greater_than\r\n    if (this._match(TokenTypes.sampled_texture_type) ||\r\n      this._match(TokenTypes.multisampled_texture_type)) {\r\n      const sampler = this._previous();\r\n      this._consume(\r\n        TokenTypes.tokens.less_than,\r\n        \"Expected '<' for sampler type.\"\r\n      );\r\n      const format = this._type_decl();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\r\n      return this._updateNode(new AST.SamplerType(sampler.toString(), format, null));\r\n    }\r\n\r\n    // storage_texture_type less_than texel_format comma access_mode greater_than\r\n    if (this._match(TokenTypes.storage_texture_type)) {\r\n      const sampler = this._previous();\r\n      this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\r\n      const format = this._consume(TokenTypes.texel_format, \"Invalid texel format.\").toString();\r\n      this._consume(TokenTypes.tokens.comma, \"Expected ',' after texel format.\");\r\n      const access = this._consume(TokenTypes.access_mode, \"Expected access mode for storage texture type.\").toString();\r\n      this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\r\n      return this._updateNode(new AST.SamplerType(sampler.toString(), format, access));\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _attribute(): AST.Attribute[] | null {\r\n    // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\r\n    // attr ident\r\n\r\n    let attributes: AST.Attribute[] = [];\r\n\r\n    while (this._match(TokenTypes.tokens.attr)) {\r\n      const name = this._consume(\r\n        TokenTypes.attribute_name,\r\n        \"Expected attribute name\"\r\n      );\r\n      const attr = this._updateNode(new AST.Attribute(name.toString(), null));\r\n      if (this._match(TokenTypes.tokens.paren_left)) {\r\n        // literal_or_ident\r\n        attr.value = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\r\n        if (this._check(TokenTypes.tokens.comma)) {\r\n          this._advance();\r\n          do {\r\n            const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\r\n            if (!(attr.value instanceof Array)) {\r\n              attr.value = [attr.value as string];\r\n            }\r\n            attr.value.push(v);\r\n          } while (this._match(TokenTypes.tokens.comma));\r\n        }\r\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\r\n      }\r\n      attributes.push(attr);\r\n    }\r\n\r\n    if (attributes.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n}\r\n","import { Node, CallExpr, Continue, Expression, Break } from \"../wgsl_ast.js\";\r\n\r\nexport class Command {\r\n    get line(): number { return -1; }\r\n}\r\n\r\nexport class StatementCommand extends Command {\r\n    node: Node;\r\n\r\n    constructor(node: Node) {\r\n        super();\r\n        this.node = node;\r\n    }\r\n\r\n    get line(): number { return this.node.line; }\r\n}\r\n\r\nexport class CallExprCommand extends Command {\r\n    node: CallExpr;\r\n    statement: Node;\r\n\r\n    constructor(node: CallExpr, statement: Node) {\r\n        super();\r\n        this.node = node;\r\n        this.statement = statement;\r\n    }\r\n\r\n    get line(): number { return this.statement.line; }\r\n}\r\n\r\nexport class ContinueTargetCommand extends Command {\r\n    id: number;\r\n\r\n    constructor(id: number) {\r\n        super();\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nexport class BreakTargetCommand extends Command {\r\n    id: number;\r\n\r\n    constructor(id: number) {\r\n        super();\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nexport class ContinueCommand extends Command {\r\n    id: number;\r\n    node: Continue;\r\n\r\n    constructor(id: number, node: Continue) {\r\n        super();\r\n        this.id = id;\r\n        this.node = node;\r\n    }\r\n\r\n    get line(): number { return this.node.line; }\r\n}\r\n\r\nexport class BreakCommand extends Command {\r\n    id: number;\r\n    condition: Expression | null;\r\n    node: Break;\r\n\r\n    constructor(id: number, condition: Expression | null, node: Break) {\r\n        super();\r\n        this.id = id;\r\n        this.condition = condition;\r\n        this.node = node;\r\n    }\r\n\r\n    get line(): number { return this.node.line; }\r\n}\r\n\r\n\r\nexport class GotoCommand extends Command {\r\n    condition: Node | null;\r\n    position: number;\r\n    lineNo: number = -1;\r\n\r\n    constructor(condition: Node | null, position: number, line: number) {\r\n        super();\r\n        this.condition = condition;\r\n        this.position = position;\r\n        this.lineNo = line;\r\n    }\r\n\r\n    get line(): number {\r\n        return this.condition?.line ?? this.lineNo;\r\n    }\r\n}\r\n\r\nexport class BlockCommand extends Command {\r\n    statements: Array<Node> = [];\r\n\r\n    constructor(statements: Array<Node>) {\r\n      super();\r\n      this.statements = statements;\r\n    }\r\n\r\n    get line(): number {\r\n      return this.statements.length > 0 ? this.statements[0].line : -1;\r\n    }\r\n}\r\n","import { Command } from \"./command.js\";\r\nimport { CallExpr } from \"../wgsl_ast.js\";\r\nimport { ExecContext } from \"./exec_context.js\";\r\n\r\nexport class StackFrame {\r\n    parent: StackFrame | null = null;\r\n    context: ExecContext;\r\n    commands: Command[] = [];\r\n    current: number = 0;\r\n    parentCallExpr: CallExpr | null = null;\r\n\r\n    constructor(context: ExecContext, parent?: StackFrame) {\r\n        this.context = context;\r\n        this.parent = parent ?? null;\r\n    }\r\n\r\n    get isAtEnd(): boolean { return this.current >= this.commands.length; }\r\n\r\n    getNextCommand(): Command | null {\r\n        if (this.current >= this.commands.length) {\r\n            return null;\r\n        }\r\n        const command = this.commands[this.current];\r\n        this.current++;\r\n        return command;\r\n    }\r\n\r\n    getCurrentCommand(): Command | null {\r\n        if (this.current >= this.commands.length) {\r\n            return null;\r\n        }\r\n        return this.commands[this.current];\r\n    }\r\n}\r\n","import { StackFrame } from \"./stack_frame.js\";\r\n\r\nexport class ExecStack {\r\n    states: StackFrame[] = [];\r\n\r\n    get isEmpty(): boolean { return this.states.length == 0; }\r\n\r\n    get last(): StackFrame | null { return this.states[this.states.length - 1] ?? null; }\r\n\r\n    pop(): void {\r\n        this.states.pop();\r\n    }\r\n}\r\n","import * as AST from \"./wgsl_ast.js\";\r\nimport { WgslExec } from \"./wgsl_exec.js\";\r\nimport { WgslParser } from \"./wgsl_parser.js\";\r\nimport { ExecContext, FunctionRef } from \"./exec/exec_context.js\";\r\nimport { Command, StatementCommand, CallExprCommand, GotoCommand, BlockCommand,\r\n        ContinueTargetCommand, ContinueCommand, BreakCommand, BreakTargetCommand } from \"./exec/command.js\";\r\nimport { StackFrame } from \"./exec/stack_frame.js\";\r\nimport { ExecStack } from \"./exec/exec_stack.js\";\r\nimport { ScalarData, VectorData, MatrixData, TextureData, TypedData, VoidData } from \"./wgsl_ast.js\";\r\n\r\ntype RuntimeStateCallbackType = () => void;\r\n\r\nexport class WgslDebug {\r\n    _code: string;\r\n    _exec: WgslExec;\r\n    _execStack: ExecStack;\r\n    _dispatchId: number[];\r\n    _runTimer: any = null;\r\n    breakpoints: Set<number> = new Set();\r\n    runStateCallback: RuntimeStateCallbackType | null = null;\r\n\r\n    constructor(code: string, runStateCallback?: RuntimeStateCallbackType) {\r\n        this._code = code;\r\n        const parser = new WgslParser();\r\n        const ast = parser.parse(code);\r\n        this._exec = new WgslExec(ast);\r\n        this.runStateCallback = runStateCallback ?? null\r\n    }\r\n\r\n    getVariableValue(name: string): number | number[] | null {\r\n        const context = this.context;\r\n        const v = context.getVariable(name)?.value ?? null;\r\n        if (v === null) {\r\n            return null;\r\n        }\r\n        if (v instanceof ScalarData) {\r\n            return v.value;\r\n        }\r\n        if (v instanceof VectorData) {\r\n            return Array.from(v.data);\r\n        }\r\n        if (v instanceof MatrixData) {\r\n            return Array.from(v.data);\r\n        }\r\n        console.error(`Unsupported return variable type ${v.typeInfo.name}`);\r\n        return null;\r\n    }\r\n\r\n    reset(): void {\r\n        this._exec = new WgslExec(this._exec.ast);\r\n        this.startDebug();\r\n    }\r\n\r\n    startDebug(): void {\r\n        this._execStack = new ExecStack();\r\n        const state = this._createState(this._exec.ast, this._exec.context);\r\n        this._execStack.states.push(state);\r\n    }\r\n\r\n    get context(): ExecContext {\r\n        const state = this.currentState;\r\n        if (state === null) {\r\n            return this._exec.context;\r\n        }\r\n        return state.context;\r\n    }\r\n\r\n    get currentState(): StackFrame | null {\r\n        while (true) {\r\n            if (this._execStack.isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            let state = this._execStack.last;\r\n            if (state === null) {\r\n                return null;\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return null;\r\n                }\r\n                state = this._execStack.last;\r\n            }\r\n\r\n            return state;\r\n        }\r\n    }\r\n\r\n    get currentCommand(): Command | null {\r\n        while (true) {\r\n            if (this._execStack.isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            let state = this._execStack.last;\r\n            if (state === null) {\r\n                return null;\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return null;\r\n                }\r\n                state = this._execStack.last;\r\n            }\r\n\r\n            const command = state.getCurrentCommand();\r\n            if (command === null) {\r\n                continue;\r\n            }\r\n\r\n            return command;\r\n        }\r\n    }\r\n\r\n    toggleBreakpoint(line: number) {\r\n        if (this.breakpoints.has(line)) {\r\n            this.breakpoints.delete(line);\r\n        } else {\r\n            this.breakpoints.add(line);\r\n        }\r\n    }\r\n\r\n    clearBreakpoints() {\r\n        this.breakpoints.clear();\r\n    }\r\n\r\n    get isRunning() {\r\n        return this._runTimer !== null;\r\n    }\r\n\r\n    run() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this._runTimer = setInterval(() => {\r\n            const command = this.currentCommand;\r\n            if (command) {\r\n                if (this.breakpoints.has(command.line)) {\r\n                    clearInterval(this._runTimer!);\r\n                    this._runTimer = null;\r\n                    if (this.runStateCallback !== null) {\r\n                        this.runStateCallback();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            if (!this.stepNext(true)) {\r\n                clearInterval(this._runTimer!);\r\n                this._runTimer = null;\r\n                if (this.runStateCallback !== null) {\r\n                    this.runStateCallback();\r\n                }\r\n            }\r\n        }, 0);\r\n        if (this.runStateCallback !== null) {\r\n            this.runStateCallback();\r\n        }\r\n    }\r\n\r\n    pause() {\r\n        if (this._runTimer !== null) {\r\n            clearInterval(this._runTimer);\r\n            this._runTimer = null;\r\n            if (this.runStateCallback !== null) {\r\n                this.runStateCallback();\r\n            }\r\n        }\r\n    }\r\n\r\n    _setOverrides(constants: Object, context: ExecContext): void {\r\n        for (const k in constants) {\r\n            const v = constants[k];\r\n            const override = this._exec.reflection.getOverrideInfo(k);\r\n            if (override !== null) {\r\n                if (override.type === null) {\r\n                    override.type = this._exec.getTypeInfo(\"u32\");\r\n                }\r\n                if (override.type.name === \"u32\" || override.type.name === \"i32\" || override.type.name === \"f32\" || override.type.name === \"f16\") {\r\n                    context.setVariable(k, new ScalarData(v, override.type));\r\n                } else if (override.type.name === \"bool\") {\r\n                    context.setVariable(k, new ScalarData(v ? 1 : 0, override.type));\r\n                } else if (override.type.name === \"vec2\" || override.type.name === \"vec3\" || override.type.name === \"vec4\" ||\r\n                    override.type.name === \"vec2f\" || override.type.name === \"vec3f\" || override.type.name === \"vec4f\" ||\r\n                    override.type.name === \"vec2i\" || override.type.name === \"vec3i\" || override.type.name === \"vec4i\" ||\r\n                    override.type.name === \"vec2u\" || override.type.name === \"vec3u\" || override.type.name === \"vec4u\" ||\r\n                    override.type.name === \"vec2h\" || override.type.name === \"vec3h\" || override.type.name === \"vec4h\") {\r\n                    context.setVariable(k, new VectorData(v, override.type));\r\n                } else {\r\n                    console.error(`Invalid constant type for ${k}`);\r\n                }\r\n            } else {\r\n                console.error(`Override ${k} does not exist in the shader.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    debugWorkgroup(kernel: string, dispatchId: number[], \r\n        dispatchCount: number | number[], bindGroups: Object, config?: Object): boolean {\r\n\r\n        this._execStack = new ExecStack();\r\n\r\n        const context = this._exec.context;\r\n        context.currentFunctionName = kernel;\r\n\r\n        this._dispatchId = dispatchId;\r\n\r\n        config = config ?? {};\r\n        if (config[\"constants\"]) {\r\n            this._setOverrides(config[\"constants\"], context);\r\n        }\r\n\r\n        // Use this to debug the top level statements, otherwise call _execStatements.\r\n        /*const state = new _ExecState(this._exec.context);\r\n        this._execStack.states.push(state);\r\n        for (const statement of this._exec.ast) {\r\n            state.commands.push(new Command(CommandType.Statement, statement));\r\n        }*/\r\n        this._exec._execStatements(this._exec.ast, context);\r\n\r\n        const f = context.getFunction(kernel);\r\n        if (!f) {\r\n            console.error(`Function ${kernel} not found`);\r\n            return false;\r\n        }\r\n\r\n        if (typeof dispatchCount === \"number\") {\r\n            dispatchCount = [dispatchCount, 1, 1];\r\n        } else if (dispatchCount.length === 0) {\r\n            console.error(`Invalid dispatch count`);\r\n            return false;\r\n        } else if (dispatchCount.length === 1) {\r\n            dispatchCount = [dispatchCount[0], 1, 1];\r\n        } else if (dispatchCount.length === 2) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], 1];\r\n        } else if (dispatchCount.length > 3) {\r\n            dispatchCount = [dispatchCount[0], dispatchCount[1], dispatchCount[2]];\r\n        }\r\n\r\n        const depth = dispatchCount[2];\r\n        const height = dispatchCount[1];\r\n        const width = dispatchCount[0];\r\n\r\n        const vec3u = this._exec.typeInfo[\"vec3u\"];\r\n        context.setVariable(\"@num_workgroups\", new VectorData(dispatchCount, vec3u));\r\n\r\n        for (const set in bindGroups) {\r\n            for (const binding in bindGroups[set]) {\r\n                const entry = bindGroups[set][binding];\r\n\r\n                context.variables.forEach((v) => {\r\n                    const node = v.node;\r\n                    if (node?.attributes) {\r\n                        let b = null;\r\n                        let s = null;\r\n                        for (const attr of node.attributes) {\r\n                            if (attr.name === \"binding\") {\r\n                                b = attr.value;\r\n                            } else if (attr.name === \"group\") {\r\n                                s = attr.value;\r\n                            }\r\n                        }\r\n                        if (binding == b && set == s) {\r\n                            if (entry.texture !== undefined && entry.descriptor !== undefined) {\r\n                                // Texture\r\n                                const textureData = new TextureData(entry.texture, this._exec.getTypeInfo(node.type), entry.descriptor,\r\n                                                                    entry.texture.view ?? null);\r\n                                v.value = textureData;\r\n                            } else if (entry.uniform !== undefined) {\r\n                                // Uniform buffer\r\n                                v.value = new TypedData(entry.uniform, this._exec.getTypeInfo(node.type));\r\n                            } else {\r\n                                // Storage buffer\r\n                                v.value = new TypedData(entry, this._exec.getTypeInfo(node.type));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        let found = false;\r\n        for (let z = 0; z < depth && !found; ++z) {\r\n            for (let y = 0; y < height && !found; ++y) {\r\n                for (let x = 0; x < width && !found; ++x) {\r\n                    context.setVariable(\"@workgroup_id\", new VectorData([x, y, z], vec3u));\r\n                    if (this._dispatchWorkgroup(f, [x, y, z], context)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    _shouldExecuteNextCommand(): boolean {\r\n        const command = this.currentCommand;\r\n        if (command === null) {\r\n            return false;\r\n        }\r\n        if (command instanceof GotoCommand) {\r\n            if (command.condition === null) {\r\n                return true;\r\n            }\r\n        } else if (command instanceof ContinueTargetCommand || command instanceof BreakTargetCommand) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    stepInto() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this.stepNext(true);\r\n    }\r\n\r\n    stepOver() {\r\n        if (this.isRunning) {\r\n            return;\r\n        }\r\n        this.stepNext(false);\r\n    }\r\n\r\n    stepOut() {\r\n        const state = this.currentState;\r\n        if (state === null) {\r\n            return;\r\n        }\r\n        const parentState = state.parent;\r\n\r\n        if (this.isRunning) {\r\n            clearInterval(this._runTimer);\r\n            this._runTimer = null;\r\n        }\r\n\r\n        this._runTimer = setInterval(() => {\r\n            const command = this.currentCommand;\r\n            if (command) {\r\n                if (this.breakpoints.has(command.line)) {\r\n                    clearInterval(this._runTimer!);\r\n                    this._runTimer = null;\r\n                    if (this.runStateCallback !== null) {\r\n                        this.runStateCallback();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            if (!this.stepNext(true)) {\r\n                clearInterval(this._runTimer!);\r\n                this._runTimer = null;\r\n                if (this.runStateCallback !== null) {\r\n                    this.runStateCallback();\r\n                }\r\n            }\r\n\r\n            const state = this.currentState;\r\n            if (state === parentState) {\r\n                clearInterval(this._runTimer!);\r\n                this._runTimer = null;\r\n                if (this.runStateCallback !== null) {\r\n                    this.runStateCallback();\r\n                }\r\n            }\r\n        }, 0);\r\n        if (this.runStateCallback !== null) {\r\n            this.runStateCallback();\r\n        }\r\n    }\r\n\r\n    // Returns true if execution is not finished, false if execution is complete.\r\n    stepNext(stepInto = true): boolean {\r\n        if (!this._execStack) {\r\n            this._execStack = new ExecStack();\r\n            const state = this._createState(this._exec.ast, this._exec.context);\r\n            this._execStack.states.push(state);\r\n        }\r\n\r\n        while (true) {\r\n            if (this._execStack.isEmpty) {\r\n                return false;\r\n            }\r\n\r\n            let state = this._execStack.last;\r\n            if (state === null) {\r\n                return false;\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return false;\r\n                }\r\n                state = this._execStack.last;\r\n            }\r\n\r\n            const command = state!.getNextCommand();\r\n            if (command === null) {\r\n                continue;\r\n            }\r\n\r\n            if (stepInto && command instanceof CallExprCommand) {\r\n                const node = command.node;\r\n                const fn = state.context.getFunction(node.name);\r\n                if (!fn) {\r\n                    continue; // it's not a custom function, step over it\r\n                }\r\n                const fnState = this._createState(fn.node.body, state.context.clone(), state);\r\n\r\n                for (let ai = 0; ai < fn.node.args.length; ++ai) {\r\n                    const arg = fn.node.args[ai];\r\n                    const value = this._exec.evalExpression(node.args[ai], fnState.context);\r\n                    fnState.context.createVariable(arg.name, value, arg);\r\n                }\r\n\r\n                fnState.parentCallExpr = node;\r\n                this._execStack.states.push(fnState);\r\n                fnState.context.currentFunctionName = fn.name;\r\n\r\n                if (this._shouldExecuteNextCommand()) {\r\n                    continue;\r\n                }\r\n                return true;\r\n            } else if (command instanceof StatementCommand) {\r\n                const node = command.node;\r\n                if (stepInto && node instanceof AST.Call) {\r\n                    const fn = state.context.getFunction(node.name);\r\n                    // We want to step into custom functions, not directly execute them\r\n                    if (fn) {\r\n                        const fnState = this._createState(fn.node.body, state.context.clone(), state);\r\n\r\n                        for (let ai = 0; ai < fn.node.args.length; ++ai) {\r\n                            const arg = fn.node.args[ai];\r\n                            const value = this._exec.evalExpression(node.args[ai], fnState.context);\r\n                            fnState.context.createVariable(arg.name, value, arg);\r\n                        }\r\n\r\n                        this._execStack.states.push(fnState);\r\n                        fnState.context.currentFunctionName = fn.name;\r\n\r\n                        if (this._shouldExecuteNextCommand()) {\r\n                            continue;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                const res = this._exec.execStatement(node, state.context);\r\n                if (res !== null && res !== undefined && !(res instanceof VoidData)) {\r\n                    let s = state;\r\n                    // Find the CallExpr to store the return value in.\r\n                    while (s) {\r\n                        if (s.parentCallExpr) {\r\n                            s.parentCallExpr.setCachedReturnValue(res);\r\n                            break;\r\n                        }\r\n                        s = s.parent;\r\n                    }\r\n                    if (s === null) {\r\n                        console.error(\"Could not find CallExpr to store return value in\");\r\n                    }\r\n                    if (this._shouldExecuteNextCommand()) {\r\n                        continue;\r\n                    }\r\n                    return true;\r\n                }\r\n            } else if (command instanceof ContinueTargetCommand) {\r\n                continue;\r\n            } else if (command instanceof BreakTargetCommand) {\r\n                continue;\r\n            } else if (command instanceof ContinueCommand) {\r\n                const targetId = command.id;\r\n                while (!this._execStack.isEmpty) {\r\n                    state = this._execStack.last;\r\n                    for (let i = state.commands.length - 1; i >= 0; --i) {\r\n                        const cmd = state.commands[i];\r\n                        if (cmd instanceof ContinueTargetCommand) {\r\n                            if (cmd.id === targetId) {\r\n                                state.current = i + 1;\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    // No Goto -1 found (loop), pop the current state and continue searching.\r\n                    this._execStack.pop();\r\n                }\r\n                // If we got here, we've reached the end of the stack and didn't find a -1.\r\n                // That means a continue was used outside of a loop, so we're done.\r\n                console.error(\"Continue statement used outside of a loop\");\r\n                return false;\r\n            } else if (command instanceof BreakCommand) {\r\n                const targetId = command.id;\r\n                // break-if conditional break \r\n                if (command.condition) {\r\n                    const res = this._exec.evalExpression(command.condition, state.context);\r\n                    if (!(res instanceof ScalarData)) {\r\n                        console.error(\"Condition must be a scalar\");\r\n                        return false;\r\n                    }\r\n                    // If the condition is false, then we should not the break.\r\n                    if (!res.value) {\r\n                        if (this._shouldExecuteNextCommand()) {\r\n                            continue;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                while (!this._execStack.isEmpty) {\r\n                    state = this._execStack.last;\r\n                    for (let i = state.commands.length - 1; i >= 0; --i) {\r\n                        const cmd = state.commands[i];\r\n                        if (cmd instanceof BreakTargetCommand) {\r\n                            if (cmd.id === targetId) {\r\n                                state.current = i + 1;\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    // No Goto -2 found (loop), pop the current state and continue searching.\r\n                    this._execStack.pop();\r\n                }\r\n                // If we got here, we've reached the end of the stack and didn't find a BreakTarget.\r\n                // That means a break was used outside of a loop, so we're done.\r\n                console.error(\"Break statement used outside of a loop\");\r\n                return false;\r\n            } else if (command instanceof GotoCommand) {\r\n                if (command.condition) {\r\n                    const res = this._exec.evalExpression(command.condition, state.context);\r\n                    if (!(res instanceof ScalarData)) {\r\n                        console.error(\"Condition must be a scalar\");\r\n                        return false;\r\n                    }\r\n                    // If the GOTO condition value is true, then continue to the next command.\r\n                    // Otherwise, jump to the specified position.\r\n                    if (res.value) {\r\n                        if (this._shouldExecuteNextCommand()) {\r\n                            continue;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n                state.current = command.position;\r\n                if (this._shouldExecuteNextCommand()) {\r\n                    continue;\r\n                }\r\n                return true;\r\n            } else if (command instanceof BlockCommand) {\r\n                const blockState = this._createState(command.statements, state.context.clone(), state);\r\n                this._execStack.states.push(blockState);\r\n                continue; // step into the first statement of the block\r\n            }\r\n\r\n            if (state.isAtEnd) {\r\n                this._execStack.pop();\r\n                if (this._execStack.isEmpty) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (this._shouldExecuteNextCommand()) {\r\n                continue;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    _dispatchWorkgroup(f: FunctionRef, workgroup_id: number[], context: ExecContext): boolean {\r\n        const workgroupSize = [1, 1, 1];\r\n        for (const attr of f.node.attributes) {\r\n            if (attr.name === \"workgroup_size\") {\r\n                if (Array.isArray(attr.value)) {\r\n                    if (attr.value.length > 0) {\r\n                        // The value could be an override constant\r\n                        const v = context.getVariableValue(attr.value[0]);\r\n                        if (v instanceof ScalarData) {\r\n                            workgroupSize[0] = v.value;\r\n                        } else {\r\n                            workgroupSize[0] = parseInt(attr.value[0]);\r\n                        }\r\n                    }\r\n                    if (attr.value.length > 1) {\r\n                        const v = context.getVariableValue(attr.value[1]);\r\n                        if (v instanceof ScalarData) {\r\n                            workgroupSize[1] = v.value;\r\n                        } else {\r\n                            workgroupSize[1] = parseInt(attr.value[1]);\r\n                        }\r\n                    }\r\n                    if (attr.value.length > 2) {\r\n                        const v = context.getVariableValue(attr.value[2]);\r\n                        if (v instanceof ScalarData) {\r\n                            workgroupSize[2] = v.value;\r\n                        } else {\r\n                            workgroupSize[2] = parseInt(attr.value[2]);\r\n                        }\r\n                    }\r\n                } else {\r\n                    const v = context.getVariableValue(attr.value);\r\n                    if (v instanceof ScalarData) {\r\n                        workgroupSize[0] = v.value;\r\n                    } else if (v instanceof VectorData) {\r\n                        workgroupSize[0] = v.data[0];\r\n                        workgroupSize[1] = v.data.length > 1 ? v.data[1] : 1;\r\n                        workgroupSize[2] = v.data.length > 2 ? v.data[2] : 1;\r\n                    } else {\r\n                        workgroupSize[0] = parseInt(attr.value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const vec3u = this._exec.typeInfo[\"vec3u\"];\r\n        const u32 = this._exec.typeInfo[\"u32\"];\r\n        context.setVariable(\"@workgroup_size\", new VectorData(workgroupSize, vec3u));\r\n\r\n        const width = workgroupSize[0];\r\n        const height = workgroupSize[1];\r\n        const depth = workgroupSize[2];\r\n\r\n        let found = false;\r\n        for (let z = 0, li = 0; z < depth && !found; ++z) {\r\n            for (let y = 0; y < height && !found; ++y) {\r\n                for (let x = 0; x < width && !found; ++x, ++li) {\r\n                    const local_invocation_id = [x, y, z];\r\n                    const global_invocation_id = [\r\n                        x + workgroup_id[0] * workgroupSize[0],\r\n                        y + workgroup_id[1] * workgroupSize[1],\r\n                        z + workgroup_id[2] * workgroupSize[2]];\r\n\r\n                    context.setVariable(\"@local_invocation_id\", new VectorData(local_invocation_id, vec3u));\r\n                    context.setVariable(\"@global_invocation_id\", new VectorData(global_invocation_id, vec3u));\r\n                    context.setVariable(\"@local_invocation_index\", new ScalarData(li, u32));\r\n\r\n                    if (global_invocation_id[0] === this._dispatchId[0] &&\r\n                        global_invocation_id[1] === this._dispatchId[1] &&\r\n                        global_invocation_id[2] === this._dispatchId[2]) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (found) {\r\n            this._dispatchExec(f, context);\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    _dispatchExec(f: FunctionRef, context: ExecContext) {\r\n        // Update any built-in input args.\r\n        // TODO: handle input structs.\r\n        for (const arg of f.node.args) {\r\n            for (const attr of arg.attributes) {\r\n                if (attr.name === \"builtin\") {\r\n                    const globalName = `@${attr.value}`;\r\n                    const globalVar = context.getVariable(globalName);\r\n                    if (globalVar !== null) {\r\n                        context.variables.set(arg.name, globalVar);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const state = this._createState(f.node.body, context);\r\n        this._execStack.states.push(state);\r\n    }\r\n\r\n    _createState(ast: AST.Node[], context: ExecContext, parent?: StackFrame): StackFrame {\r\n        const state = new StackFrame(context, parent ?? null);\r\n\r\n        for (const statement of ast) {\r\n            // A statement may have expressions that include function calls.\r\n            // Gather all of the internal function calls from the statement.\r\n            // We can then include them as commands to step through, storing their\r\n            // values with the call node so that when it is evaluated, it uses that\r\n            // already computed value. This allows us to step into the function\r\n            if (statement instanceof AST.Let ||\r\n                statement instanceof AST.Var ||\r\n                statement instanceof AST.Const ||\r\n                statement instanceof AST.Assign) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.value, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Call) {\r\n                const functionCalls = [];\r\n                for (const arg of statement.args) {\r\n                    this._collectFunctionCalls(arg, functionCalls);\r\n                }\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Return) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.value, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Increment) {\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Function) {\r\n                const f = new FunctionRef(statement);\r\n                state.context.functions.set(statement.name, f);\r\n                continue;\r\n            } else if (statement instanceof AST.If) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.condition, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n\r\n                let conditionCmd = new GotoCommand(statement.condition, 0, statement.line);\r\n                state.commands.push(conditionCmd);\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                }\r\n                const gotoEnd = new GotoCommand(null, 0, statement.line);\r\n                state.commands.push(gotoEnd);\r\n\r\n                for (const elseIf of statement.elseif) {\r\n                    conditionCmd.position = state.commands.length;\r\n\r\n                    const functionCalls = [];\r\n                    this._collectFunctionCalls(elseIf.condition, functionCalls);\r\n                    for (const call of functionCalls) {\r\n                        state.commands.push(new CallExprCommand(call, statement));\r\n                    }\r\n\r\n                    conditionCmd = new GotoCommand(elseIf.condition, 0, elseIf.line);\r\n                    state.commands.push(conditionCmd);\r\n                    if (elseIf.body.length > 0) {\r\n                        state.commands.push(new BlockCommand(elseIf.body));\r\n                    }\r\n                    state.commands.push(gotoEnd);\r\n                }\r\n\r\n                conditionCmd.position = state.commands.length;\r\n                if (statement.else) {\r\n                    state.commands.push(new BlockCommand(statement.else));\r\n                }\r\n\r\n                gotoEnd.position = state.commands.length;\r\n            } else if (statement instanceof AST.Switch) {\r\n                const functionCalls = [];\r\n                this._collectFunctionCalls(statement.condition, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n\r\n                let defaultCase: AST.SwitchCase | null = null;\r\n                for (const c of statement.cases) {\r\n                    if (c instanceof AST.Default) {\r\n                        defaultCase = c;\r\n                        break;\r\n                    } else if (c instanceof AST.Case) {\r\n                        for (const selector of c.selectors) {\r\n                            if (selector instanceof AST.DefaultSelector) {\r\n                                defaultCase = c;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const gotoEndCommands: GotoCommand[] = [];\r\n\r\n                for (const c of statement.cases) {\r\n                    if (c === defaultCase) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!(c instanceof AST.Case)) {\r\n                        continue;\r\n                    }\r\n\r\n                    let lastCondition = null;\r\n                    for (const selector of c.selectors) {\r\n                        let conditionExpr = new AST.BinaryOperator(\"==\", statement.condition, selector);\r\n                        if (lastCondition) {\r\n                            conditionExpr = new AST.BinaryOperator(\"||\", lastCondition, conditionExpr);\r\n                        }\r\n                        lastCondition = conditionExpr;\r\n                    }\r\n\r\n                    const gotoCommand = new GotoCommand(lastCondition, 0, c.line);\r\n                    state.commands.push(gotoCommand);\r\n\r\n                    if (c.body.length > 0) {\r\n                        state.commands.push(new BlockCommand(c.body));\r\n                    }\r\n\r\n                    const gotoEndCommand = new GotoCommand(null, 0, c.line);\r\n                    gotoEndCommands.push(gotoEndCommand);\r\n                    state.commands.push(gotoEndCommand);\r\n\r\n                    gotoCommand.position = state.commands.length;\r\n                }\r\n\r\n                if (defaultCase) {\r\n                    state.commands.push(new BlockCommand(defaultCase.body));\r\n                }\r\n\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n\r\n                const commandPos = state.commands.length;\r\n                for (let i = 0; i < gotoEndCommands.length; ++i) {\r\n                    gotoEndCommands[i].position = commandPos;\r\n                }\r\n            } else if (statement instanceof AST.While) {\r\n                const functionCalls = [];\r\n                state.commands.push(new ContinueTargetCommand(statement.id));\r\n                this._collectFunctionCalls(statement.condition, functionCalls);\r\n                for (const call of functionCalls) {\r\n                    state.commands.push(new CallExprCommand(call, statement));\r\n                }\r\n                const conditionCmd = new GotoCommand(statement.condition, 0, statement.line);\r\n                state.commands.push(conditionCmd);\r\n                let lastLine = statement.line;\r\n\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                    lastLine = statement.body[statement.body.length - 1].line;\r\n                }\r\n\r\n                state.commands.push(new GotoCommand(statement.condition, 0, lastLine));\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n                conditionCmd.position = state.commands.length;\r\n            } else if (statement instanceof AST.For) {\r\n                if (statement.init) {\r\n                    state.commands.push(new StatementCommand(statement.init));\r\n                }\r\n\r\n                let conditionPos = state.commands.length;\r\n\r\n                if (statement.increment === null) {\r\n                    state.commands.push(new ContinueTargetCommand(statement.id));\r\n                }\r\n                let conditionCmd = null;\r\n                if (statement.condition) {\r\n                    const functionCalls = [];\r\n                    this._collectFunctionCalls(statement.condition!, functionCalls);\r\n                    for (const call of functionCalls) {\r\n                        state.commands.push(new CallExprCommand(call, statement));\r\n                    }\r\n                    conditionCmd = new GotoCommand(statement.condition, 0, statement.line);\r\n                    state.commands.push(conditionCmd);\r\n                }\r\n\r\n                let lastLine = statement.line;\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                    lastLine = statement.body[statement.body.length - 1].line;\r\n                }\r\n\r\n                if (statement.increment) {\r\n                    state.commands.push(new ContinueTargetCommand(statement.id));\r\n                    state.commands.push(new StatementCommand(statement.increment));\r\n                }\r\n                state.commands.push(new GotoCommand(null, conditionPos, lastLine));\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n                conditionCmd.position = state.commands.length;\r\n            } else if (statement instanceof AST.Loop) {\r\n                let loopStartPos = state.commands.length;\r\n                if (!statement.continuing) {\r\n                    state.commands.push(new ContinueTargetCommand(statement.id));\r\n                }\r\n                let lastLine = statement.line;\r\n                if (statement.body.length > 0) {\r\n                    state.commands.push(new BlockCommand(statement.body));\r\n                    lastLine = statement.body[statement.body.length - 1].line;\r\n                }\r\n                state.commands.push(new GotoCommand(null, loopStartPos, lastLine));\r\n                state.commands.push(new BreakTargetCommand(statement.id));\r\n            } else if (statement instanceof AST.Continuing) {\r\n                state.commands.push(new ContinueTargetCommand(statement.loopId));\r\n                state.commands.push(new BlockCommand(statement.body));\r\n            } else if (statement instanceof AST.Continue) {\r\n                state.commands.push(new ContinueCommand(statement.loopId, statement));\r\n            } else if (statement instanceof AST.Break) {\r\n                state.commands.push(new BreakCommand(statement.loopId, statement.condition, statement));\r\n            } else if (statement instanceof AST.StaticAssert) {\r\n                state.commands.push(new StatementCommand(statement));\r\n            } else if (statement instanceof AST.Struct) {\r\n                // nothing to do\r\n            } else {\r\n                console.error(`TODO: statement type ${statement.constructor.name}`);\r\n            }\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    _collectFunctionCalls(node: AST.Expression, functionCalls: AST.CallExpr[]) {\r\n        if (node instanceof AST.CallExpr) {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    this._collectFunctionCalls(arg, functionCalls);\r\n                }\r\n            }\r\n            // Only collect custom function calls, not built-in functions.\r\n            if (!node.isBuiltin) {\r\n                functionCalls.push(node);\r\n            }\r\n        } else if (node instanceof AST.BinaryOperator) {\r\n            this._collectFunctionCalls(node.left, functionCalls);\r\n            this._collectFunctionCalls(node.right, functionCalls);\r\n        } else if (node instanceof AST.UnaryOperator) {\r\n            this._collectFunctionCalls(node.right, functionCalls);\r\n        } else if (node instanceof AST.CreateExpr) {\r\n            if (node.args) {\r\n                for (const arg of node.args) {\r\n                    this._collectFunctionCalls(arg, functionCalls);\r\n                }\r\n            }\r\n        } else if (node instanceof AST.BitcastExpr) {\r\n            this._collectFunctionCalls(node.value, functionCalls);\r\n        } else if (node instanceof AST.ArrayIndex) {\r\n            this._collectFunctionCalls(node.index, functionCalls);\r\n        } else if (AST.LiteralExpr) {\r\n            // nothing to do\r\n        } else {\r\n            console.error(`TODO: expression type ${node.constructor.name}`);\r\n        }\r\n    }\r\n}\r\n","import { WgslParser } from \"./wgsl_parser.js\";\r\nimport { Reflect } from \"./reflect/reflect.js\";\r\n\r\nexport * from \"./reflect/info.js\";\r\n\r\nexport class WgslReflect extends Reflect {\r\n  constructor(code?: string) {\r\n    super();\r\n    if (code) {\r\n      this.update(code);\r\n    }\r\n  }\r\n\r\n  update(code: string): void {\r\n    const parser = new WgslParser();\r\n    const ast = parser.parse(code);\r\n    this.updateAST(ast);\r\n  }\r\n}\r\n"],"names":["TypeInfo","constructor","name","attributes","this","size","isArray","isStruct","isTemplate","isPointer","getTypeName","MemberInfo","type","offset","align","members","format","count","stride","StructInfo","super","startLine","endLine","inUse","ArrayInfo","PointerInfo","TemplateInfo","access","ResourceType","VariableInfo","group","binding","resourceType","AliasInfo","InputInfo","locationType","location","interpolation","OutputInfo","OverrideInfo","id","ArgumentInfo","FunctionInfo","stage","inputs","outputs","arguments","returnType","resources","overrides","calls","Set","EntryFunctions","vertex","fragment","compute","float32View","Float32Array","int32View","Int32Array","buffer","float16View","Uint16Array","float32ToFloat16","float32","f32","sign","exponent","fraction","shift","uint32","Uint32Array","uint32ToFloat32","float11ToFloat32","f11","u32","getTexturePixel","imageData","x","y","z","mipLevel","height","bytesPerRow","texelByteSize","pixelValue","value","uintValue","gi","bi","f10","float10ToFloat32","numChannels","i","float16","s","e","f","Math","pow","NaN","Infinity","setPixelValue","Int16Array","f16","TextureFormatInfo","r8unorm","bytesPerBlock","blockWidth","blockHeight","isCompressed","channels","r8snorm","r8uint","r8sint","rg8unorm","rg8snorm","rg8uint","rg8sint","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","r16uint","r16sint","r16float","rg16uint","rg16sint","rg16float","rgba16uint","rgba16sint","rgba16float","r32uint","r32sint","r32float","rg32uint","rg32sint","rg32float","rgba32uint","rgba32sint","rgba32float","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","stencil8","isDepthStencil","hasDepth","hasStencil","depth16unorm","depth24plus","depthOnlyFormat","depth32float","stencilOnlyFormat","rgb9e5ufloat","Node","_id","line","isAstNode","astNodeType","search","callback","searchBlock","block","_BlockStart","instance","node","Array","_BlockEnd","constEvaluate","context","Error","constEvaluateString","toString","BuiltinFunctionNames","Statement","Function","args","body","attr","arg","StaticAssert","expression","While","condition","Continuing","loopId","For","init","increment","_a","_b","_c","Var","storage","Override","Let","Const","IncrementOperator","AssignOperator","TokenClass","parse","val","key","Increment","operator","variable","Assign","Call","isBuiltin","has","Loop","continuing","Switch","cases","If","elseif","_else","else","Return","Enable","Requires","extensions","Diagnostic","severity","rule","Alias","Discard","Break","Continue","Type","maxFormatType","t","length","tv","_priority","get","i32","x32","bool","void","Map","ForwardType","Struct","getMemberIndex","member","TemplateType","vec2f","vec3f","vec4f","vec2i","vec3i","vec4i","vec2u","vec3u","vec4u","vec2h","vec3h","vec4h","vec2b","vec3b","vec4b","mat2x2f","mat2x3f","mat2x4f","mat3x2f","mat3x3f","mat3x4f","mat4x2f","mat4x3f","mat4x4f","mat2x2h","mat2x3h","mat2x4h","mat3x2h","mat3x3h","mat3x4h","mat4x2h","mat4x3h","mat4x4h","mat2x2i","mat2x3i","mat2x4i","mat3x2i","mat3x3i","mat3x4i","mat4x2i","mat4x3i","mat4x4i","mat2x2u","mat2x3u","mat2x4u","mat3x2u","mat3x3u","mat3x4u","mat4x2u","mat4x3u","mat4x4u","PointerType","ArrayType","SamplerType","Expression","postfix","StringExpr","CreateExpr","evalExpression","CallExpr","cachedReturnValue","setCachedReturnValue","VariableExpr","ConstExpr","initializer","data","getSubData","LiteralExpr","undefined","isScalar","ScalarData","isVector","VectorData","MatrixData","scalarValue","console","error","vectorValue","BitcastExpr","ArrayIndex","index","Operator","UnaryOperator","right","BinaryOperator","left","_getPromotedType","t1","t2","SwitchCase","DefaultSelector","Case","selectors","Default","Argument","ElseIf","Member","Attribute","Data","typeInfo","parent","clone","setDataValue","exec","VoidData","PointerData","reference","floor","v","_getVectorData","values","formatName","getTypeInfo","typename","typeName","self","idx","d","byteOffset","toLowerCase","m","push","endsWith","formatSuffix","vectorData","TypedData","ArrayBuffer","cloned","Uint8Array","log","found","element","setData","byteLength","set","_i","fa","ua","TextureData","descriptor","view","width","Object","depthOrArrayLayers","sampleCount","mipLevelCount","dimension","getMipLevelSize","level","max","formatInfo","getGpuSize","getPixel","setPixel","setTexturePixel","TokenType","TokenTypes","none","reserved","eof","token","asm","bf16","do","enum","f64","handle","i8","i16","i64","mat","premerge","regardless","typedef","u8","u16","u64","unless","using","vec","keywords","array","keyword","atomic","mat2x2","mat2x3","mat2x4","mat3x2","mat3x3","mat3x4","mat4x2","mat4x3","mat4x4","ptr","sampler","sampler_comparison","struct","texture_1d","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_multisampled_2d","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","texture_external","vec2","vec3","vec4","bitcast","break","case","continue","default","diagnostic","discard","enable","fallthrough","false","fn","for","function","if","let","const","loop","while","private","read","read_write","return","requires","switch","true","alias","uniform","var","override","workgroup","write","rgba8unorm_srgb","bgra8unorm_srgb","rg11b10float","static_assert","tokens","decimal_float_literal","hex_float_literal","int_literal","uint_literal","ident","and","and_and","arrow","forward_slash","bang","bracket_left","bracket_right","brace_left","brace_right","colon","comma","equal","equal_equal","not_equal","greater_than","greater_than_equal","shift_right","less_than","less_than_equal","shift_left","modulo","minus","minus_minus","period","plus","plus_plus","or","or_or","paren_left","paren_right","semicolon","star","tilde","underscore","xor","plus_equal","minus_equal","times_equal","division_equal","modulo_equal","and_equal","or_equal","xor_equal","shift_right_equal","shift_left_equal","simpleTokens","literalTokens","_","regexTokens","storage_class","access_mode","sampler_type","sampled_texture_type","multisampled_texture_type","storage_texture_type","depth_texture_type","texture_external_type","any_texture_type","texel_format","const_literal","literal_or_ident","element_count_expression","template_types","attribute_name","assignment_operators","increment_operators","Token","lexeme","start","end","isTemplateType","indexOf","isArrayType","isArrayOrTemplateType","WgslScanner","source","_tokens","_start","_current","_line","_source","scanTokens","_isAtEnd","scanToken","_advance","_isWhitespace","_peekAhead","commentLevel","simpleToken","_addToken","matchType","isAlpha","_isAlpha","isUnderscore","_isAlphaNumeric","nextChar","matchedType","_findType","nextLexeme","ti","foundLessThan","lookAheadLexeme","lookAhead","maxLookAhead","li","_match","match","c","_isNumeric","amount","text","substring","_f32","_f32_i32","_f32_u32","_i32","_i32_f32","_i32_u32","_u32","_u32_f32","_u32_i32","castScalar","from","to","_FunctionResources","info","_TypeSize","Reflect","uniforms","textures","samplers","aliases","structs","entry","functions","_types","_functions","_isStorageTexture","updateAST","ast","_getAliasInfo","_getAttributeNum","_isUniformVar","g","b","varInfo","Uniform","_isStorageVar","isStorageTexture","StorageTexture","Storage","_isTextureVar","Texture","_isSamplerVar","Sampler","vertexStage","_getAttribute","fragmentStage","computeStage","_findResources","_getInputs","_getOutputs","map","_addCalls","u","_markStructsInUse","getStructInfo","getOverrideInfo","o","_getAlias","call","add","findResource","r","_findResource","_markStructsFromAST","isEntry","varStack","pop","callFn","getBindGroups","groups","_makeRoom","_getStructOutputs","output","_getOutputInfo","locationValue","_parseInt","_getStructInputs","input","_getInputInfo","_parseString","n","parseInt","isNaN","a","getTypeInfoByName","_updateTypeInfo","formatIsType","typeSize","_getTypeSize","_updateStructInfo","lastSize","lastOffset","structAlign","mi","ml","sizeInfo","_roundUp","explicitSize","explicitAlign","_typeInfo","divisor","arrayType","E","_textureTypes","_samplerTypes","obj","attrs","defaultValue","k","ceil","VarRef","FunctionRef","ExecContext","variables","currentFunctionName","getVariable","getFunction","createVariable","setVariable","getVariableValue","ExecInterface","getVariableName","BuiltinFunctions","All","isTrue","forEach","Any","res","some","Select","ArrayLength","arrayArg","arrayData","ta","Abs","abs","Acos","acos","Acosh","acosh","Asin","asin","Asinh","asinh","Atan","atan","Atanh","atanh","Atan2","atan2","ys","xs","Ceil","_clamp","min","Clamp","minS","maxS","Cos","cos","Cosh","cosh","CountLeadingZeros","clz32","_countOneBits","CountOneBits","_countTrailingZeros","CountTrailingZeros","Cross","l","lv","rv","Degrees","radToDeg","PI","Determinant","mv","mt","formatType","Distance","sum","sqrt","ls","rs","_dot","e1","e2","dot","Dot","Dot4U8Packed","Dot4I8Packed","Exp","exp","Exp2","ExtractBits","FaceForward","_firstLeadingBit","FirstLeadingBit","_firstTrailingBit","log2","FirstTrailingBit","Floor","Fma","av","bv","cv","Fract","Frexp","InsertBits","insert","mask","invMask","InverseSqrt","Ldexp","Length","Log","Log2","Max","Min","Mix","as","Modf","Normalize","Pow","QuantizeToF16","Radians","Refract","e3","sqrtK","ReverseBits","Round","round","Saturate","Sign","Sin","sin","Sinh","sinh","_smoothstep","edge0","edge1","SmoothStep","e0","xS","Sqrt","Step","edge","Tan","tan","Tanh","tanh","_getTransposeType","tname","Transpose","ttype","Trunc","trunc","Dpdx","DpdxCoarse","DpdxFine","Dpdy","DpdyCoarse","DpdyFine","Fwidth","FwidthCoarse","FwidthFine","TextureDimensions","textureArg","textureName","texture","textureSize","slice","TextureGather","TextureGatherCompare","TextureLoad","uv","texel","TextureNumLayers","TextureNumLevels","TextureNumSamples","TextureSample","TextureSampleBias","TextureSampleCompare","TextureSampleCompareLevel","TextureSampleGrad","TextureSampleLevel","TextureSampleBaseClampToEdge","TextureStore","AtomicLoad","AtomicStore","currentValue","AtomicAdd","originalValue","AtomicSub","AtomicMax","AtomicMin","AtomicAnd","AtomicOr","AtomicXor","AtomicExchange","AtomicCompareExchangeWeak","Pack4x8snorm","Pack4x8unorm","Pack4xI8","Pack4xU8","Pack4x8Clamp","Pack4xU8Clamp","Pack2x16snorm","Pack2x16unorm","Pack2x16float","Unpack4x8snorm","Unpack4x8unorm","Unpack4xI8","Unpack4xU8","Unpack2x16snorm","Unpack2x16unorm","Unpack2x16float","StorageBarrier","TextureBarrier","WorkgroupBarrier","WorkgroupUniformLoad","SubgroupAdd","SubgroupExclusiveAdd","SubgroupInclusiveAdd","SubgroupAll","SubgroupAnd","SubgroupAny","SubgroupBallot","SubgroupBroadcast","SubgroupBroadcastFirst","SubgroupElect","SubgroupMax","SubgroupMin","SubgroupMul","SubgroupExclusiveMul","SubgroupInclusiveMul","SubgroupOr","SubgroupShuffle","SubgroupShuffleDown","SubgroupShuffleUp","SubgroupShuffleXor","SubgroupXor","QuadBroadcast","QuadSwapDiagonal","QuadSwapX","QuadSwapY","VectorTypeSize","MatrixTypeSize","WgslExec","reflection","builtins","execute","config","_setOverrides","_execStatements","dispatchWorkgroups","kernel","dispatchCount","bindGroups","depth","textureData","_dispatchWorkgroup","execStatement","stmt","_breakObj","_continueObj","_let","_var","_const","_function","_if","_switch","_for","_while","_loop","subContext","_assign","_increment","_call","_evalBinaryOp","_evalLiteral","_evalVariable","_evalCall","_evalCreate","_evalConst","_evalBitcast","_evalUnaryOp","constants","workgroup_id","workgroupSize","local_invocation_id","global_invocation_id","_dispatchExec","globalName","globalVar","statements","ai","_callBuiltinFunction","_getVariableData","refData","varData","assignValue","op","rNode","defType","defaultCase","selector","selectorValue","_getScalarValue","fromType","fromCast","toType","toCast","cast","castVector","_callConstructorValue","_callConstructorVec","_callConstructorMatrix","memberInfo","_maxFormatTypeInfo","_r","result","rn","_l","la","ra","ln","matrixA","matrixB","j","matrixMultiply","colsB","rowsA","matrix","vector","cols","rows","resultVec","matrixVectorMultiply","vectorMatrixMultiply","argValue","vd","fill","ParseContext","WgslParser","_currentLine","_deferArrayCountEval","_currentLoop","_context","_exec","_forwardTypeCount","tokensOrCode","_initialize","statement","_global_decl_or_directive","arrayDecl","countNode","AST.VariableExpr","constant","AST.Member","AST.PointerType","_forwardType","AST.ArrayType","AST.Var","AST.Let","AST.Const","AST.Function","AST.Argument","AST.ForwardType","ft","_getType","scanner","_updateNode","_error","message","_peek","types","_check","_consume","tk","hasNameType","_previous","_type_alias","directive","_diagnostic","_requires_directive","_enable_directive","_attribute","_global_variable_decl","_override","_override_variable_decl","_global_let_decl","_global_const_decl","_struct","_struct_decl","_fn","_function_decl","argAttrs","typeAttrs","_type_decl","_return","_compound_statement","_statement","_if_statement","_switch_statement","_loop_statement","_for_statement","_while_statement","_continuing_statement","_static_assert_statement","_return_statement","_variable_statement","AST.Discard","breakStmt","AST.Break","_optional_paren_expression","continueStmt","AST.Continue","_increment_decrement_statement","_func_call_statement","_assignment_statement","AST.StaticAssert","whileLoop","AST.While","AST.Continuing","forLoop","AST.For","_for_init","_short_circuit_or_expression","_for_increment","_variable_decl","AST.LiteralExpr","savedPos","_unary_expression","AST.Increment","AST.IncrementOperator","decrement","AST.Assign","AST.AssignOperator","_argument_expression_list","AST.Call","AST.Loop","switchStmt","AST.Switch","_switch_body","hasDefault","_case_selectors","AST.DefaultSelector","_case_body","AST.Case","AST.Default","_shift_expression","nextStatement","_match_elseif","_elseif_statement","AST.If","AST.ElseIf","AST.Return","expr","_short_circuit_and_expr","AST.BinaryOperator","_inclusive_or_expression","_exclusive_or_expression","_and_expression","_equality_expression","_relational_expression","_additive_expression","_multiplicative_expression","AST.UnaryOperator","_singular_expression","_primary_expression","p","_postfix_expression","arrayIndex","AST.ArrayIndex","AST.StringExpr","_getStruct","AST.Type","AST.TemplateType","_validateTypeRange","AST.CreateExpr","AST.CallExpr","AST.ConstExpr","fs","isF16","parseFloat","_paren_expression","AST.BitcastExpr","memberAttrs","memberName","memberType","structNode","AST.Struct","_const_expression","_override_decl","valueExpr","constValue","AST.Override","ruleMessage","AST.Diagnostic","AST.Enable","AST.Requires","aliasType","aliasNode","AST.Alias","_texture_sampler_types","pointer","decl","countInt","AST.SamplerType","AST.Attribute","Command","StatementCommand","CallExprCommand","ContinueTargetCommand","BreakTargetCommand","ContinueCommand","BreakCommand","GotoCommand","position","lineNo","BlockCommand","StackFrame","commands","current","parentCallExpr","isAtEnd","getNextCommand","command","getCurrentCommand","ExecStack","states","isEmpty","last","TypecastExpr","WgslDebug","code","runStateCallback","_runTimer","breakpoints","_code","reset","startDebug","_execStack","state","_createState","currentState","currentCommand","toggleBreakpoint","delete","clearBreakpoints","clear","isRunning","run","setInterval","clearInterval","stepNext","pause","debugWorkgroup","dispatchId","_dispatchId","_shouldExecuteNextCommand","stepInto","stepOver","stepOut","parentState","fnState","targetId","cmd","blockState","functionCalls","_collectFunctionCalls","conditionCmd","gotoEnd","elseIf","gotoEndCommands","lastCondition","conditionExpr","gotoCommand","gotoEndCommand","commandPos","lastLine","conditionPos","loopStartPos","WgslReflect","update"],"mappings":"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,CACnC,MACA,MACA,MACA,SACA,cACA,MACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,OACA,QACA,MACA,OACA,oBACA,eACA,qBACA,QACA,UACA,cACA,WACA,MACA,eACA,eACA,MACA,OACA,cACA,cACA,kBACA,mBACA,QACA,MACA,QACA,QACA,aACA,cACA,QACA,SACA,MACA,OACA,MACA,MACA,MACA,OACA,YACA,MACA,gBACA,UACA,UACA,UACA,cACA,QACA,WACA,OACA,MACA,OACA,aACA,OACA,OACA,MACA,OACA,YACA,QACA,OACA,aACA,WACA,OACA,aACA,WACA,SACA,eACA,aACA,oBACA,gBACA,uBACA,cACA,mBACA,mBACA,oBACA,gBACA,oBACA,uBACA,4BACA,oBACA,qBACA,+BACA,eACA,aACA,cACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,iBACA,4BACA,eACA,eACA,WACA,WACA,eACA,gBACA,gBACA,gBACA,gBACA,iBACA,iBACA,aACA,aACA,kBACA,kBACA,kBACA,iBACA,iBACA,mBACA,uBACA,cACA,uBACA,uBACA,cACA,cACA,cACA,iBACA,oBACA,yBACA,gBACA,cACA,cACA,cACA,uBACA,uBACA,aACA,kBACA,sBACA,oBACA,qBACA,cACA,gBACA,mBACA,YACA,cAQI,MAAO4H,UAAkBpB,EAC7B,WAAA1J,GACEmB,OACD,EAQG,MAAO4J,UAAiBD,EAU5B,WAAA9K,CACEC,EACA+K,EACAlI,EACAmI,EACA7J,EACAC,GAEAF,QAVFhB,KAAA8C,MAAuB,IAAIC,IAWzB/C,KAAKF,KAAOA,EACZE,KAAK6K,KAAOA,EACZ7K,KAAK2C,WAAaA,EAClB3C,KAAK8K,KAAOA,EACZ9K,KAAKiB,UAAYA,EACjBjB,KAAKkB,QAAUA,CAChB,CAED,eAAIyI,GACF,MAAO,UACR,CAED,MAAAC,CAAOC,GACL,GAAI7J,KAAKD,WACP,IAAK,MAAMgL,KAAQ/K,KAAKD,WACtB8J,EAASkB,GAGblB,EAAS7J,MACT,IAAK,MAAMgL,KAAOhL,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"}